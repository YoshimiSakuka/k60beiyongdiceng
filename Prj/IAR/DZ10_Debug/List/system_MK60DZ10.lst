###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:32
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\IAR\system_MK60DZ10.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\IAR\system_MK60DZ10.c
#        -D DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\system_MK60DZ10.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\system_MK60DZ10.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\IAR\system_MK60DZ10.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       system_MK60DZ10.c
     11           * @brief      系统启动相关函数
     12           * @author     山外科技
     13           * @version    v5.2
     14           * @date       2014-10-09
     15           */
     16          
     17          #include "common.h"
     18          #include "system_MK60DZ10.h"
     19          #include "MK60_uart.h"
     20          #include "MK60_wdog.h"
     21          #include "MK60_gpio.h"
     22          
     23          
     24          

   \                                 In section .bss, align 4
     25          int core_clk_khz;
   \                     core_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          int core_clk_mhz;
   \                     core_clk_mhz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          int bus_clk_khz;
   \                     bus_clk_khz:
   \   00000000                      DS8 4
     28          
     29          extern void main(void);
     30          
     31          /*!
     32           *  @brief      kinetis 启动函数
     33           *  @since      v5.0
     34           *  @author     飞思卡尔公司
     35           *  @note       此函数是系统启动初期由汇编函数调用，然后执行main函数
     36           */

   \                                 In section .text, align 2, keep-with-next
     37          void start(void)
     38          {
   \                     start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     39              wdog_disable();     // 关闭看门狗
   \   00000002   0x.... 0x....      BL       wdog_disable
     40          
     41              common_startup();   // 复制中断向量表 和 必要的数据到 RAM里
   \   00000006   0x.... 0x....      BL       common_startup
     42          
     43              sysinit();          // 系统初始化，设置系统频率，初始化printf端口
   \   0000000A   0x.... 0x....      BL       sysinit
     44          
     45              //为了防止 main 函数 里 复用了 下载口，导致 下载失败，此处增加 按下 KEY_A 就进入死循环
     46              //SRART_CHECK();
     47          
     48              gpio_init(PTA4,GPO,1);  //初始化为输出1，即 禁用了 NMI 中断
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x.... 0x....      BL       gpio_init
     49          
     50              main();             // 执行用户主函数
   \   00000018   0x.... 0x....      BL       main
     51          
     52              while(1);           // 死循环
   \                     ??start_0: (+1)
   \   0000001C   0xE7FE             B.N      ??start_0
     53          }
     54          
     55          /*!
     56           *  @brief      系统初始化，设置系统频率，初始化printf端口
     57           *  @since      v5.0
     58           *  @note       此函数是系统启动初期由汇编函数调用，然后执行main函数
     59           */

   \                                 In section .text, align 2, keep-with-next
     60          void sysinit (void)
     61          {
   \                     sysinit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     62              core_clk_mhz = pll_init(CORE_CLK);     //设置系统时钟
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      BL       pll_init
   \   00000008   0x....             LDR.N    R1,??DataTable3
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     63          
     64              core_clk_khz = core_clk_mhz * 1000;     //把配置好的时钟都保存在全局变量里，以便后续使用
   \   0000000C   0x....             LDR.N    R0,??DataTable3
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF44F 0x717A      MOV      R1,#+1000
   \   00000014   0x4348             MULS     R0,R1,R0
   \   00000016   0x....             LDR.N    R1,??DataTable3_1
   \   00000018   0x6008             STR      R0,[R1, #+0]
     65              bus_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV2_MASK) >> 24) + 1);
   \   0000001A   0x....             LDR.N    R0,??DataTable3_1
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40048044
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0xF3C1 0x6103      UBFX     R1,R1,#+24,#+4
   \   00000026   0x1C49             ADDS     R1,R1,#+1
   \   00000028   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000002C   0x....             LDR.N    R1,??DataTable3_3
   \   0000002E   0x6008             STR      R0,[R1, #+0]
     66          
     67              //uart_init (VCAN_PORT, VCAN_BAUD);   //初始化printf用到的管脚
     68          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
     69          
     70          /*!
     71           *  @brief      trace 时钟输出 初始化
     72           *  @since      v5.0
     73           *  @note       可用来校验时钟输出是否正确
     74           *  @author     飞思卡尔公司
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          void trace_clk_init(void)
     77          {
     78              /* Set the trace clock to the core clock frequency */
     79              SIM_SOPT2 |= SIM_SOPT2_TRACECLKSEL_MASK;
   \                     trace_clk_init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_4  ;; 0x40048004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x5080      ORRS     R0,R0,#0x1000
   \   00000008   0x....             LDR.N    R1,??DataTable3_4  ;; 0x40048004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     80          
     81              /* Enable the TRACE_CLKOUT pin function on PTA6 (alt7 function) */
     82              PORTA_PCR6 = ( PORT_PCR_MUX(0x7));
   \   0000000C   0xF44F 0x60E0      MOV      R0,#+1792
   \   00000010   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40049018
   \   00000012   0x6008             STR      R0,[R1, #+0]
     83          }
   \   00000014   0x4770             BX       LR               ;; return
     84          
     85          /*!
     86           *  @brief      fb 时钟输出 初始化
     87           *  @since      v5.0
     88           *  @note       可用来校验时钟输出是否正确
     89           *  @author     飞思卡尔公司
     90           */

   \                                 In section .text, align 2, keep-with-next
     91          void fb_clk_init(void)
     92          {
     93              /* Enable the clock to the FlexBus module */
     94              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;
   \                     fb_clk_init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40048040
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000008   0x....             LDR.N    R1,??DataTable3_6  ;; 0x40048040
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     95          
     96              /* Enable the FB_CLKOUT function on PTC3 (alt5 function) */
     97              PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \   0000000C   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000010   0x....             LDR.N    R1,??DataTable3_7  ;; 0x4004b00c
   \   00000012   0x6008             STR      R0,[R1, #+0]
     98          }
   \   00000014   0x4770             BX       LR               ;; return
     99          
    100          
    101          /*!
    102           *  @brief      复制中断向量表 和 必要的数据到 RAM里
    103           *  @since      v5.0
    104           *  @author     飞思卡尔公司
    105           */
    106          #pragma section = ".data"
    107          #pragma section = ".data_init"
    108          #pragma section = ".bss"
    109          #pragma section = "CodeRelocate"
    110          #pragma section = "CodeRelocateRam"
    111          

   \                                 In section .text, align 2, keep-with-next
    112          void common_startup(void)
    113          {
   \                     common_startup: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    114              /* Declare a counter we'll use in all of the copy loops */
    115              uint32 n;
    116          
    117              /* Declare pointers for various data sections. These pointers
    118               * are initialized using values pulled in from the linker file
    119               */
    120              uint8 *data_ram, * data_rom, * data_rom_end;
    121              uint8 *bss_start, * bss_end;
    122          
    123          
    124              /*  VECTOR_TABLE 和 VECTOR_RAM 的地址从  linker 文件里获得 （*.icf） */
    125              extern uint32 __VECTOR_TABLE[];
    126              extern uint32 __VECTOR_RAM[];
    127          
    128              /* 复制ROM里的中断向量表到RAM里 */
    129              if (__VECTOR_RAM != __VECTOR_TABLE)             //如果不是RAM启动，则需要复制中断向量表
   \   00000004   0x....             LDR.N    R0,??DataTable3_8
   \   00000006   0x....             LDR.N    R1,??DataTable3_9
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD00D             BEQ.N    ??common_startup_0
    130              {
    131                  for (n = 0; n < 0x410; n++)                 //逐个复制
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4680             MOV      R8,R0
   \                     ??common_startup_1: (+1)
   \   00000010   0xF5B8 0x6F82      CMP      R8,#+1040
   \   00000014   0xD208             BCS.N    ??common_startup_0
    132                      __VECTOR_RAM[n] = __VECTOR_TABLE[n];
   \   00000016   0x....             LDR.N    R0,??DataTable3_9
   \   00000018   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000001C   0x....             LDR.N    R1,??DataTable3_8
   \   0000001E   0xF841 0x0028      STR      R0,[R1, R8, LSL #+2]
   \   00000022   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000026   0xE7F3             B.N      ??common_startup_1
    133              }
    134              /* 指定新的中断向量表地址为 __VECTOR_RAM */
    135              write_vtor((uint32)__VECTOR_RAM);
   \                     ??common_startup_0: (+1)
   \   00000028   0x....             LDR.N    R0,??DataTable3_8
   \   0000002A   0x.... 0x....      BL       write_vtor
    136          
    137              /* 把已赋初值的变量从ROM里复制数据到RAM里 */
    138              data_ram = __section_begin(".data");            //已赋初值的变量的地址在RAM里
   \   0000002E   0x....             LDR.N    R0,??DataTable3_10
   \   00000030   0x0007             MOVS     R7,R0
    139              data_rom = __section_begin(".data_init");       //已赋初值的变量的数据存放在ROM里，需要赋值到RAM里
   \   00000032   0x....             LDR.N    R0,??DataTable3_11
   \   00000034   0x0006             MOVS     R6,R0
    140              data_rom_end = __section_end(".data_init");
   \   00000036   0x....             LDR.N    R0,??DataTable3_12
   \   00000038   0x0004             MOVS     R4,R0
    141              n = data_rom_end - data_rom;
   \   0000003A   0x1BA0             SUBS     R0,R4,R6
   \   0000003C   0x4680             MOV      R8,R0
    142          
    143              /* 复制初始化数据到RAM里 */
    144              while (n--)
   \                     ??common_startup_2: (+1)
   \   0000003E   0x4640             MOV      R0,R8
   \   00000040   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD004             BEQ.N    ??common_startup_3
    145                  *data_ram++ = *data_rom++;
   \   00000048   0x7830             LDRB     R0,[R6, #+0]
   \   0000004A   0x7038             STRB     R0,[R7, #+0]
   \   0000004C   0x1C76             ADDS     R6,R6,#+1
   \   0000004E   0x1C7F             ADDS     R7,R7,#+1
   \   00000050   0xE7F5             B.N      ??common_startup_2
    146          
    147              /* 没赋初值或者初值为0的变量，需要清除其RAM里的数据，确保值为0 */
    148              bss_start = __section_begin(".bss");
   \                     ??common_startup_3: (+1)
   \   00000052   0x....             LDR.N    R0,??DataTable3_13
   \   00000054   0x4681             MOV      R9,R0
    149              bss_end = __section_end(".bss");
   \   00000056   0x....             LDR.N    R0,??DataTable3_14
   \   00000058   0x0005             MOVS     R5,R0
    150          
    151              /* 清除没赋初值或者初值为0的变量数据值 */
    152              n = bss_end - bss_start;
   \   0000005A   0xEBB5 0x0009      SUBS     R0,R5,R9
   \   0000005E   0x4680             MOV      R8,R0
    153              while(n--)
   \                     ??common_startup_4: (+1)
   \   00000060   0x4640             MOV      R0,R8
   \   00000062   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD005             BEQ.N    ??common_startup_5
    154                  *bss_start++ = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF889 0x0000      STRB     R0,[R9, #+0]
   \   00000070   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000074   0xE7F4             B.N      ??common_startup_4
    155          
    156              /* 赋值用 __ramfunc 声明的函数的的代码段到 RAM，可以加快代码的运行        */
    157              uint8 *code_relocate_ram = __section_begin("CodeRelocateRam");
   \                     ??common_startup_5: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable3_15
    158              uint8 *code_relocate = __section_begin("CodeRelocate");
   \   00000078   0x....             LDR.N    R1,??DataTable3_16
    159              uint8 *code_relocate_end = __section_end("CodeRelocate");
   \   0000007A   0x....             LDR.N    R2,??DataTable3_17
    160          
    161              /* 从ROM里复制函数代码到RAM里 */
    162              n = code_relocate_end - code_relocate;
   \   0000007C   0x1A53             SUBS     R3,R2,R1
   \   0000007E   0x4698             MOV      R8,R3
    163              while (n--)
   \                     ??common_startup_6: (+1)
   \   00000080   0x4643             MOV      R3,R8
   \   00000082   0xF1B3 0x0801      SUBS     R8,R3,#+1
   \   00000086   0x2B00             CMP      R3,#+0
   \   00000088   0xD004             BEQ.N    ??common_startup_7
    164                  *code_relocate_ram++ = *code_relocate++;
   \   0000008A   0x780B             LDRB     R3,[R1, #+0]
   \   0000008C   0x7003             STRB     R3,[R0, #+0]
   \   0000008E   0x1C49             ADDS     R1,R1,#+1
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0xE7F5             B.N      ??common_startup_6
    165          
    166          }
   \                     ??common_startup_7: (+1)
   \   00000094   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     core_clk_mhz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40049018         DC32     0x40049018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     __VECTOR_RAM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     __VECTOR_TABLE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     SFB(`.data`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     SFB(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x........         DC32     SFE(`.data_init`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     SFB(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     SFE(`.bss`)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     SFB(CodeRelocateRam)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     SFB(CodeRelocate)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x........         DC32     SFE(CodeRelocate)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   common_startup
        32   -> write_vtor
       0   fb_clk_init
       8   start
         8   -> common_startup
         8   -> gpio_init
         8   -> main
         8   -> sysinit
         8   -> wdog_disable
       8   sysinit
         8   -> pll_init
       0   trace_clk_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       4  bus_clk_khz
     152  common_startup
       4  core_clk_khz
       4  core_clk_mhz
      22  fb_clk_init
      30  start
      50  sysinit
      22  trace_clk_init

 
  12 bytes in section .bss
 348 bytes in section .text
 
 348 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
