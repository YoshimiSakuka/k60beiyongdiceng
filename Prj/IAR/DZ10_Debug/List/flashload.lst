###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:23
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\Accessories\flashload.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\Accessories\flashload.c
#        -D DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\flashload.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\flashload.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\Accessories\flashload.c
      1          #include  "include.h"
      2          #include  "datamap.h"
      3          
      4          #define         PAGE_Config             FLASH_SECTOR_NUM-1
      5          

   \                                 In section .bss, align 4
      6          struct datamap Config;
   \                     Config:
   \   00000000                      DS8 16
      7          

   \                                 In section .text, align 2, keep-with-next
      8          void load_config(void){
   \                     load_config: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
      9          	int16_t i;
     10          	int16_t *ptr = &Config.is_good;
   \   00000002   0x....             LDR.N    R4,??DataTable1
     11          
     12          	for(i=0 ; i< 8;i++)
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x0005             MOVS     R5,R0
   \                     ??load_config_0: (+1)
   \   00000008   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   0000000A   0x2D08             CMP      R5,#+8
   \   0000000C   0xDA09             BGE.N    ??load_config_1
     13                  {
     14                    *ptr = flash_read(PAGE_Config, i*8, uint16);
   \   0000000E   0xB22D             SXTH     R5,R5            ;; SignExt  R5,R5,#+16,#+16
   \   00000010   0x00E8             LSLS     R0,R5,#+3
   \   00000012   0xF510 0x20FF      ADDS     R0,R0,#+522240
   \   00000016   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   0000001A   0x8020             STRH     R0,[R4, #+0]
     15                    ptr++;
   \   0000001C   0x1CA4             ADDS     R4,R4,#+2
     16          	}
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
   \   00000020   0xE7F2             B.N      ??load_config_0
     17          	if(Config.is_good != (int16_t)0xA55A){ //Data invalid, load default configuartion
   \                     ??load_config_1: (+1)
   \   00000022   0x....             LDR.N    R0,??DataTable1
   \   00000024   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000028   0x....             LDR.N    R1,??DataTable1_1  ;; 0xffffa55a
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD016             BEQ.N    ??load_config_2
     18          		Config.is_good = 0xA55A;
   \   0000002E   0x....             LDR.N    R0,??DataTable1_1  ;; 0xffffa55a
   \   00000030   0x....             LDR.N    R1,??DataTable1
   \   00000032   0x8008             STRH     R0,[R1, #+0]
     19          		Config.dGx_offset = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR.N    R1,??DataTable1
   \   00000038   0x8048             STRH     R0,[R1, #+2]
     20          		Config.dGy_offset = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x....             LDR.N    R1,??DataTable1
   \   0000003E   0x8088             STRH     R0,[R1, #+4]
     21          		Config.dGz_offset = 0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR.N    R1,??DataTable1
   \   00000044   0x80C8             STRH     R0,[R1, #+6]
     22          	
     23          		Config.dMx_offset = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x....             LDR.N    R1,??DataTable1
   \   0000004A   0x8108             STRH     R0,[R1, #+8]
     24          		Config.dMy_offset = 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x....             LDR.N    R1,??DataTable1
   \   00000050   0x8148             STRH     R0,[R1, #+10]
     25          		Config.dMz_offset = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x....             LDR.N    R1,??DataTable1
   \   00000056   0x8188             STRH     R0,[R1, #+12]
     26          	
     27          		Write_config();	 //Write default configuration
   \   00000058   0x.... 0x....      BL       Write_config
     28          	}
     29          }
   \                     ??load_config_2: (+1)
   \   0000005C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     30          
     31          //Write current configuration

   \                                 In section .text, align 2, keep-with-next
     32          void Write_config(void){
   \                     Write_config: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     33          	int16_t i;
     34          	int16_t *ptr = &Config.is_good;
   \   00000002   0x....             LDR.N    R5,??DataTable1
     35           	flash_erase_sector(PAGE_Config); //Erase pages
   \   00000004   0x20FF             MOVS     R0,#+255
   \   00000006   0x.... 0x....      BL       flash_erase_sector
     36                  DELAY_MS(50);
   \   0000000A   0x2032             MOVS     R0,#+50
   \   0000000C   0x.... 0x....      BL       systick_delay_ms
     37          	for(i=0;i<8;i++){
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0004             MOVS     R4,R0
   \                     ??Write_config_0: (+1)
   \   00000014   0xB224             SXTH     R4,R4            ;; SignExt  R4,R4,#+16,#+16
   \   00000016   0x2C08             CMP      R4,#+8
   \   00000018   0xDA0C             BGE.N    ??Write_config_1
     38                          flash_write(PAGE_Config, i*8, (uint32_t)*ptr);
   \   0000001A   0xF9B5 0x2000      LDRSH    R2,[R5, #+0]
   \   0000001E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000020   0x00E1             LSLS     R1,R4,#+3
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x20FF             MOVS     R0,#+255
   \   00000026   0x.... 0x....      BL       flash_write
     39                          DELAY_MS(50);
   \   0000002A   0x2032             MOVS     R0,#+50
   \   0000002C   0x.... 0x....      BL       systick_delay_ms
     40          	}
   \   00000030   0x1C64             ADDS     R4,R4,#+1
   \   00000032   0xE7EF             B.N      ??Write_config_0
     41          }
   \                     ??Write_config_1: (+1)
   \   00000034   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     Config

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xFFFFA55A         DC32     0xffffa55a

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Write_config
        16   -> flash_erase_sector
        16   -> flash_write
        16   -> systick_delay_ms
      16   load_config
        16   -> Write_config


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      16  Config
      54  Write_config
      94  load_config

 
  16 bytes in section .bss
 156 bytes in section .text
 
 156 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
