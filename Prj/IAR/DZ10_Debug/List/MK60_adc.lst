###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:25
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_adc.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_adc.c -D DEBUG
#        -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_adc.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_adc.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_adc.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_adc.c
     11           * @brief      ADC函数
     12           * @author     山外科技
     13           * @version    v5.1
     14           * @date       2014-01-16
     15           */
     16          
     17          #include "common.h"
     18          #include "MK60_adc.h"
     19          

   \                                 In section .data, align 4
     20          ADC_MemMapPtr ADCN[2] = {ADC0_BASE_PTR, ADC1_BASE_PTR}; //定义两个指针数组保存 ADCN 的地址
   \                     ADCN:
   \   00000000   0x4003B000         DC32 4003B000H, 400BB000H
   \              0x400BB000   
     21          
     22          static void     adc_start   (ADCn_Ch_e, ADC_nbit);    //开始adc转换
     23          
     24          /*!
     25           *  @brief      ADC初始化
     26           *  @param      ADCn_Ch_e    ADC通道
     27           *  @since      v5.0
     28           *  @note       此初始化仅支持软件触发，不是每个通道都支持ADC 软件触发，
     29                          具体说明见 ADCn_Ch_e 的注释说明
     30           *  Sample usage:       adc_init (ADC0_SE10 );    //初始化 ADC0_SE10 ，使用 PTA7 管脚
     31           */

   \                                 In section .text, align 2, keep-with-next
     32          void adc_init(ADCn_Ch_e adcn_ch)
     33          {
   \                     adc_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     34          
     35              uint8 adcn = adcn_ch >> 5 ;
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x0965             LSRS     R5,R4,#+5
     36              //uint8 ch = adcn_ch & 0x1F;
     37          
     38              switch(adcn)
   \   00000008   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD002             BEQ.N    ??adc_init_0
   \   0000000E   0x2D01             CMP      R5,#+1
   \   00000010   0xD011             BEQ.N    ??adc_init_1
   \   00000012   0xE021             B.N      ??adc_init_2
     39              {
     40              case ADC0:       /*   ADC0  */
     41                  SIM_SCGC6 |= (SIM_SCGC6_ADC0_MASK );        //开启ADC0时钟
   \                     ??adc_init_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable3  ;; 0x4004803c
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000001C   0x....             LDR.N    R1,??DataTable3  ;; 0x4004803c
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     42                  SIM_SOPT7 &= ~(SIM_SOPT7_ADC0ALTTRGEN_MASK  | SIM_SOPT7_ADC0PRETRGSEL_MASK);
   \   00000020   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40048018
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF030 0x0090      BICS     R0,R0,#0x90
   \   00000028   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40048018
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     43                  SIM_SOPT7 |= SIM_SOPT7_ADC0TRGSEL(0);  // PDB 外部触发引脚输入 (PDB0_EXTRG)
   \   0000002C   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40048018
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40048018
   \   00000032   0x6008             STR      R0,[R1, #+0]
     44          
     45                  break;
   \   00000034   0xE014             B.N      ??adc_init_3
     46              case ADC1:       /*   ADC1    */
     47                  SIM_SCGC3 |= (SIM_SCGC3_ADC1_MASK );
   \                     ??adc_init_1: (+1)
   \   00000036   0x....             LDR.N    R0,??DataTable3_2  ;; 0x40048030
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   0000003E   0x....             LDR.N    R1,??DataTable3_2  ;; 0x40048030
   \   00000040   0x6008             STR      R0,[R1, #+0]
     48                  SIM_SOPT7 &= ~(SIM_SOPT7_ADC1ALTTRGEN_MASK  | SIM_SOPT7_ADC1PRETRGSEL_MASK) ;
   \   00000042   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40048018
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF430 0x4010      BICS     R0,R0,#0x9000
   \   0000004A   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40048018
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     49                  SIM_SOPT7 |= SIM_SOPT7_ADC1TRGSEL(0);
   \   0000004E   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40048018
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40048018
   \   00000054   0x6008             STR      R0,[R1, #+0]
     50                  break;
   \   00000056   0xE003             B.N      ??adc_init_3
     51              default:
     52                  ASSERT(0);
   \                     ??adc_init_2: (+1)
   \   00000058   0x2134             MOVS     R1,#+52
   \   0000005A   0x....             LDR.N    R0,??DataTable3_3
   \   0000005C   0x.... 0x....      BL       assert_failed
     53              }
     54          
     55              switch(adcn_ch)
   \                     ??adc_init_3: (+1)
   \   00000060   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xF000 0x8089      BEQ.W    ??adc_init_4
   \   0000006A   0x2801             CMP      R0,#+1
   \   0000006C   0xF000 0x8086      BEQ.W    ??adc_init_4
   \   00000070   0x2803             CMP      R0,#+3
   \   00000072   0xF000 0x8083      BEQ.W    ??adc_init_4
   \   00000076   0x2808             CMP      R0,#+8
   \   00000078   0xD04E             BEQ.N    ??adc_init_5
   \   0000007A   0x2809             CMP      R0,#+9
   \   0000007C   0xD051             BEQ.N    ??adc_init_6
   \   0000007E   0x280A             CMP      R0,#+10
   \   00000080   0xD054             BEQ.N    ??adc_init_7
   \   00000082   0x280B             CMP      R0,#+11
   \   00000084   0xD057             BEQ.N    ??adc_init_8
   \   00000086   0x280C             CMP      R0,#+12
   \   00000088   0xD05A             BEQ.N    ??adc_init_9
   \   0000008A   0x280D             CMP      R0,#+13
   \   0000008C   0xD05D             BEQ.N    ??adc_init_10
   \   0000008E   0x280E             CMP      R0,#+14
   \   00000090   0xD060             BEQ.N    ??adc_init_11
   \   00000092   0x280F             CMP      R0,#+15
   \   00000094   0xD063             BEQ.N    ??adc_init_12
   \   00000096   0x2810             CMP      R0,#+16
   \   00000098   0xD070             BEQ.N    ??adc_init_4
   \   0000009A   0x2811             CMP      R0,#+17
   \   0000009C   0xD064             BEQ.N    ??adc_init_13
   \   0000009E   0x2812             CMP      R0,#+18
   \   000000A0   0xD067             BEQ.N    ??adc_init_14
   \   000000A2   0x2813             CMP      R0,#+19
   \   000000A4   0xD06A             BEQ.N    ??adc_init_4
   \   000000A6   0x2814             CMP      R0,#+20
   \   000000A8   0xD068             BEQ.N    ??adc_init_4
   \   000000AA   0x281A             CMP      R0,#+26
   \   000000AC   0xD066             BEQ.N    ??adc_init_4
   \   000000AE   0x281D             CMP      R0,#+29
   \   000000B0   0xD064             BEQ.N    ??adc_init_4
   \   000000B2   0x281E             CMP      R0,#+30
   \   000000B4   0xD062             BEQ.N    ??adc_init_4
   \   000000B6   0x2820             CMP      R0,#+32
   \   000000B8   0xD061             BEQ.N    ??adc_init_15
   \   000000BA   0x2821             CMP      R0,#+33
   \   000000BC   0xD05F             BEQ.N    ??adc_init_15
   \   000000BE   0x2823             CMP      R0,#+35
   \   000000C0   0xD05D             BEQ.N    ??adc_init_15
   \   000000C2   0x2824             CMP      R0,#+36
   \   000000C4   0xD05C             BEQ.N    ??adc_init_16
   \   000000C6   0x2825             CMP      R0,#+37
   \   000000C8   0xD05F             BEQ.N    ??adc_init_17
   \   000000CA   0x2826             CMP      R0,#+38
   \   000000CC   0xD062             BEQ.N    ??adc_init_18
   \   000000CE   0x2827             CMP      R0,#+39
   \   000000D0   0xD065             BEQ.N    ??adc_init_19
   \   000000D2   0x2828             CMP      R0,#+40
   \   000000D4   0xD068             BEQ.N    ??adc_init_20
   \   000000D6   0x2829             CMP      R0,#+41
   \   000000D8   0xD06B             BEQ.N    ??adc_init_21
   \   000000DA   0x282A             CMP      R0,#+42
   \   000000DC   0xD06E             BEQ.N    ??adc_init_22
   \   000000DE   0x282B             CMP      R0,#+43
   \   000000E0   0xD071             BEQ.N    ??adc_init_23
   \   000000E2   0x282C             CMP      R0,#+44
   \   000000E4   0xD074             BEQ.N    ??adc_init_24
   \   000000E6   0x282D             CMP      R0,#+45
   \   000000E8   0xD077             BEQ.N    ??adc_init_25
   \   000000EA   0x282E             CMP      R0,#+46
   \   000000EC   0xD07A             BEQ.N    ??adc_init_26
   \   000000EE   0x282F             CMP      R0,#+47
   \   000000F0   0xD07D             BEQ.N    ??adc_init_27
   \   000000F2   0x2830             CMP      R0,#+48
   \   000000F4   0xF000 0x8085      BEQ.W    ??adc_init_28
   \   000000F8   0x2831             CMP      R0,#+49
   \   000000FA   0xD07D             BEQ.N    ??adc_init_29
   \   000000FC   0x2832             CMP      R0,#+50
   \   000000FE   0xF000 0x8080      BEQ.W    ??adc_init_28
   \   00000102   0x2833             CMP      R0,#+51
   \   00000104   0xD07D             BEQ.N    ??adc_init_28
   \   00000106   0x2834             CMP      R0,#+52
   \   00000108   0xD07B             BEQ.N    ??adc_init_28
   \   0000010A   0x283A             CMP      R0,#+58
   \   0000010C   0xD079             BEQ.N    ??adc_init_28
   \   0000010E   0x283D             CMP      R0,#+61
   \   00000110   0xD077             BEQ.N    ??adc_init_28
   \   00000112   0x283E             CMP      R0,#+62
   \   00000114   0xD075             BEQ.N    ??adc_init_28
   \   00000116   0xE075             B.N      ??adc_init_30
     56              {
     57              case ADC0_SE8:       // PTB0
     58                  port_init(PTB0, ALT0);
   \                     ??adc_init_5: (+1)
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x2020             MOVS     R0,#+32
   \   0000011C   0x.... 0x....      BL       port_init
     59                  break;
   \   00000120   0xE074             B.N      ??adc_init_31
     60              case ADC0_SE9:       // PTB1
     61                  port_init(PTB1, ALT0);
   \                     ??adc_init_6: (+1)
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0x2021             MOVS     R0,#+33
   \   00000126   0x.... 0x....      BL       port_init
     62                  break;
   \   0000012A   0xE06F             B.N      ??adc_init_31
     63              case ADC0_SE10:      // PTA7
     64                  port_init(PTA7, ALT0);
   \                     ??adc_init_7: (+1)
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x2007             MOVS     R0,#+7
   \   00000130   0x.... 0x....      BL       port_init
     65                  break;
   \   00000134   0xE06A             B.N      ??adc_init_31
     66              case ADC0_SE11:      // PTA8
     67                  port_init(PTA8, ALT0);
   \                     ??adc_init_8: (+1)
   \   00000136   0x2100             MOVS     R1,#+0
   \   00000138   0x2008             MOVS     R0,#+8
   \   0000013A   0x.... 0x....      BL       port_init
     68                  break;
   \   0000013E   0xE065             B.N      ??adc_init_31
     69              case ADC0_SE12:      // PTB2
     70                  port_init(PTB2, ALT0);
   \                     ??adc_init_9: (+1)
   \   00000140   0x2100             MOVS     R1,#+0
   \   00000142   0x2022             MOVS     R0,#+34
   \   00000144   0x.... 0x....      BL       port_init
     71                  break;
   \   00000148   0xE060             B.N      ??adc_init_31
     72              case ADC0_SE13:      // PTB3
     73                  port_init(PTB3, ALT0);
   \                     ??adc_init_10: (+1)
   \   0000014A   0x2100             MOVS     R1,#+0
   \   0000014C   0x2023             MOVS     R0,#+35
   \   0000014E   0x.... 0x....      BL       port_init
     74                  break;
   \   00000152   0xE05B             B.N      ??adc_init_31
     75              case ADC0_SE14:      // PTC0
     76                  port_init(PTC0, ALT0);
   \                     ??adc_init_11: (+1)
   \   00000154   0x2100             MOVS     R1,#+0
   \   00000156   0x2040             MOVS     R0,#+64
   \   00000158   0x.... 0x....      BL       port_init
     77                  break;
   \   0000015C   0xE056             B.N      ??adc_init_31
     78              case ADC0_SE15:      // PTC1
     79                  port_init(PTC1, ALT0);
   \                     ??adc_init_12: (+1)
   \   0000015E   0x2100             MOVS     R1,#+0
   \   00000160   0x2041             MOVS     R0,#+65
   \   00000162   0x.... 0x....      BL       port_init
     80                  break;
   \   00000166   0xE051             B.N      ??adc_init_31
     81              case ADC0_SE17:      // PTE24
     82                  port_init(PTE24, ALT0);
   \                     ??adc_init_13: (+1)
   \   00000168   0x2100             MOVS     R1,#+0
   \   0000016A   0x2098             MOVS     R0,#+152
   \   0000016C   0x.... 0x....      BL       port_init
     83                  break;
   \   00000170   0xE04C             B.N      ??adc_init_31
     84              case ADC0_SE18:      // PTE25
     85                  port_init(PTE25, ALT0);
   \                     ??adc_init_14: (+1)
   \   00000172   0x2100             MOVS     R1,#+0
   \   00000174   0x2099             MOVS     R0,#+153
   \   00000176   0x.... 0x....      BL       port_init
     86                  break;
   \   0000017A   0xE047             B.N      ??adc_init_31
     87          
     88              case ADC0_DP0:
     89              case ADC0_DP1:
     90              case ADC0_DP3:
     91              case ADC0_DM0:       // ADC0_DM0
     92              case ADC0_DM1:       // ADC0_DM1
     93              case ADC0_SE16:      // ADC0_SE16
     94              case Temp0_Sensor:   // Temperature Sensor,内部温度测量，可用ADC函数
     95              case VREFH0:         // 参考高电压,可用ADC函数 ,结果恒为 2^n-1
     96              case VREFL0:         // 参考低电压,可用ADC函数 ,结果恒为 0
     97                  break;          //这部分管脚不用配置复用
   \                     ??adc_init_4: (+1)
   \   0000017C   0xE046             B.N      ??adc_init_31
     98          
     99                  // ---------------------------------ADC1-------------------------
    100              case ADC1_DP0:
    101              case ADC1_DP1:
    102              case ADC1_DP3:
    103                  break;
   \                     ??adc_init_15: (+1)
   \   0000017E   0xE045             B.N      ??adc_init_31
    104              case ADC1_SE4a:      // PTE0
    105                  port_init(PTE0, ALT0);
   \                     ??adc_init_16: (+1)
   \   00000180   0x2100             MOVS     R1,#+0
   \   00000182   0x2080             MOVS     R0,#+128
   \   00000184   0x.... 0x....      BL       port_init
    106                  break;
   \   00000188   0xE040             B.N      ??adc_init_31
    107              case ADC1_SE5a:      // PTE1
    108                  port_init(PTE1, ALT0);
   \                     ??adc_init_17: (+1)
   \   0000018A   0x2100             MOVS     R1,#+0
   \   0000018C   0x2081             MOVS     R0,#+129
   \   0000018E   0x.... 0x....      BL       port_init
    109                  break;
   \   00000192   0xE03B             B.N      ??adc_init_31
    110              case ADC1_SE6a:      // PTE2
    111                  port_init(PTE2, ALT0);
   \                     ??adc_init_18: (+1)
   \   00000194   0x2100             MOVS     R1,#+0
   \   00000196   0x2082             MOVS     R0,#+130
   \   00000198   0x.... 0x....      BL       port_init
    112                  break;
   \   0000019C   0xE036             B.N      ??adc_init_31
    113              case ADC1_SE7a:      // PTE3
    114                  port_init(PTE3, ALT0);
   \                     ??adc_init_19: (+1)
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x2083             MOVS     R0,#+131
   \   000001A2   0x.... 0x....      BL       port_init
    115                  break;
   \   000001A6   0xE031             B.N      ??adc_init_31
    116          
    117              case ADC1_SE8:       // PTB0
    118                  port_init(PTB0, ALT0);
   \                     ??adc_init_20: (+1)
   \   000001A8   0x2100             MOVS     R1,#+0
   \   000001AA   0x2020             MOVS     R0,#+32
   \   000001AC   0x.... 0x....      BL       port_init
    119                  break;
   \   000001B0   0xE02C             B.N      ??adc_init_31
    120              case ADC1_SE9:       // PTB1
    121                  port_init(PTB1, ALT0);
   \                     ??adc_init_21: (+1)
   \   000001B2   0x2100             MOVS     R1,#+0
   \   000001B4   0x2021             MOVS     R0,#+33
   \   000001B6   0x.... 0x....      BL       port_init
    122                  break;
   \   000001BA   0xE027             B.N      ??adc_init_31
    123              case ADC1_SE10:      // PTB4
    124                  port_init(PTB4, ALT0);
   \                     ??adc_init_22: (+1)
   \   000001BC   0x2100             MOVS     R1,#+0
   \   000001BE   0x2024             MOVS     R0,#+36
   \   000001C0   0x.... 0x....      BL       port_init
    125                  break;
   \   000001C4   0xE022             B.N      ??adc_init_31
    126              case ADC1_SE11:      // PTB5
    127                  port_init(PTB5, ALT0);
   \                     ??adc_init_23: (+1)
   \   000001C6   0x2100             MOVS     R1,#+0
   \   000001C8   0x2025             MOVS     R0,#+37
   \   000001CA   0x.... 0x....      BL       port_init
    128                  break;
   \   000001CE   0xE01D             B.N      ??adc_init_31
    129              case ADC1_SE12:      // PTB6
    130                  port_init(PTB6, ALT0);
   \                     ??adc_init_24: (+1)
   \   000001D0   0x2100             MOVS     R1,#+0
   \   000001D2   0x2026             MOVS     R0,#+38
   \   000001D4   0x.... 0x....      BL       port_init
    131                  break;
   \   000001D8   0xE018             B.N      ??adc_init_31
    132              case ADC1_SE13:      // PTB7
    133                  port_init(PTB7, ALT0);
   \                     ??adc_init_25: (+1)
   \   000001DA   0x2100             MOVS     R1,#+0
   \   000001DC   0x2027             MOVS     R0,#+39
   \   000001DE   0x.... 0x....      BL       port_init
    134                  break;
   \   000001E2   0xE013             B.N      ??adc_init_31
    135              case ADC1_SE14:      // PTB10
    136                  port_init(PTB10, ALT0);
   \                     ??adc_init_26: (+1)
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x202A             MOVS     R0,#+42
   \   000001E8   0x.... 0x....      BL       port_init
    137                  break;
   \   000001EC   0xE00E             B.N      ??adc_init_31
    138              case ADC1_SE15:      // PTB11
    139                  port_init(PTB11, ALT0);
   \                     ??adc_init_27: (+1)
   \   000001EE   0x2100             MOVS     R1,#+0
   \   000001F0   0x202B             MOVS     R0,#+43
   \   000001F2   0x.... 0x....      BL       port_init
    140                  break;
   \   000001F6   0xE009             B.N      ??adc_init_31
    141              case ADC1_SE17:      // PTA17
    142                  port_init(PTA17, ALT0);
   \                     ??adc_init_29: (+1)
   \   000001F8   0x2100             MOVS     R1,#+0
   \   000001FA   0x2011             MOVS     R0,#+17
   \   000001FC   0x.... 0x....      BL       port_init
    143                  break;
   \   00000200   0xE004             B.N      ??adc_init_31
    144          
    145              case ADC1_SE16:      // ADC1_SE16
    146              case VREF_OUTPUT:    // VREF Output
    147              case ADC1_DM0:       // ADC1_DM0
    148              case ADC1_DM1:       // ADC1_DM1
    149              case Temp1_Sensor:
    150              case VREFH1:         // 参考高电压,可用ADC函数 ,结果恒为 2^n-1
    151              case VREFL1:         // 参考低电压,可用ADC函数 ,结果恒为 0
    152                  break;
   \                     ??adc_init_28: (+1)
   \   00000202   0xE003             B.N      ??adc_init_31
    153          
    154              default:
    155                  ASSERT(0);      //断言，传递的管脚不支持 ADC 单端软件触发，请换 其他管脚
   \                     ??adc_init_30: (+1)
   \   00000204   0x219B             MOVS     R1,#+155
   \   00000206   0x....             LDR.N    R0,??DataTable3_3
   \   00000208   0x.... 0x....      BL       assert_failed
    156                  break;
    157              }
    158          }
   \                     ??adc_init_31: (+1)
   \   0000020C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    159          
    160          /*!
    161           *  @brief      获取ADC采样值(不支持B通道)
    162           *  @param      ADCn_Ch_e    ADC通道
    163           *  @param      ADC_nbit     ADC精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    164           *  @return     采样值
    165           *  @since      v5.0
    166           *  Sample usage:       uint16 var = adc_once(ADC0_SE10, ADC_8bit);
    167           */

   \                                 In section .text, align 2, keep-with-next
    168          uint16 adc_once(ADCn_Ch_e adcn_ch, ADC_nbit bit) //采集某路模拟量的AD值
    169          {
   \                     adc_once: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    170              ADCn_e adcn = (ADCn_e)(adcn_ch >> 5) ;
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x0966             LSRS     R6,R4,#+5
    171          
    172              uint16 result = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    173          
    174              adc_start(adcn_ch, bit);      //启动ADC转换
   \   0000000C   0x0029             MOVS     R1,R5
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x.... 0x....      BL       adc_start
    175          
    176              while (( ADC_SC1_REG(ADCN[adcn], 0 ) & ADC_SC1_COCO_MASK ) != ADC_SC1_COCO_MASK);   //只支持 A通道
   \                     ??adc_once_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable3_4
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x0600             LSLS     R0,R0,#+24
   \   00000024   0xD5F8             BPL.N    ??adc_once_0
    177              result = ADC_R_REG(ADCN[adcn], 0);
   \   00000026   0x....             LDR.N    R0,??DataTable3_4
   \   00000028   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000002A   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000002E   0x6900             LDR      R0,[R0, #+16]
   \   00000030   0x0007             MOVS     R7,R0
    178              ADC_SC1_REG(ADCN[adcn], 0) &= ~ADC_SC1_COCO_MASK;
   \   00000032   0x....             LDR.N    R0,??DataTable3_4
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0xF030 0x0080      BICS     R0,R0,#0x80
   \   00000040   0x....             LDR.N    R1,??DataTable3_4
   \   00000042   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000044   0xF851 0x1026      LDR      R1,[R1, R6, LSL #+2]
   \   00000048   0x6008             STR      R0,[R1, #+0]
    179              return result;
   \   0000004A   0x0038             MOVS     R0,R7
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    180          }
    181          
    182          /*!
    183           *  @brief      启动ADC软件采样(不支持B通道)
    184           *  @param      ADCn_Ch_e    ADC通道
    185           *  @param      ADC_nbit     ADC精度（ ADC_8bit,ADC_12bit, ADC_10bit, ADC_16bit ）
    186           *  @since      v5.0
    187           *  @note       此函数内部调用，启动后即可等待数据采集完成
    188           *  Sample usage:       adc_start(ADC0_SE10, ADC_8bit);
    189           */

   \                                 In section .text, align 2, keep-with-next
    190          void adc_start(ADCn_Ch_e adcn_ch, ADC_nbit bit)
    191          {
   \                     adc_start: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
    192              ADCn_e adcn = (ADCn_e)(adcn_ch >> 5) ;
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x0942             LSRS     R2,R0,#+5
    193              uint8 ch = (uint8)(adcn_ch & 0x1F);
   \   00000006   0xF010 0x031F      ANDS     R3,R0,#0x1F
    194          
    195              //初始化ADC默认配置
    196              ADC_CFG1_REG(ADCN[adcn]) = (0
    197                                          //| ADC_CFG1_ADLPC_MASK         //ADC功耗配置，0为正常功耗，1为低功耗
    198                                          | ADC_CFG1_ADIV(2)              //时钟分频选择,分频系数为 2^n,2bit
    199                                          | ADC_CFG1_ADLSMP_MASK          //采样时间配置，0为短采样时间，1 为长采样时间
    200                                          | ADC_CFG1_MODE(bit)
    201                                          | ADC_CFG1_ADICLK(0)            //0为总线时钟,1为总线时钟/2,2为交替时钟（ALTCLK），3为 异步时钟（ADACK）。
    202                                         );
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x008C             LSLS     R4,R1,#+2
   \   0000000E   0xF014 0x040C      ANDS     R4,R4,#0xC
   \   00000012   0xF054 0x0450      ORRS     R4,R4,#0x50
   \   00000016   0x....             LDR.N    R5,??DataTable3_4
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0xF855 0x5022      LDR      R5,[R5, R2, LSL #+2]
   \   0000001E   0x60AC             STR      R4,[R5, #+8]
    203          
    204          
    205              ADC_CFG2_REG(ADCN[adcn])  = (0
    206                                           //| ADC_CFG2_MUXSEL_MASK       //ADC复用选择,0为a通道，1为b通道。
    207                                           //| ADC_CFG2_ADACKEN_MASK      //异步时钟输出使能,0为禁止，1为使能。
    208                                           | ADC_CFG2_ADHSC_MASK          //高速配置,0为正常转换序列，1为高速转换序列
    209                                           | ADC_CFG2_ADLSTS(0)           //长采样时间选择，ADCK为4+n个额外循环，额外循环，0为20，1为12，2为6，3为2
    210                                          );
   \   00000020   0x2404             MOVS     R4,#+4
   \   00000022   0x....             LDR.N    R5,??DataTable3_4
   \   00000024   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000026   0xF855 0x5022      LDR      R5,[R5, R2, LSL #+2]
   \   0000002A   0x60EC             STR      R4,[R5, #+12]
    211          
    212              //写入 SC1A 启动转换
    213              ADC_SC1_REG(ADCN[adcn], 0 ) = (0
    214                                             | ADC_SC1_AIEN_MASK          // 转换完成中断,0为禁止，1为使能
    215                                             //| ADC_SC1_DIFF_MASK        // 差分模式使能,0为单端，1为差分
    216                                             | ADC_SC1_ADCH( ch )
    217                                            );
   \   0000002C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000002E   0xF013 0x041F      ANDS     R4,R3,#0x1F
   \   00000032   0xF054 0x0440      ORRS     R4,R4,#0x40
   \   00000036   0x....             LDR.N    R5,??DataTable3_4
   \   00000038   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003A   0xF855 0x5022      LDR      R5,[R5, R2, LSL #+2]
   \   0000003E   0x602C             STR      R4,[R5, #+0]
    218          
    219          }
   \   00000040   0xBC30             POP      {R4,R5}
   \   00000042   0x4770             BX       LR               ;; return
    220          
    221          /*!
    222           *  @brief      停止ADC软件采样
    223           *  @param      ADCn_e       ADC模块号（ ADC0、 ADC1）
    224           *  @since      v5.0
    225           *  Sample usage:       adc_stop(ADC0);
    226           */

   \                                 In section .text, align 2, keep-with-next
    227          void adc_stop(ADCn_e adcn)
    228          {
    229              ADC_SC1_REG(ADCN[adcn], 0) = (0
    230                                            | ADC_SC1_AIEN_MASK                       // 转换完成中断,0为禁止，1为使能
    231                                            //| ADC_SC1_DIFF_MASK                     // 差分模式使能,0为单端，1为差分
    232                                            | ADC_SC1_ADCH(Module0_Dis)               //输入通道选择,此处选择禁止通道
    233                                           );
   \                     adc_stop: (+1)
   \   00000000   0x215F             MOVS     R1,#+95
   \   00000002   0x....             LDR.N    R2,??DataTable3_4
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000A   0x6011             STR      R1,[R2, #+0]
    234          }
   \   0000000C   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40048018         DC32     0x40048018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ADCN

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 43H, 68H, 69H, 70H, 5CH, 73H
   \              0x43 0x68    
   \              0x69 0x70    
   \              0x5C 0x73    
   \   00000030   0x72 0x63          DC8 72H, 63H, 5CH, 4DH, 4BH, 36H, 30H, 5FH
   \              0x5C 0x4D    
   \              0x4B 0x36    
   \              0x30 0x5F    
   \   00000038   0x61 0x64          DC8 61H, 64H, 63H, 2EH, 63H, 0
   \              0x63 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0
    235          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   adc_init
        16   -> assert_failed
        16   -> port_init
      24   adc_once
        24   -> adc_start
       8   adc_start
       0   adc_stop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      64  ?_0
       8  ADCN
     526  adc_init
      80  adc_once
      68  adc_start
      14  adc_stop

 
   8 bytes in section .data
  64 bytes in section .rodata
 708 bytes in section .text
 
 708 bytes of CODE  memory
  64 bytes of CONST memory
   8 bytes of DATA  memory

Errors: none
Warnings: none
