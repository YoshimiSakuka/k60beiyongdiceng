###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_dma.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_dma.c -D DEBUG
#        -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_dma.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_dma.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_dma.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_dma.c
     11           * @brief      DMA函数库
     12           * @author     山外科技
     13           * @version    v5.1
     14           * @date       2014-04-25
     15           */
     16          
     17          
     18          
     19          #include "common.h"
     20          #include "MK60_port.h"
     21          #include "MK60_gpio.h"
     22          #include "MK60_dma.h"
     23          

   \                                 In section .text, align 2, keep-with-next
     24          static void dma_gpio_input_init(void *SADDR,uint8 BYTEs)
     25          {
   \                     dma_gpio_input_init: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x000C             MOVS     R4,R1
     26              uint8 n, tmp;
     27              uint8 ptxn;
     28          
     29              //SADDR 实际上就是 GPIO的 输入寄存器 PDIR 的地址
     30              //GPIOA、GPIOB、GPIOC、GPIOD、GPIOE 的地址 分别是 0x400FF000u 、0x400FF040u 、0x400FF080u、 0x400FF0C0u、0x400FF100u
     31              //sizeof(GPIO_MemMap) = 0x18
     32              //每个GPIO地址 &0x1C0 后，得到 0x000 , 0x040 , 0x080 ,0x0C0 ,0x100
     33              //再 /0x40 后得到 0 、 1 、 2、 3、4 ，刚好就是 PTA、PTB、PTC 、PTD 、PTE
     34              //再 *32 就等于 PTA0、PTB0、PTC0 、PTD0 、PTE0
     35              uint8 ptx0 = ((((uint32)SADDR) & 0x1C0) / 0x40 ) * 32;
   \   00000008   0xEA5F 0x1098      LSRS     R0,R8,#+6
   \   0000000C   0xF010 0x0007      ANDS     R0,R0,#0x7
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xEA5F 0x1940      LSLS     R9,R0,#+5
     36          
     37              //每个GPIO 对应的寄存器地址， &0x 3F 后得到的值都是相同的。
     38              //PTA_B0_IN 即 GPIOA 的 输入寄存器 PDIR 的 地址
     39              // (SADDR & 0x3f - PTA_B0_IN & 0x3f) 等效于 (SADDR - PTA_B0_IN) & 0x3f
     40              //假设需要采集的位 为 0~7、8~15、16~23、24~31 ，则 上面式子对应的值 为 0、1、2、3
     41              //刚好是  0~7、8~15、16~23、24~31 位的地址偏移，再 * 8 就变成 0、8、16、24
     42          
     43              n = (uint8)(((uint32)SADDR - ((uint32)(&PTA_B0_IN))) & 0x3f) * 8;       //最小的引脚号
   \   00000016   0x4640             MOV      R0,R8
   \   00000018   0x3810             SUBS     R0,R0,#+16
   \   0000001A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x00C0             LSLS     R0,R0,#+3
   \   00000022   0x0005             MOVS     R5,R0
     44          
     45              ptxn = ptx0 + n;
   \   00000024   0xEB15 0x0009      ADDS     R0,R5,R9
   \   00000028   0x0007             MOVS     R7,R0
     46              tmp = ptxn + (BYTEs * 8 ) - 1;                                          //最大的引脚号
   \   0000002A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000002C   0xEB17 0x00C4      ADDS     R0,R7,R4, LSL #+3
   \   00000030   0x1E40             SUBS     R0,R0,#+1
   \   00000032   0x0006             MOVS     R6,R0
     47              while(ptxn <= tmp)
   \                     ??dma_gpio_input_init_0: (+1)
   \   00000034   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x42BE             CMP      R6,R7
   \   0000003A   0xD30D             BCC.N    ??dma_gpio_input_init_1
     48              {
     49                  //这里加入 GPIO 初始化为输入
     50                  gpio_init((PTXn_e )ptxn, GPI, 0);               //设置为输入
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x0038             MOVS     R0,R7
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       gpio_init
     51                  port_init((PTXn_e )ptxn , ALT1 | PULLDOWN );    //输入源默认配置为下拉，默认读取到的是0
   \   00000048   0xF44F 0x7181      MOV      R1,#+258
   \   0000004C   0x0038             MOVS     R0,R7
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       port_init
     52                  ptxn ++;
   \   00000054   0x1C7F             ADDS     R7,R7,#+1
   \   00000056   0xE7ED             B.N      ??dma_gpio_input_init_0
     53              }
     54          }
   \                     ??dma_gpio_input_init_1: (+1)
   \   00000058   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
     55          
     56          /*!
     57           *  @brief      DMA初始化，由IO口请求传输输入端口的数据到内存
     58           *  @param      DMA_CHn         通道号（DMA_CH0 ~ DMA_CH15）
     59           *  @param      SADDR           源地址( (void * )&PTx_Bn_IN 或 (void * )&PTx_Wn_IN 或 (void * )&PTx_IN  )
     60           *  @param      DADDR           目的地址
     61           *  @param      PTxn            触发端口
     62           *  @param      DMA_BYTEn       每次DMA传输字节数
     63           *  @param      count           一个主循环传输字节数
     64           *  @param      cfg             DMA传输配置，从DMA_cfg里选择
     65           *  @since      v5.0
     66           *  @note       DMA PTXn触发源默认上升沿触发传输，若需修改，则初始化后调用 port_init 配置DMA 触发方式
     67                          初始化后，需要调用 DMA_EN 来实现
     68           *  Sample usage:   uint8 buff[10];
     69                              dma_portx2buff_init(DMA_CH0, PTB_B0_IN, buff, PTA7, DMA_BYTE1, 10, DADDR_RECOVER);
     70                              //DMA初始化，源地址：PTB_B0_IN，目的地址：buff,PTA7触发(默认上升沿)，每次传输1字节，共传输 10次 ，传输结束后恢复地址
     71          
     72                              port_init(PTA7,ALT1 | DMA_FALLING);             //默认触发源是上升沿，此处改为 下降沿触发
     73          
     74                              DMA_EN(DMA_CH0);                //需要使能 DMA 后才能传输数据
     75           */

   \                                 In section .text, align 2, keep-with-next
     76          void dma_portx2buff_init(DMA_CHn CHn, void *SADDR, void *DADDR, PTXn_e ptxn, DMA_BYTEn byten, uint32 count, uint32 cfg)
     77          {
   \                     dma_portx2buff_init: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0005             MOVS     R5,R0
   \   00000006   0x000E             MOVS     R6,R1
   \   00000008   0x0017             MOVS     R7,R2
   \   0000000A   0x4698             MOV      R8,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
   \   0000000E   0xF8DD 0x902C      LDR      R9,[SP, #+44]
   \   00000012   0xF8DD 0xA030      LDR      R10,[SP, #+48]
     78          
     79              uint8 BYTEs = (byten == DMA_BYTE1 ? 1 : (byten == DMA_BYTE2 ? 2 : (byten == DMA_BYTE4 ? 4 : 16 ) ) ); //计算传输字节数
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD102             BNE.N    ??dma_portx2buff_init_0
   \   0000001C   0xF05F 0x0B01      MOVS     R11,#+1
   \   00000020   0xE00D             B.N      ??dma_portx2buff_init_1
   \                     ??dma_portx2buff_init_0: (+1)
   \   00000022   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000024   0x2C01             CMP      R4,#+1
   \   00000026   0xD102             BNE.N    ??dma_portx2buff_init_2
   \   00000028   0xF05F 0x0B02      MOVS     R11,#+2
   \   0000002C   0xE007             B.N      ??dma_portx2buff_init_3
   \                     ??dma_portx2buff_init_2: (+1)
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x2C02             CMP      R4,#+2
   \   00000032   0xD102             BNE.N    ??dma_portx2buff_init_4
   \   00000034   0xF05F 0x0B04      MOVS     R11,#+4
   \   00000038   0xE001             B.N      ??dma_portx2buff_init_3
   \                     ??dma_portx2buff_init_4: (+1)
   \   0000003A   0xF05F 0x0B10      MOVS     R11,#+16
     80          
     81              //断言，检测传递进来参数是否正确
     82              ASSERT(                                             //用断言检测 源地址和每次传输字节数是否正确
     83                  (   (byten == DMA_BYTE1)                    //传输一个字节
     84                      && ( (SADDR >= &PTA_B0_IN) && (SADDR <= ( &PTE_B3_IN )))
     85                  )
     86          
     87                  || (   (byten == DMA_BYTE2)                   //传输两个字节(注意，不能跨端口)
     88                         && ( (SADDR >= &PTA_B0_IN)
     89                              && (SADDR <= ( &PTE_W1_IN ))
     90                              && (((uint32)SADDR & 0x03) != 0x03) )         //保证不跨端口
     91                     )
     92          
     93                  || (   (byten == DMA_BYTE4)                   //传输四个字节
     94                         && ((SADDR >= &PTA_B0_IN) && (SADDR <= ( &PTE_B0_IN )))
     95                         && (((uint32)SADDR & 0x03) == 0x00)           //保证不跨端口
     96                     )
     97              );
   \                     ??dma_portx2buff_init_3: (+1)
   \                     ??dma_portx2buff_init_1: (+1)
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0x2C00             CMP      R4,#+0
   \   00000042   0xD105             BNE.N    ??dma_portx2buff_init_5
   \   00000044   0x....             LDR.N    R0,??DataTable0  ;; 0x400ff010
   \   00000046   0x4286             CMP      R6,R0
   \   00000048   0xD302             BCC.N    ??dma_portx2buff_init_5
   \   0000004A   0x....             LDR.N    R0,??DataTable0_1  ;; 0x400ff113
   \   0000004C   0x42B0             CMP      R0,R6
   \   0000004E   0xD21D             BCS.N    ??dma_portx2buff_init_6
   \                     ??dma_portx2buff_init_5: (+1)
   \   00000050   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000052   0x2C01             CMP      R4,#+1
   \   00000054   0xD109             BNE.N    ??dma_portx2buff_init_7
   \   00000056   0x....             LDR.N    R0,??DataTable0  ;; 0x400ff010
   \   00000058   0x4286             CMP      R6,R0
   \   0000005A   0xD306             BCC.N    ??dma_portx2buff_init_7
   \   0000005C   0x....             LDR.N    R0,??DataTable0_2  ;; 0x400ff112
   \   0000005E   0x42B0             CMP      R0,R6
   \   00000060   0xD303             BCC.N    ??dma_portx2buff_init_7
   \   00000062   0xF016 0x0003      ANDS     R0,R6,#0x3
   \   00000066   0x2803             CMP      R0,#+3
   \   00000068   0xD110             BNE.N    ??dma_portx2buff_init_6
   \                     ??dma_portx2buff_init_7: (+1)
   \   0000006A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006C   0x2C02             CMP      R4,#+2
   \   0000006E   0xD109             BNE.N    ??dma_portx2buff_init_8
   \   00000070   0x....             LDR.N    R0,??DataTable0  ;; 0x400ff010
   \   00000072   0x4286             CMP      R6,R0
   \   00000074   0xD306             BCC.N    ??dma_portx2buff_init_8
   \   00000076   0x....             LDR.N    R0,??DataTable0_3  ;; 0x400ff110
   \   00000078   0x42B0             CMP      R0,R6
   \   0000007A   0xD303             BCC.N    ??dma_portx2buff_init_8
   \   0000007C   0xF016 0x0003      ANDS     R0,R6,#0x3
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD003             BEQ.N    ??dma_portx2buff_init_6
   \                     ??dma_portx2buff_init_8: (+1)
   \   00000084   0x2161             MOVS     R1,#+97
   \   00000086   0x....             LDR.N    R0,??DataTable0_4
   \   00000088   0x.... 0x....      BL       assert_failed
     98          
     99              ASSERT(count < 0x8000); //断言，最大只支持0x7FFF
   \                     ??dma_portx2buff_init_6: (+1)
   \   0000008C   0xF5B9 0x4F00      CMP      R9,#+32768
   \   00000090   0xD303             BCC.N    ??dma_portx2buff_init_9
   \   00000092   0x2163             MOVS     R1,#+99
   \   00000094   0x....             LDR.N    R0,??DataTable0_4
   \   00000096   0x.... 0x....      BL       assert_failed
    100          
    101              //DMA 寄存器 配置
    102          
    103              /* 开启时钟 */
    104              SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;                        //打开DMA模块时钟
   \                     ??dma_portx2buff_init_9: (+1)
   \   0000009A   0x....             LDR.N    R0,??DataTable0_5  ;; 0x40048040
   \   0000009C   0x6800             LDR      R0,[R0, #+0]
   \   0000009E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000A2   0x....             LDR.N    R1,??DataTable0_5  ;; 0x40048040
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    105          
    106          #if defined(MK60DZ10)
    107              SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;                     //打开DMA多路复用器时钟
   \   000000A6   0x....             LDR.N    R0,??DataTable0_6  ;; 0x4004803c
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000AE   0x....             LDR.N    R1,??DataTable0_6  ;; 0x4004803c
   \   000000B0   0x6008             STR      R0,[R1, #+0]
    108          #elif defined(MK60F15)
    109              SIM_SCGC6 |= SIM_SCGC6_DMAMUX0_MASK;                    //打开DMA多路复用器时钟
    110          #endif
    111          
    112              /* 配置 DMA 通道 的 传输控制块 TCD ( Transfer Control Descriptor ) */
    113              DMA_SADDR(CHn) =    (uint32)SADDR;                      // 设置  源地址
   \   000000B2   0x....             LDR.N    R0,??DataTable0_7  ;; 0x40009000
   \   000000B4   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000B6   0x0169             LSLS     R1,R5,#+5
   \   000000B8   0x500E             STR      R6,[R1, R0]
    114              DMA_DADDR(CHn) =    (uint32)DADDR;                      // 设置目的地址
   \   000000BA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000BC   0x0168             LSLS     R0,R5,#+5
   \   000000BE   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000C2   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000C6   0x6107             STR      R7,[R0, #+16]
    115              DMA_SOFF(CHn)  =    0x00u;                              // 设置源地址偏移 = 0x0, 即不变
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CC   0x0169             LSLS     R1,R5,#+5
   \   000000CE   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   000000D2   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   000000D6   0x8088             STRH     R0,[R1, #+4]
    116              DMA_DOFF(CHn)  =    BYTEs;                              // 每次传输后，目的地址加 BYTEs
   \   000000D8   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000000DC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000DE   0x0168             LSLS     R0,R5,#+5
   \   000000E0   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   000000E4   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   000000E8   0xF8A0 0xB014      STRH     R11,[R0, #+20]
    117              DMA_ATTR(CHn)  =    (0
    118                                   | DMA_ATTR_SMOD(0x0)               // 源地址模数禁止  Source address modulo feature is disabled
    119                                   | DMA_ATTR_SSIZE(byten)            // 源数据位宽 ：DMA_BYTEn  。    SSIZE = 0 -> 8-bit ，SSIZE = 1 -> 16-bit ，SSIZE = 2 -> 32-bit ，SSIZE = 4 -> 16-byte
    120                                   | DMA_ATTR_DMOD(0x0)               // 目标地址模数禁止
    121                                   | DMA_ATTR_DSIZE(byten)            // 目标数据位宽 ：DMA_BYTEn  。  设置参考  SSIZE
    122                                  );
   \   000000EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EE   0x0220             LSLS     R0,R4,#+8
   \   000000F0   0xF410 0x60E0      ANDS     R0,R0,#0x700
   \   000000F4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F6   0xF014 0x0107      ANDS     R1,R4,#0x7
   \   000000FA   0x4308             ORRS     R0,R1,R0
   \   000000FC   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000FE   0x0169             LSLS     R1,R5,#+5
   \   00000100   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   00000104   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   00000108   0x80C8             STRH     R0,[R1, #+6]
    123          
    124              DMA_CITER_ELINKNO(CHn)  = DMA_CITER_ELINKNO_CITER(count);   //当前主循环次数
   \   0000010A   0x4648             MOV      R0,R9
   \   0000010C   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   0000010E   0x0C40             LSRS     R0,R0,#+17
   \   00000110   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000112   0x0169             LSLS     R1,R5,#+5
   \   00000114   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   00000118   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000011C   0x82C8             STRH     R0,[R1, #+22]
    125              DMA_BITER_ELINKNO(CHn)  = DMA_BITER_ELINKNO_BITER(count);   //起始主循环次数
   \   0000011E   0x4648             MOV      R0,R9
   \   00000120   0x0440             LSLS     R0,R0,#+17       ;; ZeroExtS R0,R0,#+17,#+17
   \   00000122   0x0C40             LSRS     R0,R0,#+17
   \   00000124   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000126   0x0169             LSLS     R1,R5,#+5
   \   00000128   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000012C   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   00000130   0x83C8             STRH     R0,[R1, #+30]
    126          
    127              DMA_CR &= ~DMA_CR_EMLM_MASK;                                // CR[EMLM] = 0
   \   00000132   0x....             LDR.N    R0,??DataTable0_8  ;; 0x40008000
   \   00000134   0x6800             LDR      R0,[R0, #+0]
   \   00000136   0xF030 0x0080      BICS     R0,R0,#0x80
   \   0000013A   0x....             LDR.N    R1,??DataTable0_8  ;; 0x40008000
   \   0000013C   0x6008             STR      R0,[R1, #+0]
    128          
    129              //当CR[EMLM] = 0 时:
    130              DMA_NBYTES_MLNO(CHn) =   DMA_NBYTES_MLNO_NBYTES(BYTEs); // 通道每次传输字节数，这里设置为BYTEs个字节。注：值为0表示传输4GB */
   \   0000013E   0xFA5F 0xFB8B      UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   00000142   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000144   0x0168             LSLS     R0,R5,#+5
   \   00000146   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   0000014A   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   0000014E   0xF8C0 0xB008      STR      R11,[R0, #+8]
    131          
    132              /* 配置 DMA 传输结束后的操作 */
    133              DMA_SLAST(CHn)      =   0;                              //调整  源地址的附加值,主循环结束后恢复  源地址
   \   00000152   0x2000             MOVS     R0,#+0
   \   00000154   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000156   0x0169             LSLS     R1,R5,#+5
   \   00000158   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000015C   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   00000160   0x60C8             STR      R0,[R1, #+12]
    134              DMA_DLAST_SGA(CHn)  =   (uint32)( (cfg & DADDR_KEEPON ) == 0 ? (-count)  : 0 ); //调整目的地址的附加值,主循环结束后恢复目的地址或者保持地址
   \   00000162   0xEA5F 0x70CA      LSLS     R0,R10,#+31
   \   00000166   0xD402             BMI.N    ??dma_portx2buff_init_10
   \   00000168   0xF1D9 0x0000      RSBS     R0,R9,#+0
   \   0000016C   0xE000             B.N      ??dma_portx2buff_init_11
   \                     ??dma_portx2buff_init_10: (+1)
   \   0000016E   0x2000             MOVS     R0,#+0
   \                     ??dma_portx2buff_init_11: (+1)
   \   00000170   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000172   0x0169             LSLS     R1,R5,#+5
   \   00000174   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   00000178   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000017C   0x6188             STR      R0,[R1, #+24]
    135              DMA_CSR(CHn)        =   (0
    136                                       | DMA_CSR_BWC(3)               //带宽控制,每读一次，eDMA 引擎停止 8 个周期（0不停止；1保留；2停止4周期；3停止8周期）
    137                                       | DMA_CSR_DREQ_MASK            //主循环结束后停止硬件请求
    138                                       | DMA_CSR_INTMAJOR_MASK        //主循环结束后产生中断
    139                                      );
   \   0000017E   0xF24C 0x000A      MOVW     R0,#+49162
   \   00000182   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000184   0x0169             LSLS     R1,R5,#+5
   \   00000186   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   0000018A   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000018E   0x8388             STRH     R0,[R1, #+28]
    140          
    141              /* 配置 DMA 触发源 */
    142          #if defined(MK60DZ10)
    143              DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR, CHn) = (0
    144          #elif defined(MK60F15)
    145              DMAMUX_CHCFG_REG(DMAMUX0_BASE_PTR, CHn) = (0
    146          #endif
    147                      | DMAMUX_CHCFG_ENBL_MASK                        /* Enable routing of DMA request */
    148                      //| DMAMUX_CHCFG_TRIG_MASK                        /* Trigger Mode: Periodic   PIT周期触发传输模式   通道1对应PIT1，必须使能PIT1，且配置相应的PIT定时触发 */
    149                      | DMAMUX_CHCFG_SOURCE( PTX(ptxn) + DMA_PORTA) /* 通道触发传输源:     */
    150                                                       );
   \   00000190   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000194   0xEA5F 0x1058      LSRS     R0,R8,#+5
   \   00000198   0x3031             ADDS     R0,R0,#+49
   \   0000019A   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000019E   0x....             LDR.N    R1,??DataTable0_9  ;; 0x40021000
   \   000001A0   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000001A2   0x5468             STRB     R0,[R5, R1]
    151          
    152              //配置触发源（默认是 上升沿触发）
    153              port_init(ptxn, ALT1 | DMA_RISING);
   \   000001A4   0x....             LDR.N    R1,??DataTable0_10  ;; 0x10100
   \   000001A6   0x4640             MOV      R0,R8
   \   000001A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001AA   0x.... 0x....      BL       port_init
    154          
    155              /*  配置输入源   */
    156              dma_gpio_input_init(SADDR,BYTEs);
   \   000001AE   0x4659             MOV      R1,R11
   \   000001B0   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001B2   0x0030             MOVS     R0,R6
   \   000001B4   0x.... 0x....      BL       dma_gpio_input_init
    157          
    158              DMA_DIS(CHn);                                    //使能通道CHn 硬件请求
   \   000001B8   0x....             LDR.N    R0,??DataTable0_11  ;; 0x4000800c
   \   000001BA   0x6800             LDR      R0,[R0, #+0]
   \   000001BC   0x2101             MOVS     R1,#+1
   \   000001BE   0x40A9             LSLS     R1,R1,R5
   \   000001C0   0x4388             BICS     R0,R0,R1
   \   000001C2   0x....             LDR.N    R1,??DataTable0_11  ;; 0x4000800c
   \   000001C4   0x6008             STR      R0,[R1, #+0]
    159              DMA_IRQ_CLEAN(CHn);
   \   000001C6   0x....             LDR.N    R0,??DataTable0_12  ;; 0x40008024
   \   000001C8   0x6800             LDR      R0,[R0, #+0]
   \   000001CA   0x2101             MOVS     R1,#+1
   \   000001CC   0x40A9             LSLS     R1,R1,R5
   \   000001CE   0x4308             ORRS     R0,R1,R0
   \   000001D0   0x....             LDR.N    R1,??DataTable0_12  ;; 0x40008024
   \   000001D2   0x6008             STR      R0,[R1, #+0]
    160          
    161              /* 开启中断 */
    162              //DMA_EN(CHn);                                    //使能通道CHn 硬件请求
    163              //DMA_IRQ_EN(CHn);                                //允许DMA通道传输
    164          }
   \   000001D4   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x400FF010         DC32     0x400ff010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x400FF113         DC32     0x400ff113

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0x400FF112         DC32     0x400ff112

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x400FF110         DC32     0x400ff110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_5:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_6:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_7:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_8:
   \   00000000   0x40008000         DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_9:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_10:
   \   00000000   0x00010100         DC32     0x10100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_11:
   \   00000000   0x4000800C         DC32     0x4000800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_12:
   \   00000000   0x40008024         DC32     0x40008024

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 43H, 68H, 69H, 70H, 5CH, 73H
   \              0x43 0x68    
   \              0x69 0x70    
   \              0x5C 0x73    
   \   00000030   0x72 0x63          DC8 72H, 63H, 5CH, 4DH, 4BH, 36H, 30H, 5FH
   \              0x5C 0x4D    
   \              0x4B 0x36    
   \              0x30 0x5F    
   \   00000038   0x64 0x6D          DC8 64H, 6DH, 61H, 2EH, 63H, 0
   \              0x61 0x2E    
   \              0x63 0x00    
   \   0000003E   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   dma_gpio_input_init
        32   -> gpio_init
        32   -> port_init
      40   dma_portx2buff_init
        40   -> assert_failed
        40   -> dma_gpio_input_init
        40   -> port_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_10
       4  ??DataTable0_11
       4  ??DataTable0_12
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
       4  ??DataTable0_9
      64  ?_0
      92  dma_gpio_input_init
     472  dma_portx2buff_init

 
  64 bytes in section .rodata
 616 bytes in section .text
 
 616 bytes of CODE  memory
  64 bytes of CONST memory

Errors: none
Warnings: 7
