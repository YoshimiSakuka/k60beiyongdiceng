###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:24
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\misc.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\misc.c -D DEBUG -D
#        ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\misc.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\misc.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\misc.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       misc.c
     11           * @brief      山外K60 平台其他需要用到的函数的实现
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-06-26
     15           */
     16          
     17          #include "common.h"
     18          #include "MK60_uart.h"
     19          
     20          
     21          /*!
     22           *  @brief      设置中断向量表地址
     23           *  @param      vtor    新的中断向量表地址
     24           *  @since      v5.0
     25           *  @author     飞思卡尔公司
     26           *  Sample usage:       write_vtor ((uint32)__VECTOR_RAM);  //新的中断向量地址
     27           */

   \                                 In section .text, align 2, keep-with-next
     28          void write_vtor (int vtor)
     29          {
   \                     write_vtor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     30              ASSERT(vtor % 0x200 == 0);   //Vector Table base offset field. This value must be a multiple of 0x200.
   \   00000004   0xF44F 0x7000      MOV      R0,#+512
   \   00000008   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \   0000000C   0xFB01 0x4110      MLS      R1,R1,R0,R4
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD003             BEQ.N    ??write_vtor_0
   \   00000014   0x211E             MOVS     R1,#+30
   \   00000016   0x....             LDR.N    R0,??DataTable1
   \   00000018   0x.... 0x....      BL       assert_failed
     31          
     32              /* Write the VTOR with the new value */
     33              SCB->VTOR = vtor;
   \                     ??write_vtor_0: (+1)
   \   0000001C   0x....             LDR.N    R0,??DataTable1_1  ;; 0xe000ed08
   \   0000001E   0x6004             STR      R4,[R0, #+0]
     34          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
     35          
     36          
     37          
     38          /*!
     39           *  @brief      设置中断向量表里的中断服务函数
     40           *  @since      v5.0
     41           *  @warning    只有中断向量表位于icf指定的RAM区域时，此函数才有效
     42           *  Sample usage:       set_vector_handler(UART3_RX_TX_VECTORn , uart3_handler);    //把 uart3_handler 函数添加到中断向量表
     43           */

   \                                 In section .text, align 2, keep-with-next
     44          void set_vector_handler(VECTORn_t vector , void pfunc_handler(void))
     45          {
   \                     set_vector_handler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     46              extern uint32 __VECTOR_RAM[];
     47          
     48              ASSERT(SCB->VTOR == (uint32)__VECTOR_RAM);  //断言，检测中断向量表是否在 RAM 里
   \   00000006   0x....             LDR.N    R0,??DataTable1_1  ;; 0xe000ed08
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x....             LDR.N    R1,??DataTable1_2
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD003             BEQ.N    ??set_vector_handler_0
   \   00000010   0x2130             MOVS     R1,#+48
   \   00000012   0x....             LDR.N    R0,??DataTable1
   \   00000014   0x.... 0x....      BL       assert_failed
     49          
     50              __VECTOR_RAM[vector] = (uint32)pfunc_handler;
   \                     ??set_vector_handler_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable1_2
   \   0000001A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001C   0xF840 0x5024      STR      R5,[R0, R4, LSL #+2]
     51          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     52          

   \                                 In section .text, align 2, keep-with-next
     53          void vcan_cpy( uint8 *dst, uint8 *src, uint32 count)
     54          {
   \                     vcan_cpy: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     55              uint32 n;
     56              if(count != 0)
   \   00000002   0x2A00             CMP      R2,#+0
   \   00000004   0xD038             BEQ.N    ??vcan_cpy_0
     57              {
     58                  //printf("-");
     59          
     60                  n = (count + 7 ) / 8 ;
   \   00000006   0x1DD4             ADDS     R4,R2,#+7
   \   00000008   0x08E4             LSRS     R4,R4,#+3
   \   0000000A   0x0023             MOVS     R3,R4
     61                  switch (count % 8 )
   \   0000000C   0x2408             MOVS     R4,#+8
   \   0000000E   0xFBB2 0xF5F4      UDIV     R5,R2,R4
   \   00000012   0xFB05 0x2514      MLS      R5,R5,R4,R2
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD00B             BEQ.N    ??vcan_cpy_1
   \   0000001A   0x2D02             CMP      R5,#+2
   \   0000001C   0xD021             BEQ.N    ??vcan_cpy_2
   \   0000001E   0xD324             BCC.N    ??vcan_cpy_3
   \   00000020   0x2D04             CMP      R5,#+4
   \   00000022   0xD016             BEQ.N    ??vcan_cpy_4
   \   00000024   0xD319             BCC.N    ??vcan_cpy_5
   \   00000026   0x2D06             CMP      R5,#+6
   \   00000028   0xD00B             BEQ.N    ??vcan_cpy_6
   \   0000002A   0xD30E             BCC.N    ??vcan_cpy_7
   \   0000002C   0x2D07             CMP      R5,#+7
   \   0000002E   0xD004             BEQ.N    ??vcan_cpy_8
   \   00000030   0xE022             B.N      ??vcan_cpy_0
     62                  {
     63                      do
     64                      {
     65                      case 0 :
     66                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_1: (+1)
   \   00000032   0x780C             LDRB     R4,[R1, #+0]
   \   00000034   0x7004             STRB     R4,[R0, #+0]
   \   00000036   0x1C49             ADDS     R1,R1,#+1
   \   00000038   0x1C40             ADDS     R0,R0,#+1
     67                      case 7 :
     68                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_8: (+1)
   \   0000003A   0x780C             LDRB     R4,[R1, #+0]
   \   0000003C   0x7004             STRB     R4,[R0, #+0]
   \   0000003E   0x1C49             ADDS     R1,R1,#+1
   \   00000040   0x1C40             ADDS     R0,R0,#+1
     69                      case 6 :
     70                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_6: (+1)
   \   00000042   0x780C             LDRB     R4,[R1, #+0]
   \   00000044   0x7004             STRB     R4,[R0, #+0]
   \   00000046   0x1C49             ADDS     R1,R1,#+1
   \   00000048   0x1C40             ADDS     R0,R0,#+1
     71                      case 5 :
     72                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_7: (+1)
   \   0000004A   0x780C             LDRB     R4,[R1, #+0]
   \   0000004C   0x7004             STRB     R4,[R0, #+0]
   \   0000004E   0x1C49             ADDS     R1,R1,#+1
   \   00000050   0x1C40             ADDS     R0,R0,#+1
     73                      case 4 :
     74                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_4: (+1)
   \   00000052   0x780C             LDRB     R4,[R1, #+0]
   \   00000054   0x7004             STRB     R4,[R0, #+0]
   \   00000056   0x1C49             ADDS     R1,R1,#+1
   \   00000058   0x1C40             ADDS     R0,R0,#+1
     75                      case 3 :
     76                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_5: (+1)
   \   0000005A   0x780C             LDRB     R4,[R1, #+0]
   \   0000005C   0x7004             STRB     R4,[R0, #+0]
   \   0000005E   0x1C49             ADDS     R1,R1,#+1
   \   00000060   0x1C40             ADDS     R0,R0,#+1
     77                      case 2 :
     78                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_2: (+1)
   \   00000062   0x780C             LDRB     R4,[R1, #+0]
   \   00000064   0x7004             STRB     R4,[R0, #+0]
   \   00000066   0x1C49             ADDS     R1,R1,#+1
   \   00000068   0x1C40             ADDS     R0,R0,#+1
     79                      case 1 :
     80                          * dst ++ = * src ++ ;
   \                     ??vcan_cpy_3: (+1)
   \   0000006A   0x780C             LDRB     R4,[R1, #+0]
   \   0000006C   0x7004             STRB     R4,[R0, #+0]
   \   0000006E   0x1C49             ADDS     R1,R1,#+1
   \   00000070   0x1C40             ADDS     R0,R0,#+1
     81                      }
     82                      while ( -- n >    0 );
   \   00000072   0x1E5B             SUBS     R3,R3,#+1
   \   00000074   0x2B00             CMP      R3,#+0
   \   00000076   0xD1DC             BNE.N    ??vcan_cpy_1
     83                  }
     84              }
     85          }
   \                     ??vcan_cpy_0: (+1)
   \   00000078   0xBC30             POP      {R4,R5}
   \   0000007A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     __VECTOR_RAM

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 43H, 68H, 69H, 70H, 5CH, 73H
   \              0x43 0x68    
   \              0x69 0x70    
   \              0x5C 0x73    
   \   00000030   0x72 0x63          DC8 72H, 63H, 5CH, 6DH, 69H, 73H, 63H, 2EH
   \              0x5C 0x6D    
   \              0x69 0x73    
   \              0x63 0x2E    
   \   00000038   0x63 0x00          DC8 63H, 0
   \   0000003A   0x00 0x00          DC8 0, 0
     86          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   set_vector_handler
        16   -> assert_failed
       8   vcan_cpy
       8   write_vtor
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      60  ?_0
      34  set_vector_handler
     124  vcan_cpy
      34  write_vtor

 
  60 bytes in section .rodata
 204 bytes in section .text
 
 204 bytes of CODE  memory
  60 bytes of CONST memory

Errors: none
Warnings: none
