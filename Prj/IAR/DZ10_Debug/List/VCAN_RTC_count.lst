###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_RTC_count.C
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_RTC_count.C
#        -D DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\VCAN_RTC_count.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\VCAN_RTC_count.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_RTC_count.C
      1           /*!
      2            *     COPYRIGHT NOTICE
      3            *     Copyright (c) 2013,山外科技
      4            *     All rights reserved.
      5            *     技术讨论：山外论坛 http://www.vcan123.com
      6            *
      7            *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8            *     修改内容时必须保留山外科技的版权声明。
      9            *
     10            * @file       VCAN_RTC_count.c
     11            * @brief      rtc数据计算函数实现(以1970-01-01 为基准，到2099-12-31)
     12            * @author     山外科技
     13            * @version    v5.1
     14            * @date       2014-01-12
     15            */
     16          
     17          
     18          /*
     19           * 包含头文件
     20           */
     21          #include "common.h"
     22          #include "VCAN_RTC_count.h"
     23          
     24          
     25          

   \                                 In section .rodata, align 4
     26          const uint8     mon_t[12]   ={ 31,28,31,30,31,30,31,31,30,31,30,31};                //平年的月份
   \                     mon_t:
   \   00000000   0x1F 0x1C          DC8 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   \              0x1F 0x1E    
   \              0x1F 0x1E    
   \              0x1F 0x1F    
   \              0x1E 0x1F    
   \              0x1E 0x1F    

   \                                 In section .rodata, align 4
     27          const uint8     mon2_t[12]  ={ 31,29,31,30,31,30,31,31,30,31,30,31};
   \                     mon2_t:
   \   00000000   0x1F 0x1D          DC8 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   \              0x1F 0x1E    
   \              0x1F 0x1E    
   \              0x1F 0x1F    
   \              0x1E 0x1F    
   \              0x1E 0x1F    
     28          

   \                                 In section .rodata, align 4
     29          const uint16    momoff_t[]  ={ 0,31,59,90,120,151,181,212,243,273,304,334,365 };    //平年的每月1日的累加天数
   \                     momoff_t:
   \   00000000   0x0000 0x001F      DC16 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365
   \              0x003B 0x005A
   \              0x0078 0x0097
   \              0x00B5 0x00D4
   \              0x00F3 0x0111
   \              0x0130 0x014E
   \              0x016D       
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
     30          const uint16    momoff2_t[] ={ 0,31,60,91,121,152,182,213,244,274,305,335,366 };    //闰年的每月1日的累加天数
   \                     momoff2_t:
   \   00000000   0x0000 0x001F      DC16 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366
   \              0x003C 0x005B
   \              0x0079 0x0098
   \              0x00B6 0x00D5
   \              0x00F4 0x0112
   \              0x0131 0x014F
   \              0x016E       
   \   0000001A   0x00 0x00          DC8 0, 0
     31          
     32          
     33          /*!
     34           *  @brief      检测是否为闰年
     35           *  @param      year    年份
     36           *  @return     是否为闰年(0表示平年，1表示闰年)
     37           *  @since      v5.0
     38           *  Sample usage:       if( Is_LeapYear(2013) )         //检测 2013 是否为闰年
     39                                  {
     40                                      printf("\n闰年!");          //
     41                                  }else
     42                                  {
     43                                      printf("\n不是闰年！");
     44                                  }
     45           */

   \                                 In section .text, align 2, keep-with-next
     46          uint8 Is_LeapYear(uint32 year)
     47          {
   \                     Is_LeapYear: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     48              if(year%4 == 0)
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   00000008   0xFB02 0x1210      MLS      R2,R2,R0,R1
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD110             BNE.N    ??Is_LeapYear_0
     49              {
     50                  if((year%100 != 0) || (year%400 == 0))
   \   00000010   0x2064             MOVS     R0,#+100
   \   00000012   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   00000016   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD107             BNE.N    ??Is_LeapYear_1
   \   0000001E   0xF44F 0x70C8      MOV      R0,#+400
   \   00000022   0xFBB1 0xF2F0      UDIV     R2,R1,R0
   \   00000026   0xFB00 0x1012      MLS      R0,R0,R2,R1
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD101             BNE.N    ??Is_LeapYear_0
     51                  {
     52                      //闰年
     53                      return 1;
   \                     ??Is_LeapYear_1: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??Is_LeapYear_2
     54                  }
     55              }
     56          
     57              //不是闰年
     58              return 0;
   \                     ??Is_LeapYear_0: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??Is_LeapYear_2: (+1)
   \   00000034   0x4770             BX       LR               ;; return
     59          }
     60          
     61          /*!
     62           *  @brief      求年份的天数
     63           *  @param      year    年份
     64           *  @return     指定年份的天数
     65           *  @since      v5.0
     66           *  Sample usage:       uint32 days = year2day(2013);
     67                                  printf("2013年共%d天!",days);
     68           */

   \                                 In section .text, align 2, keep-with-next
     69          uint32 year2day(uint32 year)
     70          {
   \                     year2day: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     71              return (365 + Is_LeapYear(year));
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       Is_LeapYear
   \   0000000A   0xF200 0x106D      ADDW     R0,R0,#+365
   \   0000000E   0xBD10             POP      {R4,PC}          ;; return
     72          }
     73          
     74          /*!
     75           *  @brief      从1970-01-01 0:0:0 至 指定时间的年月日时分秒格式转为总秒数
     76           *  @param      time    时间结构体
     77           *  @return     从1970-01-01 0:0:0 至 指定时间的总秒数
     78           *  @since      v5.0
     79           *  Sample usage:       time_s time = {2013,9,1,0,0,0};  //时间为 2013-09-01 0:0:0
     80                                  printf("共%d秒!",time2sec(time));
     81           */

   \                                 In section .text, align 2, keep-with-next
     82          uint32 time2sec(time_s time)
     83          {
   \                     time2sec: (+1)
   \   00000000   0xB503             PUSH     {R0,R1,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     84              //参考 linux内核代码 include/linux/time.h 里的函数 mktime()
     85              //根据高斯算法将以year/mon/day/hour/min/sec（如1980－12－31 23：59：59）
     86              //格式表示的时间转换为相对于1970－01－01 00：00：00
     87              //这个UNIX时间基准以来的相对秒数
     88          
     89              //注意一点，闰年的二月份是29天，非闰年则为28天
     90              //四年一闰，百年不闰，四百年再闰
     91          
     92              //检测时间是否有效
     93              ASSERT(time.year >= 1970);     //断言，以 1970 为基准，年份最小为 1970
   \   00000004   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000008   0xF240 0x71B2      MOVW     R1,#+1970
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xDA03             BGE.N    ??time2sec_0
   \   00000010   0x215D             MOVS     R1,#+93
   \   00000012   0x....             LDR.N    R0,??DataTable1
   \   00000014   0x.... 0x....      BL       assert_failed
     94              ASSERT(time.year < 2100);      //断言，32位的秒计数器可保存136年的时间，我们此处限定最大年份为2099，实际上是可计时到 2105年12月31日
   \                     ??time2sec_0: (+1)
   \   00000018   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000001C   0xF640 0x0134      MOVW     R1,#+2100
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xDB03             BLT.N    ??time2sec_1
   \   00000024   0x215E             MOVS     R1,#+94
   \   00000026   0x....             LDR.N    R0,??DataTable1
   \   00000028   0x.... 0x....      BL       assert_failed
     95              ASSERT(time.mon  <= 12);       //断言，月份最多为12月
   \                     ??time2sec_1: (+1)
   \   0000002C   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000030   0x280D             CMP      R0,#+13
   \   00000032   0xDB03             BLT.N    ??time2sec_2
   \   00000034   0x215F             MOVS     R1,#+95
   \   00000036   0x....             LDR.N    R0,??DataTable1
   \   00000038   0x.... 0x....      BL       assert_failed
     96              ASSERT(     ((Is_LeapYear(time.year) == 0) &&                    (time.day <= mon_t[time.mon-1])) //平年
     97                     ||   ((Is_LeapYear(time.year) == 1) && (time.mon != 2) && (time.day <= mon_t[time.mon-1]))               //闰年的非2月
     98                     ||   ((Is_LeapYear(time.year) == 1) && (time.mon == 2) && (time.day <= 29))
     99                     );
   \                     ??time2sec_2: (+1)
   \   0000003C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000040   0x.... 0x....      BL       Is_LeapYear
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD109             BNE.N    ??time2sec_3
   \   00000048   0x....             LDR.N    R0,??DataTable1_1
   \   0000004A   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   0000004E   0x1808             ADDS     R0,R1,R0
   \   00000050   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   00000054   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD225             BCS.N    ??time2sec_4
   \                     ??time2sec_3: (+1)
   \   0000005C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000060   0x.... 0x....      BL       Is_LeapYear
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD10D             BNE.N    ??time2sec_5
   \   00000068   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000006C   0x2802             CMP      R0,#+2
   \   0000006E   0xD009             BEQ.N    ??time2sec_5
   \   00000070   0x....             LDR.N    R0,??DataTable1_1
   \   00000072   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   00000076   0x1808             ADDS     R0,R1,R0
   \   00000078   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   0000007C   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xD211             BCS.N    ??time2sec_4
   \                     ??time2sec_5: (+1)
   \   00000084   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000088   0x.... 0x....      BL       Is_LeapYear
   \   0000008C   0x2801             CMP      R0,#+1
   \   0000008E   0xD107             BNE.N    ??time2sec_6
   \   00000090   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000094   0x2802             CMP      R0,#+2
   \   00000096   0xD103             BNE.N    ??time2sec_6
   \   00000098   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   0000009C   0x281E             CMP      R0,#+30
   \   0000009E   0xDB03             BLT.N    ??time2sec_4
   \                     ??time2sec_6: (+1)
   \   000000A0   0x2163             MOVS     R1,#+99
   \   000000A2   0x....             LDR.N    R0,??DataTable1
   \   000000A4   0x.... 0x....      BL       assert_failed
    100          
    101          
    102                         //ASSERT((time.mon != 2) || ((time.mon == 2) && (time.day  <= 29)));   //二月份天数不超过 29天。
    103              //ASSERT((time.mon == 2) && (time.year%4 ！= 0)); //年份非4的倍数，则是普通年份
    104          
    105          
    106              if (0 >= (int8) (time.mon -= 2)) /* 1..12 -> 11,12,1..10 */
   \                     ??time2sec_4: (+1)
   \   000000A8   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000AC   0x1E80             SUBS     R0,R0,#+2
   \   000000AE   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   000000B2   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD109             BNE.N    ??time2sec_7
    107              {
    108                  time.mon += 12; /* Puts Feb last since it has leap day */
   \   000000BA   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   000000BE   0x300C             ADDS     R0,R0,#+12
   \   000000C0   0xF88D 0x0006      STRB     R0,[SP, #+6]
    109                  time.year -= 1;
   \   000000C4   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000C8   0x1E40             SUBS     R0,R0,#+1
   \   000000CA   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    110              }
    111          
    112              return (((
    113                      (uint32) (time.year/4 - time.year/100 + time.year/400 + 367*(time.mon)/12 + time.day) + time.year*365 - 719499 /* 现有的总日数 */
    114                      )*24 + time.hour /* 现有的总小时数 */
    115                      )*60 + time.min  /* 现有的总分钟数 */
    116                      )*60 + time.sec; /* 最终的总秒数   */
   \                     ??time2sec_7: (+1)
   \   000000CE   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000D2   0x2104             MOVS     R1,#+4
   \   000000D4   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000D8   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000DC   0x2264             MOVS     R2,#+100
   \   000000DE   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000000E2   0x1A40             SUBS     R0,R0,R1
   \   000000E4   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   000000E8   0xF44F 0x72C8      MOV      R2,#+400
   \   000000EC   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000000F0   0x1808             ADDS     R0,R1,R0
   \   000000F2   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   000000F6   0xF240 0x126F      MOVW     R2,#+367
   \   000000FA   0x4351             MULS     R1,R2,R1
   \   000000FC   0x220C             MOVS     R2,#+12
   \   000000FE   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000102   0x1808             ADDS     R0,R1,R0
   \   00000104   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   00000108   0xFA50 0xF081      UXTAB    R0,R0,R1
   \   0000010C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000110   0xF240 0x126D      MOVW     R2,#+365
   \   00000114   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000118   0x....             LDR.N    R1,??DataTable1_2  ;; 0xfff50575
   \   0000011A   0x1808             ADDS     R0,R1,R0
   \   0000011C   0x2118             MOVS     R1,#+24
   \   0000011E   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00000122   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000126   0x213C             MOVS     R1,#+60
   \   00000128   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   0000012C   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000130   0x213C             MOVS     R1,#+60
   \   00000132   0xF89D 0x200A      LDRB     R2,[SP, #+10]
   \   00000136   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000013A   0xBD0E             POP      {R1-R3,PC}       ;; return
    117          }
    118          
    119          /*!
    120           *  @brief      以1970-01-01 为基准的总秒数 转为年月日时分秒格式
    121           *  @param      sec     总秒数
    122           *  @param      time    时间结构体
    123           *  @since      v5.0
    124           *  Sample usage:       time_s time;
    125                                  sec2time(1000,&time);   //求1000秒对应的时间
    126                                  printf("\n时间是：%d-%02d-%02d %02d:%02d:%02d",
    127                                                          time.year,time.mon,time.day,
    128                                                          time.hour,time.min,time.sec);
    129           */

   \                                 In section .text, align 2, keep-with-next
    130          void sec2time(uint32 sec, time_s * time)
    131          {
   \                     sec2time: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4682             MOV      R10,R0
   \   00000006   0x000C             MOVS     R4,R1
    132          #define DAYSEC  (60*60*24)      //定义每天的总秒数
    133              //uint32 i;
    134              uint32  hms                //一天剩下的秒数
    135                      ,day                //秒数共有的天数
    136                      ,tmp;
    137          
    138              uint16 const* dayoff ;
    139              uint8  const* monoff;
    140          
    141              if(sec > 0xf48656ff)    //时间超过 2099-12-31 23:59:59后，会从 1970-1-1 0:0:0 开始计时
   \   00000008   0x....             LDR.N    R0,??DataTable1_3  ;; 0xf4865700
   \   0000000A   0x4582             CMP      R10,R0
   \   0000000C   0xD302             BCC.N    ??sec2time_0
    142              {
    143                  sec -= 0xf48656ff;
   \   0000000E   0x....             LDR.N    R0,??DataTable1_4  ;; 0xb79a901
   \   00000010   0xEB10 0x0A0A      ADDS     R10,R0,R10
    144              }
    145          
    146              day = sec / DAYSEC;
   \                     ??sec2time_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable1_5  ;; 0x15180
   \   00000016   0xFBBA 0xF0F0      UDIV     R0,R10,R0
   \   0000001A   0x0006             MOVS     R6,R0
    147              hms = sec % DAYSEC;
   \   0000001C   0x....             LDR.N    R0,??DataTable1_5  ;; 0x15180
   \   0000001E   0xFBBA 0xF1F0      UDIV     R1,R10,R0
   \   00000022   0xFB00 0xA011      MLS      R0,R0,R1,R10
   \   00000026   0x0005             MOVS     R5,R0
    148          
    149              //先求时分秒
    150              time->hour = (uint8) (hms / (60*60));         //时
   \   00000028   0xF44F 0x6061      MOV      R0,#+3600
   \   0000002C   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000030   0x7120             STRB     R0,[R4, #+4]
    151              hms = hms % (60*60);
   \   00000032   0xF44F 0x6061      MOV      R0,#+3600
   \   00000036   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   0000003A   0xFB00 0x5511      MLS      R5,R0,R1,R5
    152              time->min = (uint8) (hms / 60);  //分
   \   0000003E   0x203C             MOVS     R0,#+60
   \   00000040   0xFBB5 0xF0F0      UDIV     R0,R5,R0
   \   00000044   0x7160             STRB     R0,[R4, #+5]
    153              time->sec = (uint8) (hms % 60);   //秒
   \   00000046   0x203C             MOVS     R0,#+60
   \   00000048   0xFBB5 0xF1F0      UDIV     R1,R5,R0
   \   0000004C   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000050   0x71A0             STRB     R0,[R4, #+6]
    154          
    155              /*算出当前年份，起始的计数年份为1970年*/
    156              time->year  =  (uint16)(day/366 );          //粗略求出 年份(还没加 1970)
   \   00000052   0xF44F 0x70B7      MOV      R0,#+366
   \   00000056   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   0000005A   0x8020             STRH     R0,[R4, #+0]
    157          
    158              day = day
    159                      -  365*(time->year)    //天数
    160                      - ((time->year +1)/4)  //4年一闰年
    161                      //+ (time->year/(2101-1970) )      //2100不是闰年，由于最大年份是 2099，不考虑2100，因而此处注释
    162                      ;
   \   0000005C   0x8820             LDRH     R0,[R4, #+0]
   \   0000005E   0xF240 0x116D      MOVW     R1,#+365
   \   00000062   0xFB01 0x6010      MLS      R0,R1,R0,R6
   \   00000066   0x8821             LDRH     R1,[R4, #+0]
   \   00000068   0x1C49             ADDS     R1,R1,#+1
   \   0000006A   0x2204             MOVS     R2,#+4
   \   0000006C   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000070   0x1A46             SUBS     R6,R0,R1
    163          
    164              time->year += 1970;
   \   00000072   0x8820             LDRH     R0,[R4, #+0]
   \   00000074   0xF200 0x70B2      ADDW     R0,R0,#+1970
   \   00000078   0x8020             STRH     R0,[R4, #+0]
    165              tmp = 365 + Is_LeapYear(time->year);        //指定年份的 天数
   \   0000007A   0x8820             LDRH     R0,[R4, #+0]
   \   0000007C   0x.... 0x....      BL       Is_LeapYear
   \   00000080   0xF200 0x106D      ADDW     R0,R0,#+365
   \   00000084   0x0007             MOVS     R7,R0
    166              if(day >= tmp)
   \   00000086   0x42BE             CMP      R6,R7
   \   00000088   0xD303             BCC.N    ??sec2time_1
    167              {
    168                  time->year++;
   \   0000008A   0x8820             LDRH     R0,[R4, #+0]
   \   0000008C   0x1C40             ADDS     R0,R0,#+1
   \   0000008E   0x8020             STRH     R0,[R4, #+0]
    169                  day -=  tmp;
   \   00000090   0x1BF6             SUBS     R6,R6,R7
    170              }
    171          
    172              time->mon = (uint8)(day/31 +1);                 //粗略算月份，可能需要加1
   \                     ??sec2time_1: (+1)
   \   00000092   0x201F             MOVS     R0,#+31
   \   00000094   0xFBB6 0xF0F0      UDIV     R0,R6,R0
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \   0000009A   0x70A0             STRB     R0,[R4, #+2]
    173          
    174              tmp = Is_LeapYear(time->year);
   \   0000009C   0x8820             LDRH     R0,[R4, #+0]
   \   0000009E   0x.... 0x....      BL       Is_LeapYear
   \   000000A2   0x0007             MOVS     R7,R0
    175              dayoff  = tmp ? momoff2_t : momoff_t;
   \   000000A4   0x2F00             CMP      R7,#+0
   \   000000A6   0xD002             BEQ.N    ??sec2time_2
   \   000000A8   0x.... 0x....      LDR.W    R8,??DataTable1_6
   \   000000AC   0xE001             B.N      ??sec2time_3
   \                     ??sec2time_2: (+1)
   \   000000AE   0x.... 0x....      LDR.W    R8,??DataTable1_7
    176              monoff  = tmp ? mon2_t : mon_t;
   \                     ??sec2time_3: (+1)
   \   000000B2   0x2F00             CMP      R7,#+0
   \   000000B4   0xD002             BEQ.N    ??sec2time_4
   \   000000B6   0x.... 0x....      LDR.W    R9,??DataTable1_8
   \   000000BA   0xE001             B.N      ??sec2time_5
   \                     ??sec2time_4: (+1)
   \   000000BC   0x.... 0x....      LDR.W    R9,??DataTable1_1
    177          
    178              time->day = (uint8)(day +1 - dayoff[time->mon -1]);
   \                     ??sec2time_5: (+1)
   \   000000C0   0x1C70             ADDS     R0,R6,#+1
   \   000000C2   0x78A1             LDRB     R1,[R4, #+2]
   \   000000C4   0xEB18 0x0141      ADDS     R1,R8,R1, LSL #+1
   \   000000C8   0xF831 0x1C02      LDRH     R1,[R1, #-2]
   \   000000CC   0x1A40             SUBS     R0,R0,R1
   \   000000CE   0x70E0             STRB     R0,[R4, #+3]
    179          
    180              if(time->day > monoff[time->mon-1 ] )
   \   000000D0   0x78A0             LDRB     R0,[R4, #+2]
   \   000000D2   0xEB10 0x0009      ADDS     R0,R0,R9
   \   000000D6   0xF810 0x0C01      LDRB     R0,[R0, #-1]
   \   000000DA   0x78E1             LDRB     R1,[R4, #+3]
   \   000000DC   0x4288             CMP      R0,R1
   \   000000DE   0xD20A             BCS.N    ??sec2time_6
    181              {
    182                  time->mon++;
   \   000000E0   0x78A0             LDRB     R0,[R4, #+2]
   \   000000E2   0x1C40             ADDS     R0,R0,#+1
   \   000000E4   0x70A0             STRB     R0,[R4, #+2]
    183                  time->day = (uint8)(day +1 - dayoff[time->mon -1]);
   \   000000E6   0x1C70             ADDS     R0,R6,#+1
   \   000000E8   0x78A1             LDRB     R1,[R4, #+2]
   \   000000EA   0xEB18 0x0141      ADDS     R1,R8,R1, LSL #+1
   \   000000EE   0xF831 0x1C02      LDRH     R1,[R1, #-2]
   \   000000F2   0x1A40             SUBS     R0,R0,R1
   \   000000F4   0x70E0             STRB     R0,[R4, #+3]
    184              }
    185          }
   \                     ??sec2time_6: (+1)
   \   000000F6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     mon_t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xFFF50575         DC32     0xfff50575

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xF4865700         DC32     0xf4865700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x0B79A901         DC32     0xb79a901

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x........         DC32     momoff2_t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x........         DC32     momoff_t

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x........         DC32     mon2_t

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 42H, 6FH, 61H, 72H, 64H, 5CH
   \              0x42 0x6F    
   \              0x61 0x72    
   \              0x64 0x5C    
   \   00000030   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 56H, 43H, 41H, 4EH
   \              0x63 0x5C    
   \              0x56 0x43    
   \              0x41 0x4E    
   \   00000038   0x5F 0x52          DC8 5FH, 52H, 54H, 43H, 5FH, 63H, 6FH, 75H
   \              0x54 0x43    
   \              0x5F 0x63    
   \              0x6F 0x75    
   \   00000040   0x6E 0x74          DC8 6EH, 74H, 2EH, 43H, 0
   \              0x2E 0x43    
   \              0x00         
   \   00000045   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Is_LeapYear
      32   sec2time
        32   -> Is_LeapYear
      16   time2sec
        16   -> Is_LeapYear
        16   -> assert_failed
       8   year2day
         8   -> Is_LeapYear


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
      72  ?_0
      54  Is_LeapYear
      28  momoff2_t
      28  momoff_t
      12  mon2_t
      12  mon_t
     250  sec2time
     316  time2sec
      16  year2day

 
 152 bytes in section .rodata
 672 bytes in section .text
 
 672 bytes of CODE  memory
 152 bytes of CONST memory

Errors: none
Warnings: none
