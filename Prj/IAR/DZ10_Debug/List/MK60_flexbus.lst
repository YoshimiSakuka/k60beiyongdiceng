###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:27
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_flexbus.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_flexbus.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_flexbus.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_flexbus.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_flexbus.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_flexbus.c
     11           * @brief      flexbus函数库
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-09-02
     15           */
     16          
     17          #include "common.h"
     18          #include "MK60_flexbus.h"
     19          
     20          
     21          /*!
     22           *  @brief      flexbus初始化为8080协议
     23           *  @since      v5.0
     24           */

   \                                 In section .text, align 4, keep-with-next
     25          void flexbus_8080_init()
     26          {
   \                     flexbus_8080_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     27              //flexbus 本身不直接支持 8080协议，而是支持 6800协议
     28              //我们可以配置 cmd 与 data 数据的地址不同，从而通过地址线来区分命令和数据
     29          
     30              SIM_SOPT2 |= SIM_SOPT2_FBSL(3);             //FlexBus安全水平:允许指令和数据访问
   \   00000002   0x483E             LDR.N    R0,??flexbus_8080_init_0  ;; 0x40048004
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x7040      ORRS     R0,R0,#0x300
   \   0000000A   0x493C             LDR.N    R1,??flexbus_8080_init_0  ;; 0x40048004
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     31              SIM_SCGC7 |= SIM_SCGC7_FLEXBUS_MASK;        //使能时钟
   \   0000000E   0x483C             LDR.N    R0,??flexbus_8080_init_0+0x4  ;; 0x40048040
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000016   0x493A             LDR.N    R1,??flexbus_8080_init_0+0x4  ;; 0x40048040
   \   00000018   0x6008             STR      R0,[R1, #+0]
     32          
     33              //配置数据管脚复用
     34              port_init(PTD6  , ALT5 | HDS);              //PTD6 复用为 fb_ad[0] ,配置为 输出高驱动能力
   \   0000001A   0xF44F 0x61A8      MOV      R1,#+1344
   \   0000001E   0x2066             MOVS     R0,#+102
   \   00000020   0x.... 0x....      BL       port_init
     35              port_init(PTD5  , ALT5 | HDS);              //PTD5 复用为 fb_ad[1] ,配置为 输出高驱动能力
   \   00000024   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000028   0x2065             MOVS     R0,#+101
   \   0000002A   0x.... 0x....      BL       port_init
     36              port_init(PTD4  , ALT5 | HDS);              //PTD4 复用为 fb_ad[2] ,配置为 输出高驱动能力
   \   0000002E   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000032   0x2064             MOVS     R0,#+100
   \   00000034   0x.... 0x....      BL       port_init
     37              port_init(PTD3  , ALT5 | HDS);              //PTD3 复用为 fb_ad[3] ,配置为 输出高驱动能力
   \   00000038   0xF44F 0x61A8      MOV      R1,#+1344
   \   0000003C   0x2063             MOVS     R0,#+99
   \   0000003E   0x.... 0x....      BL       port_init
     38              port_init(PTD2  , ALT5 | HDS);              //PTD2 复用为 fb_ad[4] ,配置为 输出高驱动能力
   \   00000042   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000046   0x2062             MOVS     R0,#+98
   \   00000048   0x.... 0x....      BL       port_init
     39              port_init(PTC10 , ALT5 | HDS);              //PTC10复用为 fb_ad[5] ,配置为 输出高驱动能力
   \   0000004C   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000050   0x204A             MOVS     R0,#+74
   \   00000052   0x.... 0x....      BL       port_init
     40              port_init(PTC9  , ALT5 | HDS);              //PTC9 复用为 fb_ad[6] ,配置为 输出高驱动能力
   \   00000056   0xF44F 0x61A8      MOV      R1,#+1344
   \   0000005A   0x2049             MOVS     R0,#+73
   \   0000005C   0x.... 0x....      BL       port_init
     41              port_init(PTC8  , ALT5 | HDS);              //PTC8 复用为 fb_ad[7] ,配置为 输出高驱动能力
   \   00000060   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000064   0x2048             MOVS     R0,#+72
   \   00000066   0x.... 0x....      BL       port_init
     42              port_init(PTC7  , ALT5 | HDS);              //PTC7 复用为 fb_ad[8] ,配置为 输出高驱动能力
   \   0000006A   0xF44F 0x61A8      MOV      R1,#+1344
   \   0000006E   0x2047             MOVS     R0,#+71
   \   00000070   0x.... 0x....      BL       port_init
     43              port_init(PTC6  , ALT5 | HDS);              //PTC6 复用为 fb_ad[9] ,配置为 输出高驱动能力
   \   00000074   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000078   0x2046             MOVS     R0,#+70
   \   0000007A   0x.... 0x....      BL       port_init
     44              port_init(PTC5  , ALT5 | HDS);              //PTC5 复用为 fb_ad[10],配置为 输出高驱动能力
   \   0000007E   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000082   0x2045             MOVS     R0,#+69
   \   00000084   0x.... 0x....      BL       port_init
     45              port_init(PTC4  , ALT5 | HDS);              //PTC4 复用为 fb_ad[11],配置为 输出高驱动能力
   \   00000088   0xF44F 0x61A8      MOV      R1,#+1344
   \   0000008C   0x2044             MOVS     R0,#+68
   \   0000008E   0x.... 0x....      BL       port_init
     46              port_init(PTC2  , ALT5 | HDS);              //PTC2 复用为 fb_ad[12],配置为 输出高驱动能力
   \   00000092   0xF44F 0x61A8      MOV      R1,#+1344
   \   00000096   0x2042             MOVS     R0,#+66
   \   00000098   0x.... 0x....      BL       port_init
     47              port_init(PTC1  , ALT5 | HDS);              //PTC1 复用为 fb_ad[13],配置为 输出高驱动能力
   \   0000009C   0xF44F 0x61A8      MOV      R1,#+1344
   \   000000A0   0x2041             MOVS     R0,#+65
   \   000000A2   0x.... 0x....      BL       port_init
     48              port_init(PTC0  , ALT5 | HDS);              //PTC0 复用为 fb_ad[14],配置为 输出高驱动能力
   \   000000A6   0xF44F 0x61A8      MOV      R1,#+1344
   \   000000AA   0x2040             MOVS     R0,#+64
   \   000000AC   0x.... 0x....      BL       port_init
     49              port_init(PTB18 , ALT5 | HDS);              //PTB18复用为 fb_ad[15],配置为 输出高驱动能力
   \   000000B0   0xF44F 0x61A8      MOV      R1,#+1344
   \   000000B4   0x2032             MOVS     R0,#+50
   \   000000B6   0x.... 0x....      BL       port_init
     50          
     51              //配置控制管脚复用
     52              //8080总线,即Intel总线,需要四根线控制线：RD写使能, WR读使能, RS数据/指令选择, CS片选
     53              port_init(PTB19 , ALT5 | HDS);              //PTB19复用为 fb_oe_b  ,配置为 输出高驱动能力 , fb_oe_b 时序符合 8080 总线的 RD写使能
   \   000000BA   0xF44F 0x61A8      MOV      R1,#+1344
   \   000000BE   0x2033             MOVS     R0,#+51
   \   000000C0   0x.... 0x....      BL       port_init
     54              port_init(PTD1  , ALT5 | HDS);              //PTD1 复用为 fb_cs0_b ,配置为 输出高驱动能力 , fb_cs0_b时序符合 8080 总线的 CS片选
   \   000000C4   0xF44F 0x61A8      MOV      R1,#+1344
   \   000000C8   0x2061             MOVS     R0,#+97
   \   000000CA   0x.... 0x....      BL       port_init
     55              port_init(PTC11 , ALT5 | HDS);              //PTC11复用为 fb_r/w   ,配置为 输出高驱动能力 , fb_r/w  时序符合 8080 总线的 WR读使能
   \   000000CE   0xF44F 0x61A8      MOV      R1,#+1344
   \   000000D2   0x204B             MOVS     R0,#+75
   \   000000D4   0x.... 0x....      BL       port_init
     56          
     57              //目前还缺 8080 总线的 RS数据/指令选择线
     58              //flexbus可配置成两块地址不连续的块（高16位地址不相同），从而利用地址线来符合 8080 总线的 RS数据/指令选择线
     59              //高16位的地址，FB_BA 我们配置为 0x6000 ，因而可选择的 地址线有 fb_ad[16] ~ fb_ad[28]
     60              //FB_BAM配置为 0x0800 ，即选择 fb_ad[27] 作为 RS 。(0x0800 0000 == 1<<27 )
     61              // RS == 1 时 传输数据，RS == 0 时传输命令
     62              //因而 0x6000 0000 为 命令地址 ， 0x6800 0000 为数据端口
     63              port_init(PTC12 , ALT5 | HDS);              //PTC12复用为 fb_ad[27],配置为 输出高驱动能力 , fb_ad[27]作为8080 总线的 RS数据/指令选择线
   \   000000D8   0xF44F 0x61A8      MOV      R1,#+1344
   \   000000DC   0x204C             MOVS     R0,#+76
   \   000000DE   0x.... 0x....      BL       port_init
     64          
     65              FB_CSAR(0) = FB_CSAR_BA(FB_BA);             // 基地址 Base address
   \   000000E2   0xF05F 0x40C0      MOVS     R0,#+1610612736
   \   000000E6   0x4907             LDR.N    R1,??flexbus_8080_init_0+0x8  ;; 0x4000c000
   \   000000E8   0x6008             STR      R0,[R1, #+0]
     66              FB_CSMR(0) =  ( 0
     67                              | FB_CSMR_BAM(FB_BAM)       // BAM = 0x0800 ,基地地址掩码 为 0x,800 FFFF ,即 片选有效的地址为 基地址 ~ （基地址 + 基地地址掩码） ,0x0800 0000 对应与 FB_AD27
     68                              | FB_CSMR_V_MASK            // 使用片选信号 FB_CS0
     69                            );
   \   000000EA   0x4807             LDR.N    R0,??flexbus_8080_init_0+0xC  ;; 0x8000001
   \   000000EC   0x4907             LDR.N    R1,??flexbus_8080_init_0+0x10  ;; 0x4000c004
   \   000000EE   0x6008             STR      R0,[R1, #+0]
     70              FB_CSCR(0) =    FB_CSCR_BLS_MASK            //右对齐
     71                              | FB_CSCR_PS(2)             //16Byte数据
     72                              | FB_CSCR_AA_MASK           // 自动应答
     73                              ;
   \   000000F0   0xF44F 0x7060      MOV      R0,#+896
   \   000000F4   0x4906             LDR.N    R1,??flexbus_8080_init_0+0x14  ;; 0x4000c008
   \   000000F6   0x6008             STR      R0,[R1, #+0]
     74          
     75          }
   \   000000F8   0xBD01             POP      {R0,PC}          ;; return
   \   000000FA   0xBF00             Nop      
   \                     ??flexbus_8080_init_0:
   \   000000FC   0x40048004         DC32     0x40048004
   \   00000100   0x40048040         DC32     0x40048040
   \   00000104   0x4000C000         DC32     0x4000c000
   \   00000108   0x08000001         DC32     0x8000001
   \   0000010C   0x4000C004         DC32     0x4000c004
   \   00000110   0x4000C008         DC32     0x4000c008

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   flexbus_8080_init
         8   -> port_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     276  flexbus_8080_init

 
 276 bytes in section .text
 
 276 bytes of CODE memory

Errors: none
Warnings: none
