###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:36
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_NRF24L0_MSG.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_NRF24L0_MSG.c
#        -D DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\VCAN_NRF24L0_MSG.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\VCAN_NRF24L0_MSG.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_NRF24L0_MSG.c
      1          #include "common.h"
      2          #include "MK60_gpio.h"
      3          #include "MK60_port.h"
      4          #include "MK60_spi.h"
      5          #include "VCAN_camera.h"
      6          #include "VCAN_NRF24L0.h"
      7          #include "VCAN_NRF24L0_MSG.h"
      8          #include "VCAN_TSL1401.h"
      9          
     10          /**************************** 变量接收与发送 **********************************/
     11          
     12          
     13          
     14          
     15          /**************************** 变量接收与发送 **********************************/
     16          

   \                                 In section .bss, align 4
     17          uint32 rxbuflen = 0;           //用于接收方返回接收到多少数据。（包含第一次传递进去的那个包大小）
   \                     rxbuflen:
   \   00000000                      DS8 4
     18          
     19          

   \                                 In section .rodata, align 4
     20          const uint32 nrf_com_size[COM_MAX] = {CAMERA_SIZE , TSL1401_MAX *TSL1401_SIZE , 8, 0};
   \                     nrf_com_size:
   \   00000000   0x00000258         DC32 600, 384, 8, 0
   \              0x00000180   
   \              0x00000008   
   \              0x00000000   
     21          

   \                                 In section .bss, align 4
     22          uint32 nrf_com_totalsize[COM_MAX];                                                                  // 所占用 包 的 总 占用空间
   \                     nrf_com_totalsize:
   \   00000000                      DS8 16
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void nrf_msg_init()
     25          {
     26              uint32 i = COM_MAX;
   \                     nrf_msg_init: (+1)
   \   00000000   0x2004             MOVS     R0,#+4
     27          
     28              while(i--)
   \                     ??nrf_msg_init_0: (+1)
   \   00000002   0x0001             MOVS     R1,R0
   \   00000004   0x1E48             SUBS     R0,R1,#+1
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD009             BEQ.N    ??nrf_msg_init_1
     29              {
     30                  nrf_com_totalsize[i] = (( nrf_com_size[i] + 2 * COM_LEN + DATA_PACKET - 1 ) / DATA_PACKET)  //求得包的数目
     31                                         *DATA_PACKET;                                                      //总共占用的空间
   \   0000000A   0x....             LDR.N    R1,??DataTable2
   \   0000000C   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000010   0x3123             ADDS     R1,R1,#+35
   \   00000012   0x0949             LSRS     R1,R1,#+5
   \   00000014   0x0149             LSLS     R1,R1,#+5
   \   00000016   0x....             LDR.N    R2,??DataTable2_1
   \   00000018   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   0000001C   0xE7F1             B.N      ??nrf_msg_init_0
     32              }
     33          
     34          }
   \                     ??nrf_msg_init_1: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
     35          
     36          
     37          //发送命令。前两个字节用在命令识别，后面就是需要传输的内容

   \                                 In section .text, align 2, keep-with-next
     38          nrf_result_e nrf_msg_tx(com_e  com, uint8 *sendbuf)
     39          {
   \                     nrf_msg_tx: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     40              ASSERT(com < COM_MAX);          //命令不能超过最大的数目
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x2C04             CMP      R4,#+4
   \   0000000A   0xDB03             BLT.N    ??nrf_msg_tx_0
   \   0000000C   0x2128             MOVS     R1,#+40
   \   0000000E   0x....             LDR.N    R0,??DataTable2_2
   \   00000010   0x.... 0x....      BL       assert_failed
     41          
     42              //把命令写进数据缓冲区
     43              sendbuf[0] =  com;
   \                     ??nrf_msg_tx_0: (+1)
   \   00000014   0x702C             STRB     R4,[R5, #+0]
     44              sendbuf[1] = ~com;
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0x43E0             MVNS     R0,R4
   \   0000001A   0x7068             STRB     R0,[R5, #+1]
     45              sendbuf[nrf_com_size[com] + 2 * COM_LEN - 2] = ~com;
   \   0000001C   0x....             LDR.N    R0,??DataTable2
   \   0000001E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000024   0x1940             ADDS     R0,R0,R5
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x43E1             MVNS     R1,R4
   \   0000002A   0x7081             STRB     R1,[R0, #+2]
     46              sendbuf[nrf_com_size[com] + 2 * COM_LEN - 1] = com;
   \   0000002C   0x....             LDR.N    R0,??DataTable2
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000034   0x1940             ADDS     R0,R0,R5
   \   00000036   0x70C4             STRB     R4,[R0, #+3]
     47          
     48              while( !nrf_tx(sendbuf , nrf_com_size[com] + 2 * COM_LEN)); //发送数据
   \                     ??nrf_msg_tx_1: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable2
   \   0000003A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000040   0x1D01             ADDS     R1,R0,#+4
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0x.... 0x....      BL       nrf_tx
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD0F5             BEQ.N    ??nrf_msg_tx_1
     49          
     50              return NRF_RESULT_NULL;
   \   0000004C   0x2003             MOVS     R0,#+3
   \   0000004E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     51          }
     52          
     53          //查询是否有接收数据，并进行处理。rebuf 为可供使用的缓冲区
     54          //

   \                                 In section .text, align 2, keep-with-next
     55          nrf_result_e nrf_msg_rx(com_e  *com, uint8 *rebuf)
     56          {
   \                     nrf_msg_rx: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     57              com_e   comtmp;
     58              uint32  len;
     59              uint32  tmplen;
     60              uint32  relen;                              //接收到的数据长度
     61              uint8   *buftemp;
     62          
     63              uint32  totallen ;                          //总需要接收包的数目(包的整数倍)
     64              uint16  tmpcheck;
     65          
     66          RE_LOOP:
     67              buftemp = rebuf;                            //加载起始地址
   \                     ??nrf_msg_rx_0: (+1)
   \   00000008   0x46AA             MOV      R10,R5
     68          
     69              relen = nrf_rx(buftemp, DATA_PACKET);       //接收 第一个包
   \   0000000A   0x2120             MOVS     R1,#+32
   \   0000000C   0x4650             MOV      R0,R10
   \   0000000E   0x.... 0x....      BL       nrf_rx
   \   00000012   0x4681             MOV      R9,R0
     70              if(relen == 0)
   \   00000014   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000018   0xD101             BNE.N    ??nrf_msg_rx_1
     71              {
     72                  //如果是 预校验 失败，那么 肯定可以接收到数据，不会进入此处
     73          
     74                  //只有 一开始 进入函数 第一次接收的时候，才出现接收失败
     75          
     76                  return NRF_RESULT_RX_NO;                //没接收到数据
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0xE06B             B.N      ??nrf_msg_rx_2
     77              }
     78          
     79              comtmp = (com_e)buftemp[0];
   \                     ??nrf_msg_rx_1: (+1)
   \   0000001E   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000022   0x0006             MOVS     R6,R0
     80              if(((uint8)comtmp < (uint8)COM_MAX) && (buftemp[1] ==  (uint8)~comtmp) && (comtmp != COM_RETRAN) )
   \   00000024   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000026   0x2E04             CMP      R6,#+4
   \   00000028   0xDA64             BGE.N    ??nrf_msg_rx_3
   \   0000002A   0xF89A 0x0001      LDRB     R0,[R10, #+1]
   \   0000002E   0x43F1             MVNS     R1,R6
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD15E             BNE.N    ??nrf_msg_rx_3
   \   00000036   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000038   0x2E03             CMP      R6,#+3
   \   0000003A   0xD05B             BEQ.N    ??nrf_msg_rx_3
     81              {
     82                  //校验正确,继续接收剩余 的数据
     83          
     84                  totallen = nrf_com_totalsize[comtmp];   //总接收参数
   \   0000003C   0x....             LDR.N    R0,??DataTable2_1
   \   0000003E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000040   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   00000044   0x4683             MOV      R11,R0
     85          
     86                  if(totallen > relen )                   //数据长度 超过 已接收长度
   \   00000046   0x45D9             CMP      R9,R11
   \   00000048   0xD224             BCS.N    ??nrf_msg_rx_4
     87                  {
     88                      //需要继续接收
     89                      len = totallen - relen;             //剩余接收的 长度
   \   0000004A   0xEBBB 0x0009      SUBS     R0,R11,R9
   \   0000004E   0x0007             MOVS     R7,R0
     90          
     91                      //等待接收FIFO里的数据校验正确才接收
     92                      while( !nrf_rx_fifo_check(nrf_com_size[comtmp] + 2 * COM_LEN - relen,&tmpcheck)  );   //等待接收
   \                     ??nrf_msg_rx_5: (+1)
   \   00000050   0xA900             ADD      R1,SP,#+0
   \   00000052   0x....             LDR.N    R0,??DataTable2
   \   00000054   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000056   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000005A   0x1D00             ADDS     R0,R0,#+4
   \   0000005C   0xEBB0 0x0009      SUBS     R0,R0,R9
   \   00000060   0x.... 0x....      BL       nrf_rx_fifo_check
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD0F3             BEQ.N    ??nrf_msg_rx_5
     93                      if( tmpcheck !=  (uint16)((uint8)~comtmp + (comtmp<<8)))
   \   00000068   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000006C   0x43F1             MVNS     R1,R6
   \   0000006E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000070   0x0232             LSLS     R2,R6,#+8
   \   00000072   0xFA52 0xF181      UXTAB    R1,R2,R1
   \   00000076   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD1C5             BNE.N    ??nrf_msg_rx_0
     94                      {
     95                          goto RE_LOOP;                   //校验失败 ，放弃刚才接收的 第一个 包 （重新接收数据）
     96                      }
     97          
     98                      tmplen = relen;
   \                     ??nrf_msg_rx_6: (+1)
   \   0000007C   0x46C8             MOV      R8,R9
     99                      do
    100                      {
    101                          buftemp += tmplen;              //移动到尚未接收数据的缓冲区
   \                     ??nrf_msg_rx_7: (+1)
   \   0000007E   0xEB18 0x0A0A      ADDS     R10,R8,R10
    102                          tmplen = nrf_rx(buftemp, len);  //接收数据
   \   00000082   0x0039             MOVS     R1,R7
   \   00000084   0x4650             MOV      R0,R10
   \   00000086   0x.... 0x....      BL       nrf_rx
   \   0000008A   0x4680             MOV      R8,R0
    103                          //relen += tmplen;
    104                          len -= tmplen;
   \   0000008C   0xEBB7 0x0708      SUBS     R7,R7,R8
    105                      }
    106                      while(len);
   \   00000090   0x2F00             CMP      R7,#+0
   \   00000092   0xD1F4             BNE.N    ??nrf_msg_rx_7
    107                  }
    108          
    109                  //校验尾部数据是否正确
    110                  if(
    111                      (rebuf[nrf_com_size[comtmp] + 2 * COM_LEN - 2] ==   (uint8)~comtmp)
    112                      &&  (rebuf[nrf_com_size[comtmp] + 2 * COM_LEN - 1] ==   (uint8) comtmp)   )
   \                     ??nrf_msg_rx_4: (+1)
   \   00000094   0x....             LDR.N    R0,??DataTable2
   \   00000096   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000098   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   0000009C   0x1940             ADDS     R0,R0,R5
   \   0000009E   0x7880             LDRB     R0,[R0, #+2]
   \   000000A0   0x43F1             MVNS     R1,R6
   \   000000A2   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD125             BNE.N    ??nrf_msg_rx_3
   \   000000A8   0x....             LDR.N    R0,??DataTable2
   \   000000AA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000AC   0xF850 0x0026      LDR      R0,[R0, R6, LSL #+2]
   \   000000B0   0x1940             ADDS     R0,R0,R5
   \   000000B2   0x78C0             LDRB     R0,[R0, #+3]
   \   000000B4   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000B6   0x42B0             CMP      R0,R6
   \   000000B8   0xD11C             BNE.N    ??nrf_msg_rx_3
    113                  {
    114                      *com = comtmp;                          //存储命令
   \   000000BA   0x7026             STRB     R6,[R4, #+0]
    115          
    116                      //对 命令 数据进行 处理
    117                      switch(*com)
   \   000000BC   0x7820             LDRB     R0,[R4, #+0]
   \   000000BE   0x2802             CMP      R0,#+2
   \   000000C0   0xD116             BNE.N    ??nrf_msg_rx_8
    118                      {
    119                      case COM_VAR:
    120                          last_tab = *((uint32 *)&rebuf[COM_LEN]);                                    //读取变量编号
   \   000000C2   0xF8D5 0x0002      LDR      R0,[R5, #+2]
   \   000000C6   0x....             LDR.N    R1,??DataTable2_3
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    121                          if(last_tab < VAR_MAX)
   \   000000CA   0x....             LDR.N    R0,??DataTable2_3
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x2807             CMP      R0,#+7
   \   000000D0   0xD20C             BCS.N    ??nrf_msg_rx_9
    122                          {
    123                              save_var((var_tab_e)last_tab, *((uint32 *)&rebuf[COM_LEN + sizeof(uint32)]));          //存储 变量
   \   000000D2   0xF8D5 0x1006      LDR      R1,[R5, #+6]
   \   000000D6   0x....             LDR.N    R0,??DataTable2_3
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DC   0x.... 0x....      BL       save_var
    124                              var_display(last_tab);                                                  //显示 变量
   \   000000E0   0x....             LDR.N    R0,??DataTable2_3
   \   000000E2   0x6800             LDR      R0,[R0, #+0]
   \   000000E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E6   0x.... 0x....      BL       var_display
    125                          }
    126                          else
    127                          {
    128                              return NRF_RESULT_RX_NOVALID;
    129                          }
    130                          break;
   \   000000EA   0xE001             B.N      ??nrf_msg_rx_10
   \                     ??nrf_msg_rx_9: (+1)
   \   000000EC   0x2006             MOVS     R0,#+6
   \   000000EE   0xE002             B.N      ??nrf_msg_rx_2
    131                      default:
    132                          break;
    133                      }
    134          
    135                      return NRF_RESULT_RX_VALID;             //接收有效数据
   \                     ??nrf_msg_rx_8: (+1)
   \                     ??nrf_msg_rx_10: (+1)
   \   000000F0   0x2005             MOVS     R0,#+5
   \   000000F2   0xE000             B.N      ??nrf_msg_rx_2
    136                  }
    137              }
    138          
    139              //有接收到数据，但接收数据无效
    140              return NRF_RESULT_RX_NOVALID;
   \                     ??nrf_msg_rx_3: (+1)
   \   000000F4   0x2006             MOVS     R0,#+6
   \                     ??nrf_msg_rx_2: (+1)
   \   000000F6   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    141          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     nrf_com_size

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     nrf_com_totalsize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     last_tab

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 42H, 6FH, 61H, 72H, 64H, 5CH
   \              0x42 0x6F    
   \              0x61 0x72    
   \              0x64 0x5C    
   \   00000030   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 56H, 43H, 41H, 4EH
   \              0x63 0x5C    
   \              0x56 0x43    
   \              0x41 0x4E    
   \   00000038   0x5F 0x4E          DC8 5FH, 4EH, 52H, 46H, 32H, 34H, 4CH, 30H
   \              0x52 0x46    
   \              0x32 0x34    
   \              0x4C 0x30    
   \   00000040   0x5F 0x4D          DC8 5FH, 4DH, 53H, 47H, 2EH, 63H, 0
   \              0x53 0x47    
   \              0x2E 0x63    
   \              0x00         
   \   00000047   0x00               DC8 0
    142          
    143          
    144          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   nrf_msg_init
      40   nrf_msg_rx
        40   -> nrf_rx
        40   -> nrf_rx_fifo_check
        40   -> save_var
        40   -> var_display
      16   nrf_msg_tx
        16   -> assert_failed
        16   -> nrf_tx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      72  ?_0
      16  nrf_com_size
      16  nrf_com_totalsize
      32  nrf_msg_init
     250  nrf_msg_rx
      80  nrf_msg_tx
       4  rxbuflen

 
  20 bytes in section .bss
  88 bytes in section .rodata
 378 bytes in section .text
 
 378 bytes of CODE  memory
  88 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
