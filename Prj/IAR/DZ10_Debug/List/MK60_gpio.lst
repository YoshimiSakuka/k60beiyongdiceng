###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:27
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_gpio.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_gpio.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_gpio.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_gpio.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_gpio.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_gpio.c
     11           * @brief      gpio驱动函数
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-06-26
     15           */
     16          
     17          /*
     18           * 包含头文件
     19           */
     20          #include "common.h"
     21          #include "MK60_port.h"
     22          #include "MK60_gpio.h"
     23          
     24          /*
     25           * 定义数组
     26           */

   \                                 In section .data, align 4
     27          GPIO_MemMapPtr GPIOX[PTX_MAX] = {PTA_BASE_PTR, PTB_BASE_PTR, PTC_BASE_PTR, PTD_BASE_PTR, PTE_BASE_PTR}; //定义五个指针数组保存 GPIOX 的地址
   \                     GPIOX:
   \   00000000   0x400FF000         DC32 400FF000H, 400FF040H, 400FF080H, 400FF0C0H, 400FF100H
   \              0x400FF040   
   \              0x400FF080   
   \              0x400FF0C0   
   \              0x400FF100   
     28          
     29          
     30          
     31          /*!
     32           *  @brief      初始化gpio
     33           *  @param      PTxn    端口
     34           *  @param      cfg     引脚方向,0=输入,1=输出
     35           *  @param      data    输出初始状态,0=低电平,1=高电平 （对输入无效）
     36           *  @since      v5.0
     37           *  Sample usage:       gpio_init (PTA8, GPI,0);    //初始化 PTA8 管脚为输入
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          void gpio_init (PTXn_e ptxn, GPIO_CFG cfg, uint8 data)
     40          {
   \                     gpio_init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     41              //复用管脚为GPIO功能
     42              port_init( ptxn, ALT1);
   \   00000008   0xF44F 0x7180      MOV      R1,#+256
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       port_init
     43          
     44              //端口方向控制输入还是输出
     45              if(  cfg == GPI )
   \   00000014   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000016   0x2D00             CMP      R5,#+0
   \   00000018   0xD111             BNE.N    ??gpio_init_0
     46              {
     47                  //设置端口方向为输入
     48                  GPIO_PDDR_REG(GPIOX_BASE(ptxn)) &= ~(1 << PTn(ptxn));       // GPIO PDDR 管脚号 清0，即对应管脚配置为端口方向输入
   \   0000001A   0x....             LDR.N    R0,??DataTable4
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x1161             ASRS     R1,R4,#+5
   \   00000020   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000024   0x....             LDR.N    R1,??DataTable4
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x1162             ASRS     R2,R4,#+5
   \   0000002A   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   0000002E   0x6949             LDR      R1,[R1, #+20]
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0xF014 0x031F      ANDS     R3,R4,#0x1F
   \   00000036   0x409A             LSLS     R2,R2,R3
   \   00000038   0x4391             BICS     R1,R1,R2
   \   0000003A   0x6141             STR      R1,[R0, #+20]
   \   0000003C   0xE036             B.N      ??gpio_init_1
     49              }
     50              else
     51              {
     52                  //设置端口方向为输出
     53                  GPIO_PDDR_REG(GPIOX_BASE(ptxn)) |= (1 << PTn(ptxn));        // GPIO PDDR 管脚号 置1，即对应管脚配置为端口方向输出
   \                     ??gpio_init_0: (+1)
   \   0000003E   0x....             LDR.N    R0,??DataTable4
   \   00000040   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000042   0x1161             ASRS     R1,R4,#+5
   \   00000044   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000048   0x....             LDR.N    R1,??DataTable4
   \   0000004A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004C   0x1162             ASRS     R2,R4,#+5
   \   0000004E   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000052   0x6949             LDR      R1,[R1, #+20]
   \   00000054   0x2201             MOVS     R2,#+1
   \   00000056   0xF014 0x031F      ANDS     R3,R4,#0x1F
   \   0000005A   0x409A             LSLS     R2,R2,R3
   \   0000005C   0x4311             ORRS     R1,R2,R1
   \   0000005E   0x6141             STR      R1,[R0, #+20]
     54          
     55                  //端口输出数据
     56                  if(data == 0)
   \   00000060   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000062   0x2E00             CMP      R6,#+0
   \   00000064   0xD111             BNE.N    ??gpio_init_2
     57                  {
     58                      GPIO_PDOR_REG(GPIOX_BASE(ptxn)) &= ~(1 << PTn(ptxn));   // GPIO PDOR 管脚号 清0，即对应管脚配置为端口输出低电平
   \   00000066   0x....             LDR.N    R0,??DataTable4
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x1161             ASRS     R1,R4,#+5
   \   0000006C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x2101             MOVS     R1,#+1
   \   00000074   0xF014 0x021F      ANDS     R2,R4,#0x1F
   \   00000078   0x4091             LSLS     R1,R1,R2
   \   0000007A   0x4388             BICS     R0,R0,R1
   \   0000007C   0x....             LDR.N    R1,??DataTable4
   \   0000007E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000080   0x1162             ASRS     R2,R4,#+5
   \   00000082   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000086   0x6008             STR      R0,[R1, #+0]
   \   00000088   0xE010             B.N      ??gpio_init_1
     59                  }
     60                  else
     61                  {
     62                      GPIO_PDOR_REG(GPIOX_BASE(ptxn))  |= (1 << PTn(ptxn));   // GPIO PDOR 管脚号 置1，即对应管脚配置为端口输出高电平
   \                     ??gpio_init_2: (+1)
   \   0000008A   0x....             LDR.N    R0,??DataTable4
   \   0000008C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008E   0x1161             ASRS     R1,R4,#+5
   \   00000090   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000094   0x6800             LDR      R0,[R0, #+0]
   \   00000096   0x2101             MOVS     R1,#+1
   \   00000098   0xF014 0x021F      ANDS     R2,R4,#0x1F
   \   0000009C   0x4091             LSLS     R1,R1,R2
   \   0000009E   0x4308             ORRS     R0,R1,R0
   \   000000A0   0x....             LDR.N    R1,??DataTable4
   \   000000A2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A4   0x1162             ASRS     R2,R4,#+5
   \   000000A6   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   000000AA   0x6008             STR      R0,[R1, #+0]
     63                  }
     64              }
     65          }
   \                     ??gpio_init_1: (+1)
   \   000000AC   0xBD70             POP      {R4-R6,PC}       ;; return
     66          
     67          /*!
     68           *  @brief      设置引脚数据方向
     69           *  @param      PTxn    端口
     70           *  @param      cfg     引脚方向,0=输入,1=输出
     71           *  @since      v5.0
     72           *  Sample usage:       gpio_ddr (PTA8, GPI);    //设置 PTA8 管脚为输入
     73           */

   \                                 In section .text, align 2, keep-with-next
     74          void    gpio_ddr   (PTXn_e ptxn, GPIO_CFG cfg)
     75          {
   \                     gpio_ddr: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     76              //端口方向控制输入还是输出
     77              if(  cfg == GPI )
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD111             BNE.N    ??gpio_ddr_0
     78              {
     79                  //设置端口方向为输入
     80                  GPIO_PDDR_REG(GPIOX_BASE(ptxn)) &= ~(1 << PTn(ptxn));           // GPIO PDDR 管脚号 清0，即对应管脚配置为端口方向输入
   \   00000008   0x....             LDR.N    R2,??DataTable4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x1143             ASRS     R3,R0,#+5
   \   0000000E   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000012   0x....             LDR.N    R3,??DataTable4
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x1144             ASRS     R4,R0,#+5
   \   00000018   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   0000001C   0x695B             LDR      R3,[R3, #+20]
   \   0000001E   0x2401             MOVS     R4,#+1
   \   00000020   0xF010 0x051F      ANDS     R5,R0,#0x1F
   \   00000024   0x40AC             LSLS     R4,R4,R5
   \   00000026   0x43A3             BICS     R3,R3,R4
   \   00000028   0x6153             STR      R3,[R2, #+20]
   \   0000002A   0xE010             B.N      ??gpio_ddr_1
     81              }
     82              else
     83              {
     84                  //设置端口方向为输出
     85                  GPIO_PDDR_REG(GPIOX_BASE(ptxn)) |= (1 << PTn(ptxn));            // GPIO PDDR 管脚号 置1，即对应管脚配置为端口方向输出
   \                     ??gpio_ddr_0: (+1)
   \   0000002C   0x....             LDR.N    R2,??DataTable4
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x1143             ASRS     R3,R0,#+5
   \   00000032   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000036   0x....             LDR.N    R3,??DataTable4
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x1144             ASRS     R4,R0,#+5
   \   0000003C   0xF853 0x3024      LDR      R3,[R3, R4, LSL #+2]
   \   00000040   0x695B             LDR      R3,[R3, #+20]
   \   00000042   0x2401             MOVS     R4,#+1
   \   00000044   0xF010 0x051F      ANDS     R5,R0,#0x1F
   \   00000048   0x40AC             LSLS     R4,R4,R5
   \   0000004A   0x4323             ORRS     R3,R4,R3
   \   0000004C   0x6153             STR      R3,[R2, #+20]
     86              }
     87          }
   \                     ??gpio_ddr_1: (+1)
   \   0000004E   0xBC30             POP      {R4,R5}
   \   00000050   0x4770             BX       LR               ;; return
     88          
     89          /*!
     90           *  @brief      设置引脚状态
     91           *  @param      PTxn    端口
     92           *  @param      data    输出初始状态,0=低电平,1=高电平 （对输入无效）
     93           *  @since      v5.0
     94           *  @warning    务必保证数据方向为输出（DEBUG模式下，有断言进行检测）
     95           *  Sample usage:       gpio_set (PTA8, 1);    // PTA8 管脚 输出 1
     96           */

   \                                 In section .text, align 2, keep-with-next
     97          void gpio_set (PTXn_e ptxn, uint8 data)
     98          {
   \                     gpio_set: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     99              ASSERT( BIT_GET( GPIO_PDDR_REG(GPIOX_BASE(ptxn)) , PTn(ptxn)) == GPO ); // 断言，检测 输出方向是否为输出
   \   00000006   0x....             LDR.N    R0,??DataTable4
   \   00000008   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000A   0x1161             ASRS     R1,R4,#+5
   \   0000000C   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000010   0x6940             LDR      R0,[R0, #+20]
   \   00000012   0xF014 0x011F      ANDS     R1,R4,#0x1F
   \   00000016   0x0002             MOVS     R2,R0
   \   00000018   0x40CA             LSRS     R2,R2,R1
   \   0000001A   0x07D0             LSLS     R0,R2,#+31
   \   0000001C   0xD403             BMI.N    ??gpio_set_0
   \   0000001E   0x2163             MOVS     R1,#+99
   \   00000020   0x....             LDR.N    R0,??DataTable4_1
   \   00000022   0x.... 0x....      BL       assert_failed
    100                                                                                      // 获取 GPIO PDDR 管脚号 ，比较是否为输出
    101          
    102              //端口输出数据
    103              if(data == 0)
   \                     ??gpio_set_0: (+1)
   \   00000026   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000028   0x2D00             CMP      R5,#+0
   \   0000002A   0xD111             BNE.N    ??gpio_set_1
    104              {
    105                  GPIO_PDOR_REG(GPIOX_BASE(ptxn)) &= ~(1 << PTn(ptxn));   // GPIO PDOR 管脚号 清0，即对应管脚配置为端口输出低电平
   \   0000002C   0x....             LDR.N    R0,??DataTable4
   \   0000002E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000030   0x1161             ASRS     R1,R4,#+5
   \   00000032   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0xF014 0x021F      ANDS     R2,R4,#0x1F
   \   0000003E   0x4091             LSLS     R1,R1,R2
   \   00000040   0x4388             BICS     R0,R0,R1
   \   00000042   0x....             LDR.N    R1,??DataTable4
   \   00000044   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000046   0x1162             ASRS     R2,R4,#+5
   \   00000048   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   0000004C   0x6008             STR      R0,[R1, #+0]
   \   0000004E   0xE010             B.N      ??gpio_set_2
    106              }
    107              else
    108              {
    109                  GPIO_PDOR_REG(GPIOX_BASE(ptxn))  |= (1 << PTn(ptxn));   // GPIO PDOR 管脚号 置1，即对应管脚配置为端口输出高电平
   \                     ??gpio_set_1: (+1)
   \   00000050   0x....             LDR.N    R0,??DataTable4
   \   00000052   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000054   0x1161             ASRS     R1,R4,#+5
   \   00000056   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0xF014 0x021F      ANDS     R2,R4,#0x1F
   \   00000062   0x4091             LSLS     R1,R1,R2
   \   00000064   0x4308             ORRS     R0,R1,R0
   \   00000066   0x....             LDR.N    R1,??DataTable4
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0x1162             ASRS     R2,R4,#+5
   \   0000006C   0xF851 0x1022      LDR      R1,[R1, R2, LSL #+2]
   \   00000070   0x6008             STR      R0,[R1, #+0]
    110              }
    111          }
   \                     ??gpio_set_2: (+1)
   \   00000072   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    112          
    113          
    114          /*!
    115           *  @brief      反转引脚状态
    116           *  @param      PTxn    端口
    117           *  @since      v5.0
    118           *  @warning    务必保证数据方向为输出（DEBUG模式下，有断言进行检测）
    119           *  Sample usage:       gpio_turn (PTA8);    // PTA8 管脚 输出 反转
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          void gpio_turn (PTXn_e ptxn)
    122          {
   \                     gpio_turn: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    123              ASSERT( BIT_GET( GPIO_PDDR_REG(GPIOX_BASE(ptxn)) , PTn(ptxn)) == GPO ); // 断言，检测 输出方向是否为输出
   \   00000004   0x....             LDR.N    R0,??DataTable4
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x1161             ASRS     R1,R4,#+5
   \   0000000A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000000E   0x6940             LDR      R0,[R0, #+20]
   \   00000010   0xF014 0x011F      ANDS     R1,R4,#0x1F
   \   00000014   0x0002             MOVS     R2,R0
   \   00000016   0x40CA             LSRS     R2,R2,R1
   \   00000018   0x07D0             LSLS     R0,R2,#+31
   \   0000001A   0xD403             BMI.N    ??gpio_turn_0
   \   0000001C   0x217B             MOVS     R1,#+123
   \   0000001E   0x....             LDR.N    R0,??DataTable4_1
   \   00000020   0x.... 0x....      BL       assert_failed
    124                                                                                      // 获取 GPIO PDDR 管脚号 ，比较是否为输出
    125          
    126              GPIO_PTOR_REG( GPIOX_BASE(ptxn))  =  1 << (PTn(ptxn ));                 // GPIO PTOR ptxn 置1，其他清0 ，即对应管脚配置为端口输出反转，其他位不变
   \                     ??gpio_turn_0: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable4
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x1161             ASRS     R1,R4,#+5
   \   0000002A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0xF014 0x021F      ANDS     R2,R4,#0x1F
   \   00000034   0x4091             LSLS     R1,R1,R2
   \   00000036   0x60C1             STR      R1,[R0, #+12]
    127                                                                                      // 此处不能用 BIT_SET 这个宏来置1 ，因为必须保证其他位 不变，其他位直接清0即可
    128          }
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    129          
    130          /*!
    131           *  @brief      读取引脚输入状态
    132           *  @param      PTxn    端口
    133           *  @return     管脚的状态，1为高电平，0为低电平
    134           *  @since      v5.0
    135           *  @warning    务必保证数据方向为输入（DEBUG模式下，有断言进行检测）
    136           *  Sample usage:       uint8 pta8_data = gpio_get (PTA8);    // 获取 PTA8 管脚 输入电平
    137           */

   \                                 In section .text, align 2, keep-with-next
    138          uint8 gpio_get(PTXn_e ptxn)
    139          {
   \                     gpio_get: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    140              ASSERT( BIT_GET( GPIO_PDDR_REG(GPIOX_BASE(ptxn)) , PTn(ptxn)) == GPI ); // 断言，检测 输出方向是否为输入
   \   00000004   0x....             LDR.N    R0,??DataTable4
   \   00000006   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   0x1161             ASRS     R1,R4,#+5
   \   0000000A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000000E   0x6940             LDR      R0,[R0, #+20]
   \   00000010   0xF014 0x011F      ANDS     R1,R4,#0x1F
   \   00000014   0x0002             MOVS     R2,R0
   \   00000016   0x40CA             LSRS     R2,R2,R1
   \   00000018   0x07D0             LSLS     R0,R2,#+31
   \   0000001A   0xD503             BPL.N    ??gpio_get_0
   \   0000001C   0x218C             MOVS     R1,#+140
   \   0000001E   0x....             LDR.N    R0,??DataTable4_1
   \   00000020   0x.... 0x....      BL       assert_failed
    141                                                                                      // 获取 GPIO PDDR 管脚号 ，比较是否为输入
    142          
    143              return ((GPIO_PDIR_REG(GPIOX_BASE(ptxn)) >> PTn(ptxn )) & 0x01);        // 获取 GPIO PDIR ptxn 状态，即读取管脚输入电平
   \                     ??gpio_get_0: (+1)
   \   00000024   0x....             LDR.N    R0,??DataTable4
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x1161             ASRS     R1,R4,#+5
   \   0000002A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000002E   0x6900             LDR      R0,[R0, #+16]
   \   00000030   0xF014 0x011F      ANDS     R1,R4,#0x1F
   \   00000034   0x0002             MOVS     R2,R0
   \   00000036   0x40CA             LSRS     R2,R2,R1
   \   00000038   0xF012 0x0001      ANDS     R0,R2,#0x1
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
    144          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     GPIOX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 43H, 68H, 69H, 70H, 5CH, 73H
   \              0x43 0x68    
   \              0x69 0x70    
   \              0x5C 0x73    
   \   00000030   0x72 0x63          DC8 72H, 63H, 5CH, 4DH, 4BH, 36H, 30H, 5FH
   \              0x5C 0x4D    
   \              0x4B 0x36    
   \              0x30 0x5F    
   \   00000038   0x67 0x70          DC8 67H, 70H, 69H, 6FH, 2EH, 63H, 0
   \              0x69 0x6F    
   \              0x2E 0x63    
   \              0x00         
   \   0000003F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   gpio_ddr
       8   gpio_get
         8   -> assert_failed
      16   gpio_init
        16   -> port_init
      16   gpio_set
        16   -> assert_failed
       8   gpio_turn
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
      64  ?_0
      20  GPIOX
      82  gpio_ddr
      62  gpio_get
     174  gpio_init
     116  gpio_set
      58  gpio_turn

 
  20 bytes in section .data
  64 bytes in section .rodata
 500 bytes in section .text
 
 500 bytes of CODE  memory
  64 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
