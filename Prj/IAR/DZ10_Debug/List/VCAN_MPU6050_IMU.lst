###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:35
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\Accessories\IMU\VCAN_MPU6050_IMU.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\Accessories\IMU\VCAN_MPU6050_IMU.c
#        -D DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\VCAN_MPU6050_IMU.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\VCAN_MPU6050_IMU.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\Accessories\IMU\VCAN_MPU6050_IMU.c
      1          /* IMU.c file
      2          功能：
      3          姿态解算 IMU
      4          将传感器的输出值进行姿态解算。得到目标载体的俯仰角和横滚角 和航向角
      5          ------------------------------------
      6           */
      7          
      8          #include "VCAN_MPU6050_IMU.h"
      9          #include "VCAN_MPU6050.h"
     10          #include "include.h"
     11          

   \                                 In section .bss, align 4
     12          volatile float exInt, eyInt, ezInt;  // 误差积分
   \                     exInt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     eyInt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ezInt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     13          volatile float q0, q1, q2, q3; // 全局四元数
   \                     q0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     q1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     q2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     q3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     14          volatile float integralFBhand,handdiff;
   \                     integralFBhand:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     handdiff:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     15          volatile uint32_t lastUpdate, now; // 采样周期计数 单位 us
   \                     lastUpdate:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     now:
   \   00000000                      DS8 4
     16          
     17          void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz);
     18          
     19          /**************************实现函数********************************************
     20          *函数原型:		void Initial_Timer3(void)
     21          *功　　能:	  初始化Tim2  Tim3 将两个定时器级联，以产生一个32位的定时器来提供系统us 级的计时	
     22          输入参数：无
     23          输出参数：没有	
     24          *******************************************************************************/
     25          
     26          
     27          // Fast inverse square-root
     28          /**************************实现函数********************************************
     29          *函数原型:	   float invSqrt(float x)
     30          *功　　能:	   快速计算 1/Sqrt(x) 	
     31          输入参数： 要计算的值
     32          输出参数： 结果
     33          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     34          float invSqrt(float x) {
   \                     invSqrt: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
     35          	float halfx = 0.5f * x;
   \   00000004   0xF05F 0x507C      MOVS     R0,#+1056964608
   \   00000008   0x0021             MOVS     R1,R4
   \   0000000A   0x.... 0x....      BL       __aeabi_fmul
   \   0000000E   0x0005             MOVS     R5,R0
     36          	float y = x;
   \   00000010   0x0026             MOVS     R6,R4
     37          	long i = *(long*)&y;
   \   00000012   0x0037             MOVS     R7,R6
     38          	i = 0x5f3759df - (i>>1);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable5  ;; 0x5f3759df
   \   00000018   0xEBB0 0x0767      SUBS     R7,R0,R7, ASR #+1
     39          	y = *(float*)&i;
   \   0000001C   0x003E             MOVS     R6,R7
     40          	y = y * (1.5f - (halfx * y * y));
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0x0031             MOVS     R1,R6
   \   00000022   0x.... 0x....      BL       __aeabi_fmul
   \   00000026   0x0031             MOVS     R1,R6
   \   00000028   0x.... 0x....      BL       __aeabi_fmul
   \   0000002C   0x0001             MOVS     R1,R0
   \   0000002E   0xF05F 0x507F      MOVS     R0,#+1069547520
   \   00000032   0x.... 0x....      BL       __aeabi_fsub
   \   00000036   0x0031             MOVS     R1,R6
   \   00000038   0x.... 0x....      BL       __aeabi_fmul
   \   0000003C   0x0006             MOVS     R6,R0
     41          	return y;
   \   0000003E   0x0030             MOVS     R0,R6
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     42          }
     43          
     44          /**************************实现函数********************************************
     45          *函数原型:		uint32_t micros(void)
     46          *功　　能:	  读取系统运行的时间 ，返回单位为us 的时间数。	
     47          输入参数：无
     48          输出参数：处理器当前时间，从上电开始计时  单位 us
     49          *******************************************************************************/
     50          
     51          
     52          /**************************实现函数********************************************
     53          *函数原型:	   void IMU_init(void)
     54          *功　　能:	  初始化IMU相关	
     55          			  初始化各个传感器
     56          			  初始化四元数
     57          			  将积分清零
     58          			  更新系统时间
     59          输入参数：无
     60          输出参数：没有
     61          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     62          void IMU_init(void)
     63          {	 
   \                     IMU_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     64          	MPU6050_initialize();
   \   00000002   0x.... 0x....      BL       MPU6050_initialize
     65                  DELAY_MS(5);
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0x.... 0x....      BL       systick_delay_ms
     66          	MPU6050_initialize();
   \   0000000C   0x.... 0x....      BL       MPU6050_initialize
     67                  DELAY_MS(5);
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x.... 0x....      BL       systick_delay_ms
     68          
     69                  pit_time_start(PIT0);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       pit_time_start
     70          
     71            	q0 = 1.0f;  //初始化四元数
   \   0000001C   0xF05F 0x507E      MOVS     R0,#+1065353216
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable5_1
   \   00000024   0x6008             STR      R0,[R1, #+0]
     72            	q1 = 0.0f;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable5_2
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     73            	q2 = 0.0f;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   00000034   0x6008             STR      R0,[R1, #+0]
     74            	q3 = 0.0f;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable5_4
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     75            	exInt = 0.0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   00000044   0x6008             STR      R0,[R1, #+0]
     76            	eyInt = 0.0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     77            	ezInt = 0.0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   00000054   0x6008             STR      R0,[R1, #+0]
     78            	lastUpdate = pit_time_get_us(PIT0);//更新时间
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      BL       pit_time_get
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0xF44F 0x727A      MOV      R2,#+1000
   \   00000066   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   0000006A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   00000072   0x6008             STR      R0,[R1, #+0]
     79            	now = pit_time_get_us(PIT0);
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       pit_time_get
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \   0000007E   0x6809             LDR      R1,[R1, #+0]
   \   00000080   0xF44F 0x727A      MOV      R2,#+1000
   \   00000084   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   00000088   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   00000090   0x6008             STR      R0,[R1, #+0]
     80          }
   \   00000092   0xBD01             POP      {R0,PC}          ;; return
     81          
     82          /**************************实现函数********************************************
     83          *函数原型:	   void IMU_getValues(float * values)
     84          *功　　能:	 读取加速度 陀螺仪 磁力计 的当前值  
     85          输入参数： 将结果存放的数组首地址
     86          输出参数：没有
     87          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     88          void IMU_getValues(float * values) {  
   \                     IMU_getValues: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
     89          	int16_t accgyroval[6];
     90          	int i;
     91          	//读取加速度和陀螺仪的当前ADC
     92              MPU6050_getMotion6(&accgyroval[0], &accgyroval[1], &accgyroval[2], &accgyroval[3], &accgyroval[4], &accgyroval[5]);
   \   00000006   0xF10D 0x0012      ADD      R0,SP,#+18
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0xA804             ADD      R0,SP,#+16
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0xF10D 0x030E      ADD      R3,SP,#+14
   \   00000014   0xAA03             ADD      R2,SP,#+12
   \   00000016   0xF10D 0x010A      ADD      R1,SP,#+10
   \   0000001A   0xA802             ADD      R0,SP,#+8
   \   0000001C   0x.... 0x....      BL       MPU6050_getMotion6
     93              for(i = 0; i<6; i++) {
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x0005             MOVS     R5,R0
   \                     ??IMU_getValues_0: (+1)
   \   00000024   0x2D06             CMP      R5,#+6
   \   00000026   0xDA16             BGE.N    ??IMU_getValues_1
     94                if(i < 3) {
   \   00000028   0x2D03             CMP      R5,#+3
   \   0000002A   0xDA07             BGE.N    ??IMU_getValues_2
     95                  values[i] = (float) accgyroval[i];
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \   0000002E   0xF930 0x0015      LDRSH    R0,[R0, R5, LSL #+1]
   \   00000032   0x.... 0x....      BL       __aeabi_i2f
   \   00000036   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
   \   0000003A   0xE00A             B.N      ??IMU_getValues_3
     96                }
     97                else {
     98                  values[i] = ((float) accgyroval[i]) / 32.8f; //转成度每秒
   \                     ??IMU_getValues_2: (+1)
   \   0000003C   0xA802             ADD      R0,SP,#+8
   \   0000003E   0xF930 0x0015      LDRSH    R0,[R0, R5, LSL #+1]
   \   00000042   0x.... 0x....      BL       __aeabi_i2f
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable5_11  ;; 0x42033333
   \   0000004A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000004E   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
     99          		//这里已经将量程改成了 1000度每秒  32.8 对应 1度每秒
    100                }
    101              }
   \                     ??IMU_getValues_3: (+1)
   \   00000052   0x1C6D             ADDS     R5,R5,#+1
   \   00000054   0xE7E6             B.N      ??IMU_getValues_0
    102              //HMC58X3_mgetValues(&values[6]);	//读取磁力计的ADC值
    103          }
   \                     ??IMU_getValues_1: (+1)
   \   00000056   0xB005             ADD      SP,SP,#+20
   \   00000058   0xBD30             POP      {R4,R5,PC}       ;; return
    104          
    105          
    106          /**************************实现函数********************************************
    107          *函数原型:	   void IMU_AHRSupdate
    108          *功　　能:	 更新AHRS 更新四元数 
    109          输入参数： 当前的测量值。
    110          输出参数：没有
    111          *******************************************************************************/
    112          #define Kp 2.0f   // proportional gain governs rate of convergence to accelerometer/magnetometer
    113          #define Ki 0.01f   // integral gain governs rate of convergence of gyroscope biases
    114          

   \                                 In section .text, align 2, keep-with-next
    115          void IMU_AHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) 
    116          {
   \                     IMU_AHRSupdate: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB097             SUB      SP,SP,#+92
   \   00000006   0x0007             MOVS     R7,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4691             MOV      R9,R2
   \   0000000C   0x001C             MOVS     R4,R3
   \   0000000E   0x9D20             LDR      R5,[SP, #+128]
   \   00000010   0x9E21             LDR      R6,[SP, #+132]
    117            float norm;
    118            float hx, hy, hz, bx, bz;
    119            float vx, vy, vz, wx, wy, wz;
    120            float ex, ey, ez,halfT;
    121            float tempq0,tempq1,tempq2,tempq3;
    122          
    123            // 先把这些用得到的值算好
    124            float q0q0 = q0*q0;        //volatile类型变量一般不直接参与运算,
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x.... 0x....      BL       __aeabi_fmul
   \   00000022   0x9014             STR      R0,[SP, #+80]
    125            float q0q1 = q0*q1;        //可以尝试赋值给局部变量后进行运算.
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   00000028   0x6801             LDR      R1,[R0, #+0]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       __aeabi_fmul
   \   00000034   0x9013             STR      R0,[SP, #+76]
    126            float q0q2 = q0*q2;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x.... 0x....      BL       __aeabi_fmul
   \   00000046   0x9012             STR      R0,[SP, #+72]
    127            float q0q3 = q0*q3;
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   0000004C   0x6801             LDR      R1,[R0, #+0]
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x.... 0x....      BL       __aeabi_fmul
   \   00000058   0x9016             STR      R0,[SP, #+88]
    128            float q1q1 = q1*q1;
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   0000005E   0x6801             LDR      R1,[R0, #+0]
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x.... 0x....      BL       __aeabi_fmul
   \   0000006A   0x9011             STR      R0,[SP, #+68]
    129            float q1q2 = q1*q2;
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000070   0x6801             LDR      R1,[R0, #+0]
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x.... 0x....      BL       __aeabi_fmul
   \   0000007C   0x9015             STR      R0,[SP, #+84]
    130            float q1q3 = q1*q3;
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   00000082   0x6801             LDR      R1,[R0, #+0]
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x.... 0x....      BL       __aeabi_fmul
   \   0000008E   0x9010             STR      R0,[SP, #+64]
    131            float q2q2 = q2*q2;   
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   00000094   0x6801             LDR      R1,[R0, #+0]
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x.... 0x....      BL       __aeabi_fmul
   \   000000A0   0x900F             STR      R0,[SP, #+60]
    132            float q2q3 = q2*q3;
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable5_3
   \   000000A6   0x6801             LDR      R1,[R0, #+0]
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   000000AC   0x6800             LDR      R0,[R0, #+0]
   \   000000AE   0x.... 0x....      BL       __aeabi_fmul
   \   000000B2   0x900E             STR      R0,[SP, #+56]
    133            float q3q3 = q3*q3;          
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   000000B8   0x6801             LDR      R1,[R0, #+0]
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x.... 0x....      BL       __aeabi_fmul
   \   000000C4   0x900D             STR      R0,[SP, #+52]
    134            
    135            now = pit_time_get_us(PIT0);  //读取时间
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x.... 0x....      BL       pit_time_get
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable5_8
   \   000000D0   0x6809             LDR      R1,[R1, #+0]
   \   000000D2   0xF44F 0x727A      MOV      R2,#+1000
   \   000000D6   0xFB91 0xF1F2      SDIV     R1,R1,R2
   \   000000DA   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable5_10
   \   000000E2   0x6008             STR      R0,[R1, #+0]
    136            
    137            if(now<lastUpdate){ //定时器溢出过了。    //volatile类型变量lastUpdate一般不直接参与运算,
   \   000000E4   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   000000EE   0x6809             LDR      R1,[R1, #+0]
   \   000000F0   0x4288             CMP      R0,R1
   \   000000F2   0xD211             BCS.N    ??IMU_AHRSupdate_0
    138            halfT =  ((float)(now + (0x04444444- lastUpdate)) / 1750000.0f);   //default 2000000.0f
   \   000000F4   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x.... 0x....      LDR.W    R1,??DataTable5_12  ;; 0x4444444
   \   000000FE   0x1808             ADDS     R0,R1,R0
   \   00000100   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   00000104   0x6809             LDR      R1,[R1, #+0]
   \   00000106   0x1A40             SUBS     R0,R0,R1
   \   00000108   0x.... 0x....      BL       __aeabi_ui2f
   \   0000010C   0x.... 0x....      LDR.W    R1,??DataTable5_13  ;; 0x49d59f80
   \   00000110   0x.... 0x....      BL       __aeabi_fdiv
   \   00000114   0x9001             STR      R0,[SP, #+4]
   \   00000116   0xE00D             B.N      ??IMU_AHRSupdate_1
    139            }
    140            else	{
    141            halfT =  ((float)(now - lastUpdate) / 1750000.0f);
   \                     ??IMU_AHRSupdate_0: (+1)
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   0000011C   0x6800             LDR      R0,[R0, #+0]
   \   0000011E   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   00000122   0x6809             LDR      R1,[R1, #+0]
   \   00000124   0x1A40             SUBS     R0,R0,R1
   \   00000126   0x.... 0x....      BL       __aeabi_ui2f
   \   0000012A   0x.... 0x....      LDR.W    R1,??DataTable5_13  ;; 0x49d59f80
   \   0000012E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000132   0x9001             STR      R0,[SP, #+4]
    142            }
    143            
    144            lastUpdate = now;	//更新时间
   \                     ??IMU_AHRSupdate_1: (+1)
   \   00000134   0x.... 0x....      LDR.W    R0,??DataTable5_10
   \   00000138   0x6800             LDR      R0,[R0, #+0]
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable5_9
   \   0000013E   0x6008             STR      R0,[R1, #+0]
    145          
    146            norm = invSqrt(ax*ax + ay*ay + az*az);       
   \   00000140   0x0020             MOVS     R0,R4
   \   00000142   0x0021             MOVS     R1,R4
   \   00000144   0x.... 0x....      BL       __aeabi_fmul
   \   00000148   0x4682             MOV      R10,R0
   \   0000014A   0x0028             MOVS     R0,R5
   \   0000014C   0x0029             MOVS     R1,R5
   \   0000014E   0x.... 0x....      BL       __aeabi_fmul
   \   00000152   0x4651             MOV      R1,R10
   \   00000154   0x.... 0x....      BL       __aeabi_fadd
   \   00000158   0x4682             MOV      R10,R0
   \   0000015A   0x0030             MOVS     R0,R6
   \   0000015C   0x0031             MOVS     R1,R6
   \   0000015E   0x.... 0x....      BL       __aeabi_fmul
   \   00000162   0x4651             MOV      R1,R10
   \   00000164   0x.... 0x....      BL       __aeabi_fadd
   \   00000168   0x.... 0x....      BL       invSqrt
   \   0000016C   0x9002             STR      R0,[SP, #+8]
    147            ax = ax * norm;
   \   0000016E   0x9802             LDR      R0,[SP, #+8]
   \   00000170   0x0021             MOVS     R1,R4
   \   00000172   0x.... 0x....      BL       __aeabi_fmul
   \   00000176   0x0004             MOVS     R4,R0
    148            ay = ay * norm;
   \   00000178   0x9802             LDR      R0,[SP, #+8]
   \   0000017A   0x0029             MOVS     R1,R5
   \   0000017C   0x.... 0x....      BL       __aeabi_fmul
   \   00000180   0x0005             MOVS     R5,R0
    149            az = az * norm;
   \   00000182   0x9802             LDR      R0,[SP, #+8]
   \   00000184   0x0031             MOVS     R1,R6
   \   00000186   0x.... 0x....      BL       __aeabi_fmul
   \   0000018A   0x0006             MOVS     R6,R0
    150            //把加计的三维向量转成单位向量。
    151          
    152            //norm = invSqrt(mx*mx + my*my + mz*mz);          
    153            //mx = mx * norm;
    154            //my = my * norm;
    155            //mz = mz * norm;
    156          
    157            // compute reference direction of flux
    158            //hx = 2*mx*(0.5f - q2q2 - q3q3) + 2*my*(q1q2 - q0q3) + 2*mz*(q1q3 + q0q2);
    159            //hy = 2*mx*(q1q2 + q0q3) + 2*my*(0.5f - q1q1 - q3q3) + 2*mz*(q2q3 - q0q1);
    160            //hz = 2*mx*(q1q3 - q0q2) + 2*my*(q2q3 + q0q1) + 2*mz*(0.5f - q1q1 - q2q2);         
    161            //bx = sqrt((hx*hx) + (hy*hy));
    162            //bz = hz;     
    163            
    164            // estimated direction of gravity and flux (v and w)
    165            vx = 2*(q1q3 - q0q2);
   \   0000018C   0x9810             LDR      R0,[SP, #+64]
   \   0000018E   0x9912             LDR      R1,[SP, #+72]
   \   00000190   0x.... 0x....      BL       __aeabi_fsub
   \   00000194   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   00000198   0x.... 0x....      BL       __aeabi_fmul
   \   0000019C   0x900C             STR      R0,[SP, #+48]
    166            vy = 2*(q0q1 + q2q3);
   \   0000019E   0x9913             LDR      R1,[SP, #+76]
   \   000001A0   0x980E             LDR      R0,[SP, #+56]
   \   000001A2   0x.... 0x....      BL       __aeabi_fadd
   \   000001A6   0xF05F 0x4180      MOVS     R1,#+1073741824
   \   000001AA   0x.... 0x....      BL       __aeabi_fmul
   \   000001AE   0x900B             STR      R0,[SP, #+44]
    167            vz = q0q0 - q1q1 - q2q2 + q3q3;
   \   000001B0   0x9814             LDR      R0,[SP, #+80]
   \   000001B2   0x9911             LDR      R1,[SP, #+68]
   \   000001B4   0x.... 0x....      BL       __aeabi_fsub
   \   000001B8   0x990F             LDR      R1,[SP, #+60]
   \   000001BA   0x.... 0x....      BL       __aeabi_fsub
   \   000001BE   0x990D             LDR      R1,[SP, #+52]
   \   000001C0   0x.... 0x....      BL       __aeabi_fadd
   \   000001C4   0x900A             STR      R0,[SP, #+40]
    168            //wx = 2*bx*(0.5 - q2q2 - q3q3) + 2*bz*(q1q3 - q0q2);
    169            //wy = 2*bx*(q1q2 - q0q3) + 2*bz*(q0q1 + q2q3);
    170            //wz = 2*bx*(q0q2 + q1q3) + 2*bz*(0.5 - q1q1 - q2q2);  
    171            
    172            // error is sum of cross product between reference direction of fields and direction measured by sensors
    173            ex = (ay*vz - az*vy); //+ (my*wz - mz*wy);
   \   000001C6   0x980A             LDR      R0,[SP, #+40]
   \   000001C8   0x0029             MOVS     R1,R5
   \   000001CA   0x.... 0x....      BL       __aeabi_fmul
   \   000001CE   0x4682             MOV      R10,R0
   \   000001D0   0x980B             LDR      R0,[SP, #+44]
   \   000001D2   0x0031             MOVS     R1,R6
   \   000001D4   0x.... 0x....      BL       __aeabi_fmul
   \   000001D8   0x0001             MOVS     R1,R0
   \   000001DA   0x4650             MOV      R0,R10
   \   000001DC   0x.... 0x....      BL       __aeabi_fsub
   \   000001E0   0x9009             STR      R0,[SP, #+36]
    174            ey = (az*vx - ax*vz); //+ (mz*wx - mx*wz);
   \   000001E2   0x980C             LDR      R0,[SP, #+48]
   \   000001E4   0x0031             MOVS     R1,R6
   \   000001E6   0x.... 0x....      BL       __aeabi_fmul
   \   000001EA   0x4682             MOV      R10,R0
   \   000001EC   0x980A             LDR      R0,[SP, #+40]
   \   000001EE   0x0021             MOVS     R1,R4
   \   000001F0   0x.... 0x....      BL       __aeabi_fmul
   \   000001F4   0x0001             MOVS     R1,R0
   \   000001F6   0x4650             MOV      R0,R10
   \   000001F8   0x.... 0x....      BL       __aeabi_fsub
   \   000001FC   0x9008             STR      R0,[SP, #+32]
    175            ez = (ax*vy - ay*vx); //+ (mx*wy - my*wx);
   \   000001FE   0x980B             LDR      R0,[SP, #+44]
   \   00000200   0x0021             MOVS     R1,R4
   \   00000202   0x.... 0x....      BL       __aeabi_fmul
   \   00000206   0x4682             MOV      R10,R0
   \   00000208   0x980C             LDR      R0,[SP, #+48]
   \   0000020A   0x0029             MOVS     R1,R5
   \   0000020C   0x.... 0x....      BL       __aeabi_fmul
   \   00000210   0x0001             MOVS     R1,R0
   \   00000212   0x4650             MOV      R0,R10
   \   00000214   0x.... 0x....      BL       __aeabi_fsub
   \   00000218   0x9007             STR      R0,[SP, #+28]
    176          
    177          if(ex != 0.0f && ey != 0.0f && ez != 0.0f){
   \   0000021A   0x9809             LDR      R0,[SP, #+36]
   \   0000021C   0x2100             MOVS     R1,#+0
   \   0000021E   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000222   0xD063             BEQ.N    ??IMU_AHRSupdate_2
   \   00000224   0x9808             LDR      R0,[SP, #+32]
   \   00000226   0x2100             MOVS     R1,#+0
   \   00000228   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   0000022C   0xD05E             BEQ.N    ??IMU_AHRSupdate_2
   \   0000022E   0x9807             LDR      R0,[SP, #+28]
   \   00000230   0x2100             MOVS     R1,#+0
   \   00000232   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000236   0xD059             BEQ.N    ??IMU_AHRSupdate_2
    178            exInt = exInt + ex * Ki * halfT;
   \   00000238   0x9909             LDR      R1,[SP, #+36]
   \   0000023A   0x.... 0x....      LDR.W    R0,??DataTable5_14  ;; 0x3c23d70a
   \   0000023E   0x.... 0x....      BL       __aeabi_fmul
   \   00000242   0x9901             LDR      R1,[SP, #+4]
   \   00000244   0x.... 0x....      BL       __aeabi_fmul
   \   00000248   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   0000024C   0x6809             LDR      R1,[R1, #+0]
   \   0000024E   0x.... 0x....      BL       __aeabi_fadd
   \   00000252   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   00000256   0x6008             STR      R0,[R1, #+0]
    179            eyInt = eyInt + ey * Ki * halfT;	
   \   00000258   0x9908             LDR      R1,[SP, #+32]
   \   0000025A   0x.... 0x....      LDR.W    R0,??DataTable5_14  ;; 0x3c23d70a
   \   0000025E   0x.... 0x....      BL       __aeabi_fmul
   \   00000262   0x9901             LDR      R1,[SP, #+4]
   \   00000264   0x.... 0x....      BL       __aeabi_fmul
   \   00000268   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   0000026C   0x6809             LDR      R1,[R1, #+0]
   \   0000026E   0x.... 0x....      BL       __aeabi_fadd
   \   00000272   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   00000276   0x6008             STR      R0,[R1, #+0]
    180            ezInt = ezInt + ez * Ki * halfT;
   \   00000278   0x9907             LDR      R1,[SP, #+28]
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable5_14  ;; 0x3c23d70a
   \   0000027E   0x.... 0x....      BL       __aeabi_fmul
   \   00000282   0x9901             LDR      R1,[SP, #+4]
   \   00000284   0x.... 0x....      BL       __aeabi_fmul
   \   00000288   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   0000028C   0x6809             LDR      R1,[R1, #+0]
   \   0000028E   0x.... 0x....      BL       __aeabi_fadd
   \   00000292   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   00000296   0x6008             STR      R0,[R1, #+0]
    181          
    182            // 用叉积误差来做PI修正陀螺零偏
    183            gx = gx + Kp*ex + exInt;
   \   00000298   0x9909             LDR      R1,[SP, #+36]
   \   0000029A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000029E   0x.... 0x....      BL       __aeabi_fmul
   \   000002A2   0x0039             MOVS     R1,R7
   \   000002A4   0x.... 0x....      BL       __aeabi_fadd
   \   000002A8   0x.... 0x....      LDR.W    R1,??DataTable5_5
   \   000002AC   0x6809             LDR      R1,[R1, #+0]
   \   000002AE   0x.... 0x....      BL       __aeabi_fadd
   \   000002B2   0x0007             MOVS     R7,R0
    184            gy = gy + Kp*ey + eyInt;
   \   000002B4   0x9908             LDR      R1,[SP, #+32]
   \   000002B6   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000002BA   0x.... 0x....      BL       __aeabi_fmul
   \   000002BE   0x4641             MOV      R1,R8
   \   000002C0   0x.... 0x....      BL       __aeabi_fadd
   \   000002C4   0x.... 0x....      LDR.W    R1,??DataTable5_6
   \   000002C8   0x6809             LDR      R1,[R1, #+0]
   \   000002CA   0x.... 0x....      BL       __aeabi_fadd
   \   000002CE   0x4680             MOV      R8,R0
    185            gz = gz + Kp*ez + ezInt;
   \   000002D0   0x9907             LDR      R1,[SP, #+28]
   \   000002D2   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000002D6   0x.... 0x....      BL       __aeabi_fmul
   \   000002DA   0x4649             MOV      R1,R9
   \   000002DC   0x.... 0x....      BL       __aeabi_fadd
   \   000002E0   0x.... 0x....      LDR.W    R1,??DataTable5_7
   \   000002E4   0x6809             LDR      R1,[R1, #+0]
   \   000002E6   0x.... 0x....      BL       __aeabi_fadd
   \   000002EA   0x4681             MOV      R9,R0
    186          
    187            }
    188          
    189            // 四元数微分方程
    190            tempq0 = q0 + (-q1*gx - q2*gy - q3*gz)*halfT;   //volatile类型变量一般不直接参与运算,
   \                     ??IMU_AHRSupdate_2: (+1)
   \   000002EC   0x.... 0x....      LDR.W    R0,??DataTable5_1
   \   000002F0   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   000002F4   0x.... 0x....      LDR.W    R0,??DataTable5_2
   \   000002F8   0x6800             LDR      R0,[R0, #+0]
   \   000002FA   0x.... 0x....      LDR.W    R1,??DataTable5_3
   \   000002FE   0xF8D1 0xB000      LDR      R11,[R1, #+0]
   \   00000302   0xF090 0x4000      EORS     R0,R0,#0x80000000
   \   00000306   0x0039             MOVS     R1,R7
   \   00000308   0x.... 0x....      BL       __aeabi_fmul
   \   0000030C   0x9000             STR      R0,[SP, #+0]
   \   0000030E   0x4658             MOV      R0,R11
   \   00000310   0x4641             MOV      R1,R8
   \   00000312   0x.... 0x....      BL       __aeabi_fmul
   \   00000316   0x0001             MOVS     R1,R0
   \   00000318   0x9800             LDR      R0,[SP, #+0]
   \   0000031A   0x.... 0x....      BL       __aeabi_fsub
   \   0000031E   0x4683             MOV      R11,R0
   \   00000320   0x.... 0x....      LDR.W    R0,??DataTable5_4
   \   00000324   0x6800             LDR      R0,[R0, #+0]
   \   00000326   0x4649             MOV      R1,R9
   \   00000328   0x.... 0x....      BL       __aeabi_fmul
   \   0000032C   0x0001             MOVS     R1,R0
   \   0000032E   0x4658             MOV      R0,R11
   \   00000330   0x.... 0x....      BL       __aeabi_fsub
   \   00000334   0x9901             LDR      R1,[SP, #+4]
   \   00000336   0x.... 0x....      BL       __aeabi_fmul
   \   0000033A   0x4651             MOV      R1,R10
   \   0000033C   0x.... 0x....      BL       __aeabi_fadd
   \   00000340   0x9006             STR      R0,[SP, #+24]
    191            tempq1 = q1 + (q0*gx + q2*gz - q3*gy)*halfT;    //可以尝试赋值给局部变量后进行运算.
   \   00000342   0x....             LDR.N    R0,??DataTable5_2
   \   00000344   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   00000348   0x....             LDR.N    R0,??DataTable5_1
   \   0000034A   0x6800             LDR      R0,[R0, #+0]
   \   0000034C   0x....             LDR.N    R1,??DataTable5_3
   \   0000034E   0xF8D1 0xB000      LDR      R11,[R1, #+0]
   \   00000352   0x0039             MOVS     R1,R7
   \   00000354   0x.... 0x....      BL       __aeabi_fmul
   \   00000358   0x9000             STR      R0,[SP, #+0]
   \   0000035A   0x4658             MOV      R0,R11
   \   0000035C   0x4649             MOV      R1,R9
   \   0000035E   0x.... 0x....      BL       __aeabi_fmul
   \   00000362   0x9900             LDR      R1,[SP, #+0]
   \   00000364   0x.... 0x....      BL       __aeabi_fadd
   \   00000368   0x4683             MOV      R11,R0
   \   0000036A   0x....             LDR.N    R0,??DataTable5_4
   \   0000036C   0x6800             LDR      R0,[R0, #+0]
   \   0000036E   0x4641             MOV      R1,R8
   \   00000370   0x.... 0x....      BL       __aeabi_fmul
   \   00000374   0x0001             MOVS     R1,R0
   \   00000376   0x4658             MOV      R0,R11
   \   00000378   0x.... 0x....      BL       __aeabi_fsub
   \   0000037C   0x9901             LDR      R1,[SP, #+4]
   \   0000037E   0x.... 0x....      BL       __aeabi_fmul
   \   00000382   0x4651             MOV      R1,R10
   \   00000384   0x.... 0x....      BL       __aeabi_fadd
   \   00000388   0x9005             STR      R0,[SP, #+20]
    192            tempq2 = q2 + (q0*gy - q1*gz + q3*gx)*halfT;
   \   0000038A   0x....             LDR.N    R0,??DataTable5_3
   \   0000038C   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   00000390   0x....             LDR.N    R0,??DataTable5_1
   \   00000392   0x6800             LDR      R0,[R0, #+0]
   \   00000394   0x....             LDR.N    R1,??DataTable5_2
   \   00000396   0xF8D1 0xB000      LDR      R11,[R1, #+0]
   \   0000039A   0x4641             MOV      R1,R8
   \   0000039C   0x.... 0x....      BL       __aeabi_fmul
   \   000003A0   0x9000             STR      R0,[SP, #+0]
   \   000003A2   0x4658             MOV      R0,R11
   \   000003A4   0x4649             MOV      R1,R9
   \   000003A6   0x.... 0x....      BL       __aeabi_fmul
   \   000003AA   0x0001             MOVS     R1,R0
   \   000003AC   0x9800             LDR      R0,[SP, #+0]
   \   000003AE   0x.... 0x....      BL       __aeabi_fsub
   \   000003B2   0x4683             MOV      R11,R0
   \   000003B4   0x....             LDR.N    R0,??DataTable5_4
   \   000003B6   0x6800             LDR      R0,[R0, #+0]
   \   000003B8   0x0039             MOVS     R1,R7
   \   000003BA   0x.... 0x....      BL       __aeabi_fmul
   \   000003BE   0x4659             MOV      R1,R11
   \   000003C0   0x.... 0x....      BL       __aeabi_fadd
   \   000003C4   0x9901             LDR      R1,[SP, #+4]
   \   000003C6   0x.... 0x....      BL       __aeabi_fmul
   \   000003CA   0x4651             MOV      R1,R10
   \   000003CC   0x.... 0x....      BL       __aeabi_fadd
   \   000003D0   0x9004             STR      R0,[SP, #+16]
    193            tempq3 = q3 + (q0*gz + q1*gy - q2*gx)*halfT;  
   \   000003D2   0x....             LDR.N    R0,??DataTable5_4
   \   000003D4   0xF8D0 0xA000      LDR      R10,[R0, #+0]
   \   000003D8   0x....             LDR.N    R0,??DataTable5_1
   \   000003DA   0x6800             LDR      R0,[R0, #+0]
   \   000003DC   0x....             LDR.N    R1,??DataTable5_2
   \   000003DE   0xF8D1 0xB000      LDR      R11,[R1, #+0]
   \   000003E2   0x4649             MOV      R1,R9
   \   000003E4   0x.... 0x....      BL       __aeabi_fmul
   \   000003E8   0x9000             STR      R0,[SP, #+0]
   \   000003EA   0x4658             MOV      R0,R11
   \   000003EC   0x4641             MOV      R1,R8
   \   000003EE   0x.... 0x....      BL       __aeabi_fmul
   \   000003F2   0x9900             LDR      R1,[SP, #+0]
   \   000003F4   0x.... 0x....      BL       __aeabi_fadd
   \   000003F8   0x4683             MOV      R11,R0
   \   000003FA   0x....             LDR.N    R0,??DataTable5_3
   \   000003FC   0x6800             LDR      R0,[R0, #+0]
   \   000003FE   0x0039             MOVS     R1,R7
   \   00000400   0x.... 0x....      BL       __aeabi_fmul
   \   00000404   0x0001             MOVS     R1,R0
   \   00000406   0x4658             MOV      R0,R11
   \   00000408   0x.... 0x....      BL       __aeabi_fsub
   \   0000040C   0x9901             LDR      R1,[SP, #+4]
   \   0000040E   0x.... 0x....      BL       __aeabi_fmul
   \   00000412   0x4651             MOV      R1,R10
   \   00000414   0x.... 0x....      BL       __aeabi_fadd
   \   00000418   0x9003             STR      R0,[SP, #+12]
    194            
    195            // 四元数规范化
    196            norm = invSqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
   \   0000041A   0x9906             LDR      R1,[SP, #+24]
   \   0000041C   0x9806             LDR      R0,[SP, #+24]
   \   0000041E   0x.... 0x....      BL       __aeabi_fmul
   \   00000422   0x4682             MOV      R10,R0
   \   00000424   0x9905             LDR      R1,[SP, #+20]
   \   00000426   0x9805             LDR      R0,[SP, #+20]
   \   00000428   0x.... 0x....      BL       __aeabi_fmul
   \   0000042C   0x4651             MOV      R1,R10
   \   0000042E   0x.... 0x....      BL       __aeabi_fadd
   \   00000432   0x4682             MOV      R10,R0
   \   00000434   0x9904             LDR      R1,[SP, #+16]
   \   00000436   0x9804             LDR      R0,[SP, #+16]
   \   00000438   0x.... 0x....      BL       __aeabi_fmul
   \   0000043C   0x4651             MOV      R1,R10
   \   0000043E   0x.... 0x....      BL       __aeabi_fadd
   \   00000442   0x4682             MOV      R10,R0
   \   00000444   0x9903             LDR      R1,[SP, #+12]
   \   00000446   0x9803             LDR      R0,[SP, #+12]
   \   00000448   0x.... 0x....      BL       __aeabi_fmul
   \   0000044C   0x4651             MOV      R1,R10
   \   0000044E   0x.... 0x....      BL       __aeabi_fadd
   \   00000452   0x.... 0x....      BL       invSqrt
   \   00000456   0x9002             STR      R0,[SP, #+8]
    197            q0 = tempq0 * norm;
   \   00000458   0x9906             LDR      R1,[SP, #+24]
   \   0000045A   0x9802             LDR      R0,[SP, #+8]
   \   0000045C   0x.... 0x....      BL       __aeabi_fmul
   \   00000460   0x....             LDR.N    R1,??DataTable5_1
   \   00000462   0x6008             STR      R0,[R1, #+0]
    198            q1 = tempq1 * norm;
   \   00000464   0x9905             LDR      R1,[SP, #+20]
   \   00000466   0x9802             LDR      R0,[SP, #+8]
   \   00000468   0x.... 0x....      BL       __aeabi_fmul
   \   0000046C   0x....             LDR.N    R1,??DataTable5_2
   \   0000046E   0x6008             STR      R0,[R1, #+0]
    199            q2 = tempq2 * norm;
   \   00000470   0x9904             LDR      R1,[SP, #+16]
   \   00000472   0x9802             LDR      R0,[SP, #+8]
   \   00000474   0x.... 0x....      BL       __aeabi_fmul
   \   00000478   0x....             LDR.N    R1,??DataTable5_3
   \   0000047A   0x6008             STR      R0,[R1, #+0]
    200            q3 = tempq3 * norm;
   \   0000047C   0x9903             LDR      R1,[SP, #+12]
   \   0000047E   0x9802             LDR      R0,[SP, #+8]
   \   00000480   0x.... 0x....      BL       __aeabi_fmul
   \   00000484   0x....             LDR.N    R1,??DataTable5_4
   \   00000486   0x6008             STR      R0,[R1, #+0]
    201          }
   \   00000488   0xB017             ADD      SP,SP,#+92
   \   0000048A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    202          
    203          /**************************实现函数********************************************
    204          *函数原型:	   void IMU_getQ(float * q)
    205          *功　　能:	 更新四元数 返回当前的四元数组值
    206          输入参数： 将要存放四元数的数组首地址
    207          输出参数：没有
    208          *******************************************************************************/

   \                                 In section .bss, align 4
    209          float mygetqval[9];	//用于存放传感器转换结果的数组
   \                     mygetqval:
   \   00000000                      DS8 36

   \                                 In section .text, align 2, keep-with-next
    210          void IMU_getQ(float * q) {
   \                     IMU_getQ: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
    211          
    212            IMU_getValues(mygetqval);	 
   \   00000006   0x....             LDR.N    R0,??DataTable5_15
   \   00000008   0x.... 0x....      BL       IMU_getValues
    213            //将陀螺仪的测量值转成弧度每秒
    214            //加速度和磁力计保持 ADC值　不需要转换
    215          IMU_AHRSupdate(mygetqval[3] * M_PI/180, mygetqval[4] * M_PI/180, mygetqval[5] * M_PI/180,
    216             mygetqval[0], mygetqval[1], mygetqval[2], mygetqval[6], mygetqval[7], mygetqval[8]);
   \   0000000C   0x....             LDR.N    R0,??DataTable5_15
   \   0000000E   0x6A00             LDR      R0,[R0, #+32]
   \   00000010   0x9004             STR      R0,[SP, #+16]
   \   00000012   0x....             LDR.N    R0,??DataTable5_15
   \   00000014   0x69C0             LDR      R0,[R0, #+28]
   \   00000016   0x9003             STR      R0,[SP, #+12]
   \   00000018   0x....             LDR.N    R0,??DataTable5_15
   \   0000001A   0x6980             LDR      R0,[R0, #+24]
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x....             LDR.N    R0,??DataTable5_15
   \   00000020   0x6880             LDR      R0,[R0, #+8]
   \   00000022   0x9001             STR      R0,[SP, #+4]
   \   00000024   0x....             LDR.N    R0,??DataTable5_15
   \   00000026   0x6840             LDR      R0,[R0, #+4]
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x....             LDR.N    R0,??DataTable5_15
   \   0000002C   0x6803             LDR      R3,[R0, #+0]
   \   0000002E   0x001D             MOVS     R5,R3
   \   00000030   0x....             LDR.N    R0,??DataTable5_15
   \   00000032   0x6941             LDR      R1,[R0, #+20]
   \   00000034   0x....             LDR.N    R0,??DataTable5_16  ;; 0x40490fdb
   \   00000036   0x.... 0x....      BL       __aeabi_fmul
   \   0000003A   0x....             LDR.N    R1,??DataTable5_17  ;; 0x43340000
   \   0000003C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000040   0x0002             MOVS     R2,R0
   \   00000042   0x002B             MOVS     R3,R5
   \   00000044   0x0015             MOVS     R5,R2
   \   00000046   0x001E             MOVS     R6,R3
   \   00000048   0x....             LDR.N    R0,??DataTable5_15
   \   0000004A   0x6901             LDR      R1,[R0, #+16]
   \   0000004C   0x....             LDR.N    R0,??DataTable5_16  ;; 0x40490fdb
   \   0000004E   0x.... 0x....      BL       __aeabi_fmul
   \   00000052   0x....             LDR.N    R1,??DataTable5_17  ;; 0x43340000
   \   00000054   0x.... 0x....      BL       __aeabi_fdiv
   \   00000058   0x0001             MOVS     R1,R0
   \   0000005A   0x0033             MOVS     R3,R6
   \   0000005C   0x002A             MOVS     R2,R5
   \   0000005E   0x000D             MOVS     R5,R1
   \   00000060   0x0016             MOVS     R6,R2
   \   00000062   0x001F             MOVS     R7,R3
   \   00000064   0x....             LDR.N    R0,??DataTable5_15
   \   00000066   0x68C1             LDR      R1,[R0, #+12]
   \   00000068   0x....             LDR.N    R0,??DataTable5_16  ;; 0x40490fdb
   \   0000006A   0x.... 0x....      BL       __aeabi_fmul
   \   0000006E   0x....             LDR.N    R1,??DataTable5_17  ;; 0x43340000
   \   00000070   0x.... 0x....      BL       __aeabi_fdiv
   \   00000074   0x003B             MOVS     R3,R7
   \   00000076   0x0032             MOVS     R2,R6
   \   00000078   0x0029             MOVS     R1,R5
   \   0000007A   0x.... 0x....      BL       IMU_AHRSupdate
    217          
    218            q[0] = q0; //返回当前值
   \   0000007E   0x....             LDR.N    R0,??DataTable5_1
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x6020             STR      R0,[R4, #+0]
    219            q[1] = q1;
   \   00000084   0x....             LDR.N    R0,??DataTable5_2
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x6060             STR      R0,[R4, #+4]
    220            q[2] = q2;
   \   0000008A   0x....             LDR.N    R0,??DataTable5_3
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x60A0             STR      R0,[R4, #+8]
    221            q[3] = q3;
   \   00000090   0x....             LDR.N    R0,??DataTable5_4
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x60E0             STR      R0,[R4, #+12]
    222          }
   \   00000096   0xB005             ADD      SP,SP,#+20
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
    223          
    224          
    225          /**************************实现函数********************************************
    226          *函数原型:	   void IMU_getYawPitchRoll(float * angles)
    227          *功　　能:	 更新四元数 返回当前解算后的姿态数据
    228          输入参数： 将要存放姿态角的数组首地址
    229          输出参数：没有
    230          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    231          void IMU_getYawPitchRoll(float * angles) {
   \                     IMU_getYawPitchRoll: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0006             MOVS     R6,R0
    232            float q[4]; //　四元数
    233            volatile float gx=0.0, gy=0.0, gz=0.0; //估计重力方向
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9006             STR      R0,[SP, #+24]
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9005             STR      R0,[SP, #+20]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9004             STR      R0,[SP, #+16]
    234            IMU_getQ(q); //更新全局四元数
   \   00000012   0xA800             ADD      R0,SP,#+0
   \   00000014   0x.... 0x....      BL       IMU_getQ
    235            
    236            angles[0] = -atan2(2 * q[1] * q[2] + 2 * q[0] * q[3], -2 * q[2]*q[2] - 2 * q[3] * q[3] + 1)* 180/M_PI; // yaw
   \   00000018   0x9902             LDR      R1,[SP, #+8]
   \   0000001A   0xF05F 0x4040      MOVS     R0,#-1073741824
   \   0000001E   0x.... 0x....      BL       __aeabi_fmul
   \   00000022   0x9902             LDR      R1,[SP, #+8]
   \   00000024   0x.... 0x....      BL       __aeabi_fmul
   \   00000028   0x0004             MOVS     R4,R0
   \   0000002A   0x9903             LDR      R1,[SP, #+12]
   \   0000002C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000030   0x.... 0x....      BL       __aeabi_fmul
   \   00000034   0x9903             LDR      R1,[SP, #+12]
   \   00000036   0x.... 0x....      BL       __aeabi_fmul
   \   0000003A   0x0001             MOVS     R1,R0
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0x.... 0x....      BL       __aeabi_fsub
   \   00000042   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000046   0x.... 0x....      BL       __aeabi_fadd
   \   0000004A   0x.... 0x....      BL       __aeabi_f2d
   \   0000004E   0x0002             MOVS     R2,R0
   \   00000050   0x000B             MOVS     R3,R1
   \   00000052   0x0014             MOVS     R4,R2
   \   00000054   0x001D             MOVS     R5,R3
   \   00000056   0x9901             LDR      R1,[SP, #+4]
   \   00000058   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000005C   0x.... 0x....      BL       __aeabi_fmul
   \   00000060   0x9902             LDR      R1,[SP, #+8]
   \   00000062   0x.... 0x....      BL       __aeabi_fmul
   \   00000066   0x0007             MOVS     R7,R0
   \   00000068   0x9900             LDR      R1,[SP, #+0]
   \   0000006A   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000006E   0x.... 0x....      BL       __aeabi_fmul
   \   00000072   0x9903             LDR      R1,[SP, #+12]
   \   00000074   0x.... 0x....      BL       __aeabi_fmul
   \   00000078   0x0039             MOVS     R1,R7
   \   0000007A   0x.... 0x....      BL       __aeabi_fadd
   \   0000007E   0x.... 0x....      BL       __aeabi_f2d
   \   00000082   0x0022             MOVS     R2,R4
   \   00000084   0x002B             MOVS     R3,R5
   \   00000086   0x.... 0x....      BL       atan2
   \   0000008A   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   0000008E   0x2200             MOVS     R2,#+0
   \   00000090   0x....             LDR.N    R3,??DataTable5_18  ;; 0x40668000
   \   00000092   0x.... 0x....      BL       __aeabi_dmul
   \   00000096   0xF05F 0x42C0      MOVS     R2,#+1610612736
   \   0000009A   0x....             LDR.N    R3,??DataTable5_19  ;; 0x400921fb
   \   0000009C   0x.... 0x....      BL       __aeabi_ddiv
   \   000000A0   0x.... 0x....      BL       __aeabi_d2f
   \   000000A4   0x6030             STR      R0,[R6, #+0]
    237            angles[1] = -asin(-2 * q[1] * q[3] + 2 * q[0] * q[2])* 180/M_PI; // pitch
   \   000000A6   0x9901             LDR      R1,[SP, #+4]
   \   000000A8   0xF05F 0x4040      MOVS     R0,#-1073741824
   \   000000AC   0x.... 0x....      BL       __aeabi_fmul
   \   000000B0   0x9903             LDR      R1,[SP, #+12]
   \   000000B2   0x.... 0x....      BL       __aeabi_fmul
   \   000000B6   0x0004             MOVS     R4,R0
   \   000000B8   0x9900             LDR      R1,[SP, #+0]
   \   000000BA   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   000000BE   0x.... 0x....      BL       __aeabi_fmul
   \   000000C2   0x9902             LDR      R1,[SP, #+8]
   \   000000C4   0x.... 0x....      BL       __aeabi_fmul
   \   000000C8   0x0021             MOVS     R1,R4
   \   000000CA   0x.... 0x....      BL       __aeabi_fadd
   \   000000CE   0x.... 0x....      BL       __aeabi_f2d
   \   000000D2   0x.... 0x....      BL       asin
   \   000000D6   0xF091 0x4100      EORS     R1,R1,#0x80000000
   \   000000DA   0x2200             MOVS     R2,#+0
   \   000000DC   0x....             LDR.N    R3,??DataTable5_18  ;; 0x40668000
   \   000000DE   0x.... 0x....      BL       __aeabi_dmul
   \   000000E2   0xF05F 0x42C0      MOVS     R2,#+1610612736
   \   000000E6   0x....             LDR.N    R3,??DataTable5_19  ;; 0x400921fb
   \   000000E8   0x.... 0x....      BL       __aeabi_ddiv
   \   000000EC   0x.... 0x....      BL       __aeabi_d2f
   \   000000F0   0x6070             STR      R0,[R6, #+4]
    238            angles[2] = atan2(2 * q[2] * q[3] + 2 * q[0] * q[1], -2 * q[1] * q[1] - 2 * q[2] * q[2] + 1)* 180/M_PI; // roll
   \   000000F2   0x9901             LDR      R1,[SP, #+4]
   \   000000F4   0xF05F 0x4040      MOVS     R0,#-1073741824
   \   000000F8   0x.... 0x....      BL       __aeabi_fmul
   \   000000FC   0x9901             LDR      R1,[SP, #+4]
   \   000000FE   0x.... 0x....      BL       __aeabi_fmul
   \   00000102   0x0004             MOVS     R4,R0
   \   00000104   0x9902             LDR      R1,[SP, #+8]
   \   00000106   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000010A   0x.... 0x....      BL       __aeabi_fmul
   \   0000010E   0x9902             LDR      R1,[SP, #+8]
   \   00000110   0x.... 0x....      BL       __aeabi_fmul
   \   00000114   0x0001             MOVS     R1,R0
   \   00000116   0x0020             MOVS     R0,R4
   \   00000118   0x.... 0x....      BL       __aeabi_fsub
   \   0000011C   0xF05F 0x517E      MOVS     R1,#+1065353216
   \   00000120   0x.... 0x....      BL       __aeabi_fadd
   \   00000124   0x.... 0x....      BL       __aeabi_f2d
   \   00000128   0x0002             MOVS     R2,R0
   \   0000012A   0x000B             MOVS     R3,R1
   \   0000012C   0x0014             MOVS     R4,R2
   \   0000012E   0x001D             MOVS     R5,R3
   \   00000130   0x9902             LDR      R1,[SP, #+8]
   \   00000132   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000136   0x.... 0x....      BL       __aeabi_fmul
   \   0000013A   0x9903             LDR      R1,[SP, #+12]
   \   0000013C   0x.... 0x....      BL       __aeabi_fmul
   \   00000140   0x0007             MOVS     R7,R0
   \   00000142   0x9900             LDR      R1,[SP, #+0]
   \   00000144   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000148   0x.... 0x....      BL       __aeabi_fmul
   \   0000014C   0x9901             LDR      R1,[SP, #+4]
   \   0000014E   0x.... 0x....      BL       __aeabi_fmul
   \   00000152   0x0039             MOVS     R1,R7
   \   00000154   0x.... 0x....      BL       __aeabi_fadd
   \   00000158   0x.... 0x....      BL       __aeabi_f2d
   \   0000015C   0x0022             MOVS     R2,R4
   \   0000015E   0x002B             MOVS     R3,R5
   \   00000160   0x.... 0x....      BL       atan2
   \   00000164   0x2200             MOVS     R2,#+0
   \   00000166   0x....             LDR.N    R3,??DataTable5_18  ;; 0x40668000
   \   00000168   0x.... 0x....      BL       __aeabi_dmul
   \   0000016C   0xF05F 0x42C0      MOVS     R2,#+1610612736
   \   00000170   0x....             LDR.N    R3,??DataTable5_19  ;; 0x400921fb
   \   00000172   0x.... 0x....      BL       __aeabi_ddiv
   \   00000176   0x.... 0x....      BL       __aeabi_d2f
   \   0000017A   0x60B0             STR      R0,[R6, #+8]
    239            //if(angles[0]<0)angles[0]+=360.0f;  //将 -+180度  转成0-360度
    240          }
   \   0000017C   0xB007             ADD      SP,SP,#+28
   \   0000017E   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x5F3759DF         DC32     0x5f3759df

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     q0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     q1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     q2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     q3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     exInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     eyInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     ezInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     bus_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     lastUpdate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x........         DC32     now

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x42033333         DC32     0x42033333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x04444444         DC32     0x4444444

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x49D59F80         DC32     0x49d59f80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x3C23D70A         DC32     0x3c23d70a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x........         DC32     mygetqval

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x40490FDB         DC32     0x40490fdb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x43340000         DC32     0x43340000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x40668000         DC32     0x40668000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x400921FB         DC32     0x400921fb
    241          
    242          //------------------End of File----------------------------

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     128   IMU_AHRSupdate
       128   -> __aeabi_fadd
       128   -> __aeabi_fdiv
       128   -> __aeabi_fmul
       128   -> __aeabi_fsub
       128   -> __aeabi_ui2f
       128   -> invSqrt
       128   -> pit_time_get
       128 __aeabi_cfcmpeq
      40   IMU_getQ
        40   -> IMU_AHRSupdate
        40   -> IMU_getValues
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
      32   IMU_getValues
        32   -> MPU6050_getMotion6
        32   -> __aeabi_fdiv
        32   -> __aeabi_i2f
      48   IMU_getYawPitchRoll
        48   -> IMU_getQ
        48   -> __aeabi_d2f
        48   -> __aeabi_ddiv
        48   -> __aeabi_dmul
        48   -> __aeabi_f2d
        48   -> __aeabi_fadd
        48   -> __aeabi_fmul
        48   -> __aeabi_fsub
        48   -> asin
        48   -> atan2
       8   IMU_init
         8   -> MPU6050_initialize
         8   -> pit_time_get
         8   -> pit_time_start
         8   -> systick_delay_ms
      24   invSqrt
        24   -> __aeabi_fmul
        24   -> __aeabi_fsub


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
    1166  IMU_AHRSupdate
     154  IMU_getQ
      90  IMU_getValues
     384  IMU_getYawPitchRoll
     148  IMU_init
       4  exInt
       4  eyInt
       4  ezInt
       4  handdiff
       4  integralFBhand
      66  invSqrt
       4  lastUpdate
      36  mygetqval
       4  now
       4  q0
       4  q1
       4  q2
       4  q3

 
    80 bytes in section .bss
 2 088 bytes in section .text
 
 2 088 bytes of CODE memory
    80 bytes of DATA memory

Errors: none
Warnings: 25
