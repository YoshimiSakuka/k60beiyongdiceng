###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_DWT.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_DWT.c -D DEBUG
#        -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_DWT.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_DWT.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_DWT.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_dwt.h
     11           * @brief      flash函数库
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-10-22
     15           */
     16          
     17          #include "common.h"
     18          
     19          #define  DWT_CLK_HHZ                        (core_clk_khz )
     20          #define  DEM_CR_TRCENA_MASK                 (1 << 24)
     21          #define  DWT_CTRL_CYCCNTENA                 (1 <<  0)
     22          
     23          /*!
     24           *  @brief      延时(us)
     25           *  @param      us      延时时间
     26           *  @since      v5.0
     27           */

   \                                 In section .text, align 2, keep-with-next
     28          void dwt_delay_us(uint32 us)
     29          {
   \                     dwt_delay_us: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     30              uint32 st,et,ts;
     31              DEMCR            |=  DEM_CR_TRCENA_MASK;        //使能 调试时钟 （默认已经打开）
   \   00000002   0x....             LDR.N    R4,??DataTable0  ;; 0xe000edfc
   \   00000004   0x6824             LDR      R4,[R4, #+0]
   \   00000006   0xF054 0x7480      ORRS     R4,R4,#0x1000000
   \   0000000A   0x....             LDR.N    R5,??DataTable0  ;; 0xe000edfc
   \   0000000C   0x602C             STR      R4,[R5, #+0]
     32              DWT_CTRL         |=  DWT_CTRL_CYCCNTENA;
   \   0000000E   0x....             LDR.N    R4,??DataTable0_1  ;; 0xe0001000
   \   00000010   0x6824             LDR      R4,[R4, #+0]
   \   00000012   0xF054 0x0401      ORRS     R4,R4,#0x1
   \   00000016   0x....             LDR.N    R5,??DataTable0_1  ;; 0xe0001000
   \   00000018   0x602C             STR      R4,[R5, #+0]
     33          
     34              st = DWT_CYCCNT;
   \   0000001A   0x....             LDR.N    R4,??DataTable0_2  ;; 0xe0001004
   \   0000001C   0x6824             LDR      R4,[R4, #+0]
   \   0000001E   0x0021             MOVS     R1,R4
     35              ts =  us * (DWT_CLK_HHZ /(1000));
   \   00000020   0x....             LDR.N    R4,??DataTable0_3
   \   00000022   0x6824             LDR      R4,[R4, #+0]
   \   00000024   0xF44F 0x757A      MOV      R5,#+1000
   \   00000028   0xFB94 0xF4F5      SDIV     R4,R4,R5
   \   0000002C   0xFB04 0xF400      MUL      R4,R4,R0
   \   00000030   0x0023             MOVS     R3,R4
     36              et = st + ts;
   \   00000032   0x185C             ADDS     R4,R3,R1
   \   00000034   0x0022             MOVS     R2,R4
     37              if(et < st)
   \   00000036   0x428A             CMP      R2,R1
   \   00000038   0xD203             BCS.N    ??dwt_delay_us_0
     38              {
     39                  //溢出，需要转动一周
     40                  while(DWT_CYCCNT > et);      //等待 DWT_CYCCNT 溢出 返回0
   \                     ??dwt_delay_us_1: (+1)
   \   0000003A   0x....             LDR.N    R4,??DataTable0_2  ;; 0xe0001004
   \   0000003C   0x6824             LDR      R4,[R4, #+0]
   \   0000003E   0x42A2             CMP      R2,R4
   \   00000040   0xD3FB             BCC.N    ??dwt_delay_us_1
     41              }
     42          
     43              while(DWT_CYCCNT < et);      //等待 DWT_CYCCNT 到底计数值
   \                     ??dwt_delay_us_0: (+1)
   \   00000042   0x....             LDR.N    R4,??DataTable0_2  ;; 0xe0001004
   \   00000044   0x6824             LDR      R4,[R4, #+0]
   \   00000046   0x4294             CMP      R4,R2
   \   00000048   0xD3FB             BCC.N    ??dwt_delay_us_0
     44          }
   \   0000004A   0xBC30             POP      {R4,R5}
   \   0000004C   0x4770             BX       LR               ;; return
     45          
     46          /*!
     47           *  @brief      延时(ms)
     48           *  @param      ms      延时时间
     49           *  @since      v5.0
     50           */

   \                                 In section .text, align 2, keep-with-next
     51          void dwt_delay_ms(uint32 ms)
     52          {
   \                     dwt_delay_ms: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     53              while(ms--)
   \                     ??dwt_delay_ms_0: (+1)
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x1E44             SUBS     R4,R0,#+1
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD004             BEQ.N    ??dwt_delay_ms_1
     54              {
     55                  dwt_delay_us(1000);
   \   0000000C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000010   0x.... 0x....      BL       dwt_delay_us
   \   00000014   0xE7F6             B.N      ??dwt_delay_ms_0
     56              }
     57          }
   \                     ??dwt_delay_ms_1: (+1)
   \   00000016   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0xE000EDFC         DC32     0xe000edfc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0xE0001000         DC32     0xe0001000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0xE0001004         DC32     0xe0001004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_3:
   \   00000000   0x........         DC32     core_clk_khz

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   dwt_delay_ms
         8   -> dwt_delay_us
       8   dwt_delay_us


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
      24  dwt_delay_ms
      78  dwt_delay_us

 
 118 bytes in section .text
 
 118 bytes of CODE memory

Errors: none
Warnings: none
