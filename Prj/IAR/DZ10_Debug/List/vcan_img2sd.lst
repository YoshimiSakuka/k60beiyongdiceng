###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        26/Jul/2016  23:31:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\vcan_img2sd.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\vcan_img2sd.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\vcan_img2sd.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\vcan_img2sd.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\vcan_img2sd.c
      1          #include "common.h"
      2          #include "vcan_img2sd.h"
      3          #include "ff.h"
      4          #include "VCAN_camera.h"       //摄像头总头文件
      5          

   \                                 In section .bss, align 4
      6          static FATFS vcanfs;    //文件系统
   \                     vcanfs:
   \   00000000                      DS8 560

   \                                 In section .bss, align 4
      7          static FIL   vcansrc;   //文件
   \                     vcansrc:
   \   00000000                      DS8 548
      8          
      9          

   \                                 In section .text, align 2, keep-with-next
     10          void img_sd_init(void)
     11          {
   \                     img_sd_init: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
     12              int     vcanres;
     13              char    myfilename[20];
     14              uint16  imgsize[] = {
     15                                      CAMERA_H,
     16                                      CAMERA_W,
     17                                      //CAMERA_COLOR,
     18                                   };      //高、宽、摄像头颜色类型
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable2
   \   00000008   0x680A             LDR      R2,[R1, #0]
   \   0000000A   0x6002             STR      R2,[R0, #+0]
     19              uint32  mybw;
     20              uint32  Imag_num = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
     21          
     22              f_mount(0, &vcanfs);
   \   0000000E   0x....             LDR.N    R1,??DataTable2_1
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       f_mount
     23          
     24              do
     25              {
     26                  Imag_num ++;
   \                     ??img_sd_init_0: (+1)
   \   00000016   0x1C6D             ADDS     R5,R5,#+1
     27                  sprintf(myfilename, "0:/vcan%d.sd", Imag_num);
   \   00000018   0x002A             MOVS     R2,R5
   \   0000001A   0x....             LDR.N    R1,??DataTable2_2
   \   0000001C   0xA802             ADD      R0,SP,#+8
   \   0000001E   0x.... 0x....      BL       sprintf
     28                  vcanres = f_open( &vcansrc , myfilename, FA_CREATE_NEW | FA_WRITE);
   \   00000022   0x2206             MOVS     R2,#+6
   \   00000024   0xA902             ADD      R1,SP,#+8
   \   00000026   0x....             LDR.N    R0,??DataTable2_3
   \   00000028   0x.... 0x....      BL       f_open
   \   0000002C   0x0004             MOVS     R4,R0
     29          
     30                  if(vcanfs.fs_type == 0)
   \   0000002E   0x....             LDR.N    R0,??DataTable2_1
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD103             BNE.N    ??img_sd_init_1
     31                  {
     32                      vcansrc.fs = 0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR.N    R1,??DataTable2_3
   \   0000003A   0x6008             STR      R0,[R1, #+0]
     33                      return;
   \   0000003C   0xE011             B.N      ??img_sd_init_2
     34                  }
     35          
     36              }while(vcanres == FR_EXIST);        //如果文件存在，则命名继续加1
   \                     ??img_sd_init_1: (+1)
   \   0000003E   0x2C08             CMP      R4,#+8
   \   00000040   0xD0E9             BEQ.N    ??img_sd_init_0
     37          
     38              if ( vcanres == FR_OK )
   \   00000042   0x2C00             CMP      R4,#+0
   \   00000044   0xD107             BNE.N    ??img_sd_init_3
     39              {
     40                  vcanres = f_write(&vcansrc, imgsize, sizeof(imgsize),&mybw);  //先写入高和宽，方便上位机处理
   \   00000046   0xAB01             ADD      R3,SP,#+4
   \   00000048   0x2204             MOVS     R2,#+4
   \   0000004A   0xA900             ADD      R1,SP,#+0
   \   0000004C   0x....             LDR.N    R0,??DataTable2_3
   \   0000004E   0x.... 0x....      BL       f_write
   \   00000052   0x0004             MOVS     R4,R0
   \   00000054   0xE005             B.N      ??img_sd_init_4
     41              }
     42              else
     43              {
     44                  f_close(&vcansrc);
   \                     ??img_sd_init_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable2_3
   \   00000058   0x.... 0x....      BL       f_close
     45                  vcansrc.fs = 0;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x....             LDR.N    R1,??DataTable2_3
   \   00000060   0x6008             STR      R0,[R1, #+0]
     46              }
     47          }
   \                     ??img_sd_init_4: (+1)
   \                     ??img_sd_init_2: (+1)
   \   00000062   0xB007             ADD      SP,SP,#+28
   \   00000064   0xBD30             POP      {R4,R5,PC}       ;; return
     48          
     49          
     50          
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void img_sd_save(uint8 * imgaddr,uint32 size)
     53          {
   \                     img_sd_save: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     54          #define F_SYNC_TIME   30      //保存 n 次后 才 同步
     55          
     56              int   vcanres;
     57              uint32 mybw;
     58              static uint8 time = 0;
     59              //uint32 size = CAMERA_SIZE;
     60          
     61              if(vcansrc.fs != 0)
   \   00000008   0x....             LDR.N    R0,??DataTable2_3
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD01D             BEQ.N    ??img_sd_save_0
     62              {
     63                  time ++;
   \   00000010   0x....             LDR.N    R0,??DataTable2_4
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x....             LDR.N    R1,??DataTable2_4
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     64          
     65                  vcanres = f_write(&vcansrc, imgaddr, size ,&mybw);
   \   0000001A   0xAB00             ADD      R3,SP,#+0
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0x0021             MOVS     R1,R4
   \   00000020   0x....             LDR.N    R0,??DataTable2_3
   \   00000022   0x.... 0x....      BL       f_write
   \   00000026   0x0006             MOVS     R6,R0
     66          
     67                  if(vcanres != FR_OK)
   \   00000028   0x2E00             CMP      R6,#+0
   \   0000002A   0xD005             BEQ.N    ??img_sd_save_1
     68                  {
     69                      f_close(&vcansrc);
   \   0000002C   0x....             LDR.N    R0,??DataTable2_3
   \   0000002E   0x.... 0x....      BL       f_close
     70                      vcansrc.fs = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x....             LDR.N    R1,??DataTable2_3
   \   00000036   0x6008             STR      R0,[R1, #+0]
     71                  }
     72          
     73                  if(time > F_SYNC_TIME)
   \                     ??img_sd_save_1: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable2_4
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x281F             CMP      R0,#+31
   \   0000003E   0xDB05             BLT.N    ??img_sd_save_0
     74                  {
     75                      time = 0 ;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR.N    R1,??DataTable2_4
   \   00000044   0x7008             STRB     R0,[R1, #+0]
     76                      f_sync(&vcansrc);
   \   00000046   0x....             LDR.N    R0,??DataTable2_3
   \   00000048   0x.... 0x....      BL       f_sync
     77                  }
     78              }
     79          }
   \                     ??img_sd_save_0: (+1)
   \   0000004C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .bss, align 1
   \                     ??time:
   \   00000000                      DS8 1
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void img_sd_exit(void)
     82          {
   \                     img_sd_exit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     83              f_close(&vcansrc);
   \   00000002   0x....             LDR.N    R0,??DataTable2_3
   \   00000004   0x.... 0x....      BL       f_close
     84              vcansrc.fs = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR.N    R1,??DataTable2_3
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     85          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     vcanfs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     vcansrc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ??time

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x003C 0x0050      DC16 60, 80

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x30 0x3A          DC8 "0:/vcan%d.sd"
   \              0x2F 0x76    
   \              0x63 0x61    
   \              0x6E 0x25    
   \              0x64 0x2E    
   \              0x73 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   img_sd_exit
         8   -> f_close
      40   img_sd_init
        40   -> f_close
        40   -> f_mount
        40   -> f_open
        40   -> f_write
        40   -> sprintf
      24   img_sd_save
        24   -> f_close
        24   -> f_sync
        24   -> f_write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ?_0
      16  ?_1
      16  img_sd_exit
     102  img_sd_init
      78  img_sd_save
       1  time
     560  vcanfs
     548  vcansrc

 
 1 109 bytes in section .bss
    20 bytes in section .rodata
   216 bytes in section .text
 
   216 bytes of CODE  memory
    20 bytes of CONST memory
 1 109 bytes of DATA  memory

Errors: none
Warnings: none
