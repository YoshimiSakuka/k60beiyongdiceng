###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        26/Jul/2016  23:31:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_LCD_CH.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_LCD_CH.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\VCAN_LCD_CH.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\VCAN_LCD_CH.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_LCD_CH.c
      1          #include "common.h"
      2          
      3          
      4          #include "VCAN_lcd.h"
      5          #include "ff.h"
      6          
      7          
      8          
      9          
     10          

   \                                 In section .bss, align 4
     11          FATFS myfs;                    // Work area (file system object) for logical drive
   \                     myfs:
   \   00000000                      DS8 560

   \                                 In section .bss, align 4
     12          FIL myfsrc;            // file objects
   \                     myfsrc:
   \   00000000                      DS8 548

   \                                 In section .bss, align 1
     13          FRESULT myres;                 // FatFs function common result code
   \                     myres:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     14          uint32 mybr;               // File R/W count
   \                     mybr:
   \   00000000                      DS8 4
     15          
     16          /*******************************************************************************
     17          * Function Name  : GetGBKCode_from_sd
     18          * Description    : 从SD卡字库中读取自摸数据到指定的缓冲区
     19          * Input          : pBuffer---数据保存地址
     20          *				   					c--汉字字符低字节码
     21          * Output         : None
     22          * Return         : 0(success)  -1(fail)
     23          * Attention		 	 : None
     24          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     25          int GetGBKCode_from_sd(unsigned char* pBuffer,const unsigned char * c)
     26          {
   \                     GetGBKCode_from_sd: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     27              unsigned char High8bit,Low8bit;
     28              unsigned int pos;
     29              High8bit=*c;     /* 取高8位数据 */
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0x0006             MOVS     R6,R0
     30              Low8bit=*(c+1);  /* 取低8位数据 */
   \   0000000C   0x7868             LDRB     R0,[R5, #+1]
   \   0000000E   0x0007             MOVS     R7,R0
     31          
     32              pos = ((High8bit-0xb0)*94+Low8bit-0xa1)*LCD_CH_SIZE ;	
   \   00000010   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000012   0x205E             MOVS     R0,#+94
   \   00000014   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000016   0xFB00 0x7006      MLA      R0,R0,R6,R7
   \   0000001A   0x....             LDR.N    R1,??DataTable2  ;; 0xffffbebf
   \   0000001C   0x1808             ADDS     R0,R1,R0
   \   0000001E   0x0140             LSLS     R0,R0,#+5
   \   00000020   0x4680             MOV      R8,R0
     33              f_mount(0, &myfs);
   \   00000022   0x....             LDR.N    R1,??DataTable2_1
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       f_mount
     34              myres = f_open(&myfsrc , "0:/HZLIB.bin", FA_OPEN_EXISTING | FA_READ);
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x....             LDR.N    R1,??DataTable2_2
   \   0000002E   0x....             LDR.N    R0,??DataTable2_3
   \   00000030   0x.... 0x....      BL       f_open
   \   00000034   0x....             LDR.N    R1,??DataTable2_4
   \   00000036   0x7008             STRB     R0,[R1, #+0]
     35          
     36              if ( myres == FR_OK )
   \   00000038   0x....             LDR.N    R0,??DataTable2_4
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD110             BNE.N    ??GetGBKCode_from_sd_0
     37              {
     38                  f_lseek (&myfsrc, pos);														 //指针偏移
   \   00000040   0x4641             MOV      R1,R8
   \   00000042   0x....             LDR.N    R0,??DataTable2_3
   \   00000044   0x.... 0x....      BL       f_lseek
     39                  myres = f_read( &myfsrc, pBuffer, LCD_CH_SIZE, &mybr );		 //16*16大小的汉字 其字模 占用16*2个字节
   \   00000048   0x....             LDR.N    R3,??DataTable2_5
   \   0000004A   0x2220             MOVS     R2,#+32
   \   0000004C   0x0021             MOVS     R1,R4
   \   0000004E   0x....             LDR.N    R0,??DataTable2_3
   \   00000050   0x.... 0x....      BL       f_read
   \   00000054   0x....             LDR.N    R1,??DataTable2_4
   \   00000056   0x7008             STRB     R0,[R1, #+0]
     40          
     41                  f_close(&myfsrc);
   \   00000058   0x....             LDR.N    R0,??DataTable2_3
   \   0000005A   0x.... 0x....      BL       f_close
     42          
     43                  return 0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xE001             B.N      ??GetGBKCode_from_sd_1
     44              }
     45              else
     46              {
     47                  return -1;
   \                     ??GetGBKCode_from_sd_0: (+1)
   \   00000062   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??GetGBKCode_from_sd_1: (+1)
   \   00000066   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     48              }
     49          }
     50          
     51          /********************************************************************
     52           * 函数名：LCD_Char_CH
     53           * 描述  ：显示单个汉字字符
     54           * 输入  : 	x: 0~(319-16)
     55           *         	y: 0~(239-16)
     56           *			str: 中文字符串首址
     57           *			Color: 字符颜色
     58           *			bkColor: 背景颜色
     59           * 输出  ：无
     60           * 举例  ：	LCD_Char_CH(200,100,"好",0,0);
     61           * 注意	 ：如果输入大于1的汉字字符串，显示将会截断，只显示最前面一个汉字
     62          ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     63          void LCD_Char_CH(Site_t site,const uint8 *str,uint16 Color,uint16 bkColor)
     64          {
   \                     LCD_Char_CH: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
     65              uint8 i,j;
     66              uint8 buffer[32];
     67              uint8 *pbuf = buffer;
   \   0000000C   0xF10D 0x0900      ADD      R9,SP,#+0
     68              uint8 tmp_char=0;
   \   00000010   0xF05F 0x0A00      MOVS     R10,#+0
     69          
     70              const Size_t size   = {LCD_CH_W,LCD_CH_H};
   \   00000014   0x....             LDR.N    R0,??DataTable2_6
   \   00000016   0xF8D0 0xB000      LDR      R11,[R0, #+0]
     71          
     72              GetGBKCode_from_sd(buffer,str);  /* 取字模数据 */
   \   0000001A   0x0021             MOVS     R1,R4
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       GetGBKCode_from_sd
     73          
     74              LCD_PTLON(site, size);              //开窗
   \   00000022   0x4659             MOV      R1,R11
   \   00000024   0x9808             LDR      R0,[SP, #+32]
   \   00000026   0x.... 0x....      BL       LCD_ILI9341_ptlon
     75              LCD_RAMWR();                        //写内存
   \   0000002A   0x202C             MOVS     R0,#+44
   \   0000002C   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000030   0x8008             STRH     R0,[R1, #+0]
     76          
     77              for (i=0;i < LCD_CH_SIZE;i++)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x0007             MOVS     R7,R0
   \                     ??LCD_Char_CH_0: (+1)
   \   00000036   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000038   0x2F20             CMP      R7,#+32
   \   0000003A   0xDA1C             BGE.N    ??LCD_Char_CH_1
     78              {
     79                  tmp_char = *pbuf++;
   \   0000003C   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000040   0x4682             MOV      R10,R0
   \   00000042   0xF119 0x0901      ADDS     R9,R9,#+1
     80          
     81                  for(j=0;j<8;j++)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x4680             MOV      R8,R0
   \                     ??LCD_Char_CH_2: (+1)
   \   0000004A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004E   0xF1B8 0x0F08      CMP      R8,#+8
   \   00000052   0xDA0E             BGE.N    ??LCD_Char_CH_3
     82                  {
     83                      if(tmp_char & (0x80))
   \   00000054   0xEA5F 0x600A      LSLS     R0,R10,#+24
   \   00000058   0xD503             BPL.N    ??LCD_Char_CH_4
     84                      {
     85                          LCD_WR_DATA( Color );
   \   0000005A   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   0000005E   0x8005             STRH     R5,[R0, #+0]
   \   00000060   0xE002             B.N      ??LCD_Char_CH_5
     86                      }
     87                      else
     88                      {
     89                          LCD_WR_DATA( bkColor );
   \                     ??LCD_Char_CH_4: (+1)
   \   00000062   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   00000066   0x8006             STRH     R6,[R0, #+0]
     90                      }
     91                      tmp_char <<= 1;
   \                     ??LCD_Char_CH_5: (+1)
   \   00000068   0xEA5F 0x0A4A      LSLS     R10,R10,#+1
     92                  }
   \   0000006C   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000070   0xE7EB             B.N      ??LCD_Char_CH_2
     93              }
   \                     ??LCD_Char_CH_3: (+1)
   \   00000072   0x1C7F             ADDS     R7,R7,#+1
   \   00000074   0xE7DF             B.N      ??LCD_Char_CH_0
     94          }
   \                     ??LCD_Char_CH_1: (+1)
   \   00000076   0xB009             ADD      SP,SP,#+36
   \   00000078   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void LCD_Str_CH(Site_t site,const uint8 *str  , uint16 Color ,uint16 bkColor) 		//显示16*16汉字字符串
     97          {
   \                     LCD_Str_CH: (+1)
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
     98              while(*str != '\0')
   \                     ??LCD_Str_CH_0: (+1)
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD02A             BEQ.N    ??LCD_Str_CH_1
     99              {
    100                  if(site.x>(LCD_W-16))
   \   00000010   0x.... 0x....      BL       ILI9341_get_w
   \   00000014   0x3810             SUBS     R0,R0,#+16
   \   00000016   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xDA07             BGE.N    ??LCD_Str_CH_2
    101                      {	
    102                       /*换行*/
    103                      site.x =0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    104                      site.y +=LCD_CH_H;
   \   00000024   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000028   0x3010             ADDS     R0,R0,#+16
   \   0000002A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    105                  }
    106                  if(site.y >(LCD_H-LCD_CH_W))
   \                     ??LCD_Str_CH_2: (+1)
   \   0000002E   0x.... 0x....      BL       ILI9341_get_h
   \   00000032   0x3810             SUBS     R0,R0,#+16
   \   00000034   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xDA05             BGE.N    ??LCD_Str_CH_3
    107                  {
    108                       /*重新归零*/
    109                       site.y =0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    110                       site.x =0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    111                  }
    112                  LCD_Char_CH(site,str,Color,bkColor);
   \                     ??LCD_Str_CH_3: (+1)
   \   00000048   0x0033             MOVS     R3,R6
   \   0000004A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000004C   0x002A             MOVS     R2,R5
   \   0000004E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000050   0x0021             MOVS     R1,R4
   \   00000052   0x9801             LDR      R0,[SP, #+4]
   \   00000054   0x.... 0x....      BL       LCD_Char_CH
    113                  str += 2 ;
   \   00000058   0x1CA4             ADDS     R4,R4,#+2
    114                  site.x += LCD_CH_W ;	
   \   0000005A   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000005E   0x3010             ADDS     R0,R0,#+16
   \   00000060   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   00000064   0xE7D1             B.N      ??LCD_Str_CH_0
    115              }
    116          }
   \                     ??LCD_Str_CH_1: (+1)
   \   00000066   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    117          
    118          

   \                                 In section .text, align 2, keep-with-next
    119          void LCD_Str_ENCH(Site_t site,const uint8 *str  , uint16 Color ,uint16 bkColor) 		//显示16*16汉字字符串
    120          {
   \                     LCD_Str_ENCH: (+1)
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x0014             MOVS     R4,R2
   \   00000008   0x001D             MOVS     R5,R3
    121              while(*str != '\0')
   \                     ??LCD_Str_ENCH_0: (+1)
   \   0000000A   0x7830             LDRB     R0,[R6, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD058             BEQ.N    ??LCD_Str_ENCH_1
    122              {
    123                  if( *str < 0x80)       //英文
   \   00000010   0x7830             LDRB     R0,[R6, #+0]
   \   00000012   0x2880             CMP      R0,#+128
   \   00000014   0xDA2A             BGE.N    ??LCD_Str_ENCH_2
    124                  {
    125                      if(site.x>(LCD_W-LCD_EN_W))
   \   00000016   0x.... 0x....      BL       ILI9341_get_w
   \   0000001A   0x3808             SUBS     R0,R0,#+8
   \   0000001C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000020   0x4288             CMP      R0,R1
   \   00000022   0xDA07             BGE.N    ??LCD_Str_ENCH_3
    126                      {	
    127                           /*换行*/
    128                          site.x =0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    129                          site.y +=LCD_EN_H;
   \   0000002A   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000002E   0x3010             ADDS     R0,R0,#+16
   \   00000030   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    130                      }
    131                      if(site.y >(LCD_H-LCD_EN_H))
   \                     ??LCD_Str_ENCH_3: (+1)
   \   00000034   0x.... 0x....      BL       ILI9341_get_h
   \   00000038   0x3810             SUBS     R0,R0,#+16
   \   0000003A   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xDA05             BGE.N    ??LCD_Str_ENCH_4
    132                      {
    133                           /*重新归零*/
    134                           site.y =0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    135                           site.x =0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    136                      }
    137                      LCD_char(site,*str,Color,bkColor);
   \                     ??LCD_Str_ENCH_4: (+1)
   \   0000004E   0x002B             MOVS     R3,R5
   \   00000050   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000052   0x0022             MOVS     R2,R4
   \   00000054   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000056   0x7831             LDRB     R1,[R6, #+0]
   \   00000058   0x9801             LDR      R0,[SP, #+4]
   \   0000005A   0x.... 0x....      BL       LCD_char
    138                      str += 1 ;
   \   0000005E   0x1C76             ADDS     R6,R6,#+1
    139                      site.x += LCD_EN_W ;	
   \   00000060   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000064   0x3008             ADDS     R0,R0,#+8
   \   00000066   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000006A   0xE7CE             B.N      ??LCD_Str_ENCH_0
    140                  }
    141                  else
    142                  {
    143                      if(site.x>(LCD_W-LCD_CH_W))
   \                     ??LCD_Str_ENCH_2: (+1)
   \   0000006C   0x.... 0x....      BL       ILI9341_get_w
   \   00000070   0x3810             SUBS     R0,R0,#+16
   \   00000072   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xDA07             BGE.N    ??LCD_Str_ENCH_5
    144                      {	
    145                           /*换行*/
    146                          site.x =0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    147                          site.y +=LCD_CH_H;
   \   00000080   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000084   0x3010             ADDS     R0,R0,#+16
   \   00000086   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    148                      }
    149                      if(site.y >(LCD_H-LCD_CH_H))
   \                     ??LCD_Str_ENCH_5: (+1)
   \   0000008A   0x.... 0x....      BL       ILI9341_get_h
   \   0000008E   0x3810             SUBS     R0,R0,#+16
   \   00000090   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000094   0x4288             CMP      R0,R1
   \   00000096   0xDA05             BGE.N    ??LCD_Str_ENCH_6
    150                      {
    151                           /*重新归零*/
    152                           site.y =0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    153                           site.x =0;
   \   0000009E   0x2000             MOVS     R0,#+0
   \   000000A0   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    154                      }
    155                      LCD_Char_CH(site,str,Color,bkColor);
   \                     ??LCD_Str_ENCH_6: (+1)
   \   000000A4   0x002B             MOVS     R3,R5
   \   000000A6   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000A8   0x0022             MOVS     R2,R4
   \   000000AA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000AC   0x0031             MOVS     R1,R6
   \   000000AE   0x9801             LDR      R0,[SP, #+4]
   \   000000B0   0x.... 0x....      BL       LCD_Char_CH
    156                      str += 2 ;
   \   000000B4   0x1CB6             ADDS     R6,R6,#+2
    157                      site.x += LCD_CH_W ;	
   \   000000B6   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000BA   0x3010             ADDS     R0,R0,#+16
   \   000000BC   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   000000C0   0xE7A3             B.N      ??LCD_Str_ENCH_0
    158                  }
    159              }
    160          }
   \                     ??LCD_Str_ENCH_1: (+1)
   \   000000C2   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    161          

   \                                 In section .text, align 2, keep-with-next
    162          void LCD_FChar_CH (Site_t site,const uint8 *str,uint16 Color,uint16 bkColor)
    163          {
   \                     LCD_FChar_CH: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    164              uint8 i,j;
    165              //uint8 *pbuf = str;
    166              uint8 tmp_char=0;
   \   0000000C   0xF05F 0x0A00      MOVS     R10,#+0
    167          
    168              const Size_t size   = {LCD_CH_W,LCD_CH_H};
   \   00000010   0x....             LDR.N    R0,??DataTable2_7
   \   00000012   0xF8D0 0xB000      LDR      R11,[R0, #+0]
    169          
    170              LCD_PTLON(site, size);              //开窗
   \   00000016   0x4659             MOV      R1,R11
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       LCD_ILI9341_ptlon
    171              LCD_RAMWR();                        //写内存
   \   0000001E   0x202C             MOVS     R0,#+44
   \   00000020   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000024   0x8008             STRH     R0,[R1, #+0]
    172          
    173              for (i=0;i < LCD_CH_SIZE;i++)
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x4680             MOV      R8,R0
   \                     ??LCD_FChar_CH_0: (+1)
   \   0000002A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000002E   0xF1B8 0x0F20      CMP      R8,#+32
   \   00000032   0xDA1B             BGE.N    ??LCD_FChar_CH_1
    174              {
    175                  tmp_char = *str++;
   \   00000034   0x7828             LDRB     R0,[R5, #+0]
   \   00000036   0x4682             MOV      R10,R0
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
    176          
    177                  for(j=0;j<8;j++)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x4681             MOV      R9,R0
   \                     ??LCD_FChar_CH_2: (+1)
   \   0000003E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000042   0xF1B9 0x0F08      CMP      R9,#+8
   \   00000046   0xDA0E             BGE.N    ??LCD_FChar_CH_3
    178                  {
    179                      if(tmp_char & (0x80))
   \   00000048   0xEA5F 0x600A      LSLS     R0,R10,#+24
   \   0000004C   0xD503             BPL.N    ??LCD_FChar_CH_4
    180                      {
    181                          LCD_WR_DATA( Color );
   \   0000004E   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   00000052   0x8006             STRH     R6,[R0, #+0]
   \   00000054   0xE002             B.N      ??LCD_FChar_CH_5
    182                      }
    183                      else
    184                      {
    185                          LCD_WR_DATA( bkColor );
   \                     ??LCD_FChar_CH_4: (+1)
   \   00000056   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   0000005A   0x8007             STRH     R7,[R0, #+0]
    186                      }
    187                      tmp_char <<= 1;
   \                     ??LCD_FChar_CH_5: (+1)
   \   0000005C   0xEA5F 0x0A4A      LSLS     R10,R10,#+1
    188                  }
   \   00000060   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000064   0xE7EB             B.N      ??LCD_FChar_CH_2
    189              }
   \                     ??LCD_FChar_CH_3: (+1)
   \   00000066   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000006A   0xE7DE             B.N      ??LCD_FChar_CH_0
    190          }
   \                     ??LCD_FChar_CH_1: (+1)
   \   0000006C   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    191          

   \                                 In section .text, align 2, keep-with-next
    192          void LCD_FStr_CH (Site_t site,const uint8 *str,uint16 num,uint16 Color,uint16 bkColor)
    193          {
   \                     LCD_FStr_CH: (+1)
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0x000D             MOVS     R5,R1
   \   00000004   0x0017             MOVS     R7,R2
   \   00000006   0x001E             MOVS     R6,R3
   \   00000008   0x9C06             LDR      R4,[SP, #+24]
    194              while(num--)
   \                     ??LCD_FStr_CH_0: (+1)
   \   0000000A   0x0038             MOVS     R0,R7
   \   0000000C   0x1E47             SUBS     R7,R0,#+1
   \   0000000E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD02A             BEQ.N    ??LCD_FStr_CH_1
    195              {
    196                  if(site.x>(LCD_W-16))
   \   00000014   0x.... 0x....      BL       ILI9341_get_w
   \   00000018   0x3810             SUBS     R0,R0,#+16
   \   0000001A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xDA07             BGE.N    ??LCD_FStr_CH_2
    197                  {
    198                       /*换行*/
    199                      site.x =0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    200                      site.y +=LCD_CH_H;
   \   00000028   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000002C   0x3010             ADDS     R0,R0,#+16
   \   0000002E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    201                  }
    202                  if(site.y >(LCD_H-LCD_CH_W))
   \                     ??LCD_FStr_CH_2: (+1)
   \   00000032   0x.... 0x....      BL       ILI9341_get_h
   \   00000036   0x3810             SUBS     R0,R0,#+16
   \   00000038   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xDA05             BGE.N    ??LCD_FStr_CH_3
    203                  {
    204                       /*重新归零*/
    205                       site.y =0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    206                       site.x =0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    207                  }
    208                  LCD_FChar_CH(site,str,Color,bkColor);
   \                     ??LCD_FStr_CH_3: (+1)
   \   0000004C   0x0023             MOVS     R3,R4
   \   0000004E   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000050   0x0032             MOVS     R2,R6
   \   00000052   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000054   0x0029             MOVS     R1,R5
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x.... 0x....      BL       LCD_FChar_CH
    209                  str += LCD_CH_SIZE ;
   \   0000005C   0x3520             ADDS     R5,R5,#+32
    210                  site.x += LCD_CH_W ;
   \   0000005E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000062   0x3010             ADDS     R0,R0,#+16
   \   00000064   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000068   0xE7CF             B.N      ??LCD_FStr_CH_0
    211              }
    212          }
   \                     ??LCD_FStr_CH_1: (+1)
   \   0000006A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0xFFFFBEBF         DC32     0xffffbebf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     myfs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     myfsrc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     myres

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     mybr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x30 0x3A          DC8 "0:/HZLIB.bin"
   \              0x2F 0x48    
   \              0x5A 0x4C    
   \              0x49 0x42    
   \              0x2E 0x62    
   \              0x69 0x6E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0010 0x0010      DC16 16, 16

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0010 0x0010      DC16 16, 16
    213          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   GetGBKCode_from_sd
        24   -> f_close
        24   -> f_lseek
        24   -> f_mount
        24   -> f_open
        24   -> f_read
      72   LCD_Char_CH
        72   -> GetGBKCode_from_sd
        72   -> LCD_ILI9341_ptlon
      40   LCD_FChar_CH
        40   -> LCD_ILI9341_ptlon
      24   LCD_FStr_CH
        24   -> ILI9341_get_h
        24   -> ILI9341_get_w
        24   -> LCD_FChar_CH
      24   LCD_Str_CH
        24   -> ILI9341_get_h
        24   -> ILI9341_get_w
        24   -> LCD_Char_CH
      24   LCD_Str_ENCH
        24   -> ILI9341_get_h
        24   -> ILI9341_get_w
        24   -> LCD_Char_CH
        24   -> LCD_char


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
      16  ?_0
       4  ?_1
       4  ?_2
     106  GetGBKCode_from_sd
     124  LCD_Char_CH
     112  LCD_FChar_CH
     108  LCD_FStr_CH
     104  LCD_Str_CH
     196  LCD_Str_ENCH
       4  mybr
     560  myfs
     548  myfsrc
       1  myres

 
 1 113 bytes in section .bss
    24 bytes in section .rodata
   782 bytes in section .text
 
   782 bytes of CODE  memory
    24 bytes of CONST memory
 1 113 bytes of DATA  memory

Errors: none
Warnings: none
