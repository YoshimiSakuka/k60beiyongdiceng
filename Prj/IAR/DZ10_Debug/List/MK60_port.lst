###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_port.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_port.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_port.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_port.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_port.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_port.c
     11           * @brief      port复用配置和各种功能配置
     12           * @author     山外科技
     13           * @version    v5.1
     14           * @date       2014-04-25
     15           */
     16          
     17          #include "common.h"
     18          #include "MK60_port.h"
     19          

   \                                 In section .data, align 4
     20          PORT_MemMapPtr PORTX[PTX_MAX] = {PORTA_BASE_PTR, PORTB_BASE_PTR, PORTC_BASE_PTR, PORTD_BASE_PTR, PORTE_BASE_PTR};
   \                     PORTX:
   \   00000000   0x40049000         DC32 40049000H, 4004A000H, 4004B000H, 4004C000H, 4004D000H
   \              0x4004A000   
   \              0x4004B000   
   \              0x4004C000   
   \              0x4004D000   
     21          
     22          /*!
     23           *  @brief      PORT初始化
     24           *  @param      PTxn    端口
     25           *  @param      cfg     端口属性配置，如触发选项和上拉下拉选项
     26           *  @since      v5.0
     27           *  @note       与port_init_NoALT不同的是，此函数需要配置 MUX 复用功能，
     28                          否则 MUX = ALT0
     29           *  Sample usage:       port_init (PTA8, IRQ_RISING | PF | ALT1 | PULLUP );    //初始化 PTA8 管脚，上升沿触发中断，带无源滤波器，复用功能为GPIO ，上拉电阻
     30           */

   \                                 In section .text, align 2, keep-with-next
     31          void  port_init(PTXn_e ptxn, uint32 cfg )
     32          {
   \                     port_init: (+1)
   \   00000000   0xB410             PUSH     {R4}
     33              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK << PTX(ptxn));                           //开启PORTx端口
   \   00000002   0x....             LDR.N    R2,??DataTable2  ;; 0x40048038
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0xF44F 0x7300      MOV      R3,#+512
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x0944             LSRS     R4,R0,#+5
   \   0000000E   0x40A3             LSLS     R3,R3,R4
   \   00000010   0x431A             ORRS     R2,R3,R2
   \   00000012   0x....             LDR.N    R3,??DataTable2  ;; 0x40048038
   \   00000014   0x601A             STR      R2,[R3, #+0]
     34          
     35              PORT_ISFR_REG(PORTX_BASE(ptxn)) = (1<<PTn(ptxn));                           // 清空标志位
   \   00000016   0x....             LDR.N    R2,??DataTable2_1
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x1143             ASRS     R3,R0,#+5
   \   0000001C   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   00000026   0x40A3             LSLS     R3,R3,R4
   \   00000028   0xF8C2 0x30A0      STR      R3,[R2, #+160]
     36          
     37              PORT_PCR_REG(PORTX_BASE(ptxn), PTn(ptxn)) = cfg;                            // 复用功能 , 确定触发模式 ,开启上拉或下拉电阻
   \   0000002C   0x....             LDR.N    R2,??DataTable2_1
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x1143             ASRS     R3,R0,#+5
   \   00000032   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0xF010 0x031F      ANDS     R3,R0,#0x1F
   \   0000003C   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
     38          }
   \   00000040   0xBC10             POP      {R4}
   \   00000042   0x4770             BX       LR               ;; return
     39          
     40          /*!
     41           *  @brief      PORT初始化
     42           *  @param      PTxn    端口
     43           *  @param      cfg     端口属性配置，如触发选项和上拉下拉选项
     44           *  @since      v5.0
     45           *  @note       与port_init不同的是，此函数不需要配置 MUX 复用功能（即使配置了也不生效），
     46                          MUX 保留 为原先寄存器配置的值
     47           *  Sample usage:       port_init_NoALT (PTA8, IRQ_RISING | PF | PULLUP );    //初始化 PTA8 管脚，上升沿触发中断，带无源滤波器，保留原先复用功能，上拉电阻
     48           */

   \                                 In section .text, align 2, keep-with-next
     49          void  port_init_NoALT(PTXn_e ptxn, uint32 cfg)
     50          {
   \                     port_init_NoALT: (+1)
   \   00000000   0xB410             PUSH     {R4}
     51              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK << PTX(ptxn));                           //开启PORTx端口
   \   00000002   0x....             LDR.N    R2,??DataTable2  ;; 0x40048038
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0xF44F 0x7300      MOV      R3,#+512
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x0944             LSRS     R4,R0,#+5
   \   0000000E   0x40A3             LSLS     R3,R3,R4
   \   00000010   0x431A             ORRS     R2,R3,R2
   \   00000012   0x....             LDR.N    R3,??DataTable2  ;; 0x40048038
   \   00000014   0x601A             STR      R2,[R3, #+0]
     52          
     53              PORT_ISFR_REG(PORTX_BASE(ptxn)) = (1<<PTn(ptxn));                           // 清空标志位
   \   00000016   0x....             LDR.N    R2,??DataTable2_1
   \   00000018   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001A   0x1143             ASRS     R3,R0,#+5
   \   0000001C   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0xF010 0x041F      ANDS     R4,R0,#0x1F
   \   00000026   0x40A3             LSLS     R3,R3,R4
   \   00000028   0xF8C2 0x30A0      STR      R3,[R2, #+160]
     54          
     55              //清空cfg里的MUX，加载寄存器里的MUX
     56              cfg &= ~PORT_PCR_MUX_MASK;                      //清了MUX 字段（即不需要配置ALT，保持原来的ALT）
   \   0000002C   0xF431 0x61E0      BICS     R1,R1,#0x700
     57              cfg |=  (PORT_PCR_REG(PORTX_BASE(ptxn), PTn(ptxn)) & PORT_PCR_MUX_MASK);    //读取寄存器里配置的 MUX
   \   00000030   0x....             LDR.N    R2,??DataTable2_1
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x1143             ASRS     R3,R0,#+5
   \   00000036   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0xF010 0x031F      ANDS     R3,R0,#0x1F
   \   00000040   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000044   0xF412 0x62E0      ANDS     R2,R2,#0x700
   \   00000048   0x4311             ORRS     R1,R2,R1
     58          
     59              PORT_PCR_REG(PORTX_BASE(ptxn), PTn(ptxn)) = cfg;            // 复用功能 , 确定触发模式 ,开启上拉或下拉电阻
   \   0000004A   0x....             LDR.N    R2,??DataTable2_1
   \   0000004C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004E   0x1143             ASRS     R3,R0,#+5
   \   00000050   0xF852 0x2023      LDR      R2,[R2, R3, LSL #+2]
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0xF010 0x031F      ANDS     R3,R0,#0x1F
   \   0000005A   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
     60          }
   \   0000005E   0xBC10             POP      {R4}
   \   00000060   0x4770             BX       LR               ;; return
     61          
     62          /*!
     63           *  @brief      PORTA的参考中断服务函数
     64           *  @since      v5.0
     65           *  @warning    此函数需要用户根据自己需求完成，这里仅仅是提供一个模版
     66           *  Sample usage:       set_vector_handler(PORTA_VECTORn , porta_handler);    //把 porta_handler 函数添加到中断向量表，不需要我们手动调用
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void porta_handler(void)
     69          {
     70              uint8  n = 0;    //引脚号
   \                     porta_handler: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
     71          
     72              //PTA6
     73              n = 6;
   \   00000002   0x2106             MOVS     R1,#+6
   \   00000004   0x0008             MOVS     R0,R1
     74              if(PORTA_ISFR & (1 << n))           //PTA6触发中断
   \   00000006   0x....             LDR.N    R1,??DataTable2_2  ;; 0x400490a0
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x000A             MOVS     R2,R1
   \   0000000C   0x40C2             LSRS     R2,R2,R0
   \   0000000E   0x07D1             LSLS     R1,R2,#+31
   \   00000010   0xD503             BPL.N    ??porta_handler_0
     75              {
     76                  PORTA_ISFR  = (1 << n);        //写1清中断标志位
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x4081             LSLS     R1,R1,R0
   \   00000016   0x....             LDR.N    R2,??DataTable2_2  ;; 0x400490a0
   \   00000018   0x6011             STR      R1,[R2, #+0]
     77          
     78                  /*  以下为用户任务  */
     79          
     80          
     81                  /*  以上为用户任务  */
     82              }
     83          
     84              //假设 PTA7 需要执行的用户任务函数为 func() ，则可以直接调用如下宏定义：
     85              //PORT_FUNC(A,7,func);
     86              //这个宏的作用与上面 PTA6 的效果是一样的，只不过是简化了用户的输入
     87          }
   \                     ??porta_handler_0: (+1)
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     PORTX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x400490A0         DC32     0x400490a0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   port_init
       4   port_init_NoALT
       0   porta_handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      20  PORTX
      68  port_init
      98  port_init_NoALT
      28  porta_handler

 
  20 bytes in section .data
 206 bytes in section .text
 
 206 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
