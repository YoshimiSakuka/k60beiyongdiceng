###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:33
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_computer.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_computer.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\VCAN_computer.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\VCAN_computer.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_computer.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2015,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       VCAN_computer.c
     11           * @brief      山外多功能调试助手上位机驱动代码
     12           * @author     山外科技
     13           * @version    v5.2.2
     14           * @date       2015-03-24
     15           */
     16          
     17          
     18          /*
     19           * 包含头文件
     20           */
     21          #include "common.h"
     22          #include "MK60_uart.h"
     23          #include "VCAN_computer.h"
     24          
     25          
     26          
     27          /*!
     28           *  @brief      山外多功能调试助手上位机，摄像头显示函数
     29           *  @param      imgaddr    图像起始地址
     30           *  @param      imgsize    图像占用空间的大小
     31           *  @since      v5.0
     32          *  Sample usage:
     33                       具体用法参考这帖子:
     34                      【山外摄像头】鹰眼上位机例程和微焦效果 - 智能车资料区
     35                       http://vcan123.com/forum.php?mod=viewthread&tid=6242&ctid=27
     36           */

   \                                 In section .text, align 2, keep-with-next
     37          void vcan_sendimg(void *imgaddr, uint32_t imgsize)
     38          {
   \                     vcan_sendimg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     39          #define CMD_IMG     1
     40              uint8_t cmdf[2] = {CMD_IMG, ~CMD_IMG};    //山外上位机 使用的命令
   \   00000006   0x....             LDR.N    R0,??DataTable2
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     41              uint8_t cmdr[2] = {~CMD_IMG, CMD_IMG};    //山外上位机 使用的命令
   \   0000000E   0x....             LDR.N    R0,??DataTable2_1
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     42          
     43              uart_putbuff(VCAN_PORT, cmdf, sizeof(cmdf));    //先发送命令
   \   00000016   0x2202             MOVS     R2,#+2
   \   00000018   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       uart_putbuff
     44          
     45              uart_putbuff(VCAN_PORT, (uint8_t *)imgaddr, imgsize); //再发送图像
   \   00000022   0x002A             MOVS     R2,R5
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       uart_putbuff
     46          
     47              uart_putbuff(VCAN_PORT, cmdr, sizeof(cmdr));    //先发送命令
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       uart_putbuff
     48          }
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     49          
     50          
     51          /*!
     52           *  @brief      山外多功能调试助手上位机，线性CCD显示函数
     53           *  @param      ccdaddr    CCD图像起始地址
     54           *  @param      ccdsize    CCD图像占用空间的大小
     55           *  @since      v5.0
     56          *  Sample usage:
     57                       具体用法参考这帖子:
     58                      【山外线性CCD】上位机显示例程和超广角采集效果 - 智能车资料区
     59                       http://vcan123.com/forum.php?mod=viewthread&tid=6340&ctid=27
     60           */

   \                                 In section .text, align 2, keep-with-next
     61          void vcan_sendccd(void *ccdaddr, uint32_t ccdsize)
     62          {
   \                     vcan_sendccd: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     63          #define CMD_CCD     2
     64              uint8_t cmdf[2] = {CMD_CCD, ~CMD_CCD};    //开头命令
   \   00000006   0x....             LDR.N    R0,??DataTable2_2
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     65              uint8_t cmdr[2] = {~CMD_CCD, CMD_CCD};    //结尾命令
   \   0000000E   0x....             LDR.N    R0,??DataTable2_3
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     66          
     67              uart_putbuff(VCAN_PORT, cmdf, sizeof(cmdf));    //先发送命令
   \   00000016   0x2202             MOVS     R2,#+2
   \   00000018   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       uart_putbuff
     68          
     69              uart_putbuff(VCAN_PORT, (uint8_t *)ccdaddr, ccdsize); //再发送图像
   \   00000022   0x002A             MOVS     R2,R5
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       uart_putbuff
     70          
     71              uart_putbuff(VCAN_PORT, cmdr, sizeof(cmdr));    //再发送命令
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       uart_putbuff
     72          }
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     73          
     74          
     75          /*!
     76           *  @brief      山外多功能调试助手上位机，虚拟示波器显示函数
     77           *  @param      wareaddr    波形数组起始地址
     78           *  @param      waresize    波形数组占用空间的大小
     79           *  @since      v5.0
     80          *  Sample usage:
     81                       具体用法参考这帖子:
     82                      【山外资料】陀螺仪和加速度 上位机显示例程 - 智能车资料区
     83                       http://vcan123.com/forum.php?mod=viewthread&tid=6253&ctid=27
     84           */

   \                                 In section .text, align 2, keep-with-next
     85          void vcan_sendware(void *wareaddr, uint32_t waresize)
     86          {
   \                     vcan_sendware: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     87          #define CMD_WARE     3
     88              uint8_t cmdf[2] = {CMD_WARE, ~CMD_WARE};    //串口调试 使用的前命令
   \   00000006   0x....             LDR.N    R0,??DataTable2_4
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     89              uint8_t cmdr[2] = {~CMD_WARE, CMD_WARE};    //串口调试 使用的后命令
   \   0000000E   0x....             LDR.N    R0,??DataTable2_5
   \   00000010   0x8800             LDRH     R0,[R0, #+0]
   \   00000012   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     90          
     91              uart_putbuff(VCAN_PORT, cmdf, sizeof(cmdf));    //先发送前命令
   \   00000016   0x2202             MOVS     R2,#+2
   \   00000018   0xF10D 0x0102      ADD      R1,SP,#+2
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       uart_putbuff
     92              uart_putbuff(VCAN_PORT, (uint8_t *)wareaddr, waresize);    //发送数据
   \   00000022   0x002A             MOVS     R2,R5
   \   00000024   0x0021             MOVS     R1,R4
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x.... 0x....      BL       uart_putbuff
     93              uart_putbuff(VCAN_PORT, cmdr, sizeof(cmdr));    //发送后命令
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       uart_putbuff
     94          
     95          }
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0x01 0xFE          DC8 1, 254

   \                                 In section .rodata, align 2
   \                     ?_1:
   \   00000000   0xFE 0x01          DC8 254, 1

   \                                 In section .rodata, align 2
   \                     ?_2:
   \   00000000   0x02 0xFD          DC8 2, 253

   \                                 In section .rodata, align 2
   \                     ?_3:
   \   00000000   0xFD 0x02          DC8 253, 2

   \                                 In section .rodata, align 2
   \                     ?_4:
   \   00000000   0x03 0xFC          DC8 3, 252

   \                                 In section .rodata, align 2
   \                     ?_5:
   \   00000000   0xFC 0x03          DC8 252, 3

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   vcan_sendccd
        16   -> uart_putbuff
      16   vcan_sendimg
        16   -> uart_putbuff
      16   vcan_sendware
        16   -> uart_putbuff


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       2  ?_0
       2  ?_1
       2  ?_2
       2  ?_3
       2  ?_4
       2  ?_5
      56  vcan_sendccd
      56  vcan_sendimg
      56  vcan_sendware

 
  12 bytes in section .rodata
 192 bytes in section .text
 
 192 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
