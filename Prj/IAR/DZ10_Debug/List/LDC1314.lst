###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  14:45:12
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\LDC1314.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\LDC1314.c -D DEBUG
#        -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\LDC1314.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\LDC1314.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\LDC1314.c
      1          #include "LDC1314.h"
      2          #include "MK60_gpio.h"
      3          #include "SOFTWARE_I2C.h"
      4          
      5          
      6          

   \                                 In section .bss, align 4
      7          int SpeedWant;
   \                     SpeedWant:
   \   00000000                      DS8 4
      8          

   \                                 In section .bss, align 4
      9          int Speed_Kp; 
   \                     Speed_Kp:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     10          int Speed_Ki; 
   \                     Speed_Ki:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int Speed_Kd; 
   \                     Speed_Kd:
   \   00000000                      DS8 4
     12          
     13          

   \                                 In section .text, align 2, keep-with-next
     14          void LDC1314_Init(void)                    //地址0x1d
     15          {
   \                     LDC1314_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     16              gpio_init(LDC_SCL, GPO, 1);                                  
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2040             MOVS     R0,#+64
   \   00000008   0x.... 0x....      BL       gpio_init
     17              gpio_init(LDC_SDA, GPO, 1);
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x2041             MOVS     R0,#+65
   \   00000012   0x.... 0x....      BL       gpio_init
     18              IIC_LDC_write_byte(LDC1314_ADDR, RESET_DEV, 0x0200);//1000 0110 0000 0000    8600   16倍增益
   \   00000016   0xF44F 0x7200      MOV      R2,#+512
   \   0000001A   0x211C             MOVS     R1,#+28
   \   0000001C   0x202A             MOVS     R0,#+42
   \   0000001E   0x.... 0x....      BL       IIC_LDC_write_byte
     19                                                                        //10               8400   8倍增益         
     20                                                                        //01               8200   4倍增益
     21                                                                        //00               8000   1倍(不)增益    
     22              IIC_LDC_write_byte(LDC1314_ADDR, RCOUNT_CH0, 0x04D6);//0000 0100 1101 0110
   \   00000022   0xF240 0x42D6      MOVW     R2,#+1238
   \   00000026   0x2108             MOVS     R1,#+8
   \   00000028   0x202A             MOVS     R0,#+42
   \   0000002A   0x.... 0x....      BL       IIC_LDC_write_byte
     23              IIC_LDC_write_byte(LDC1314_ADDR, RCOUNT_CH1, 0x04D6);//通道参考计数转换间隔时间 0x0005~0xffff有效
   \   0000002E   0xF240 0x42D6      MOVW     R2,#+1238
   \   00000032   0x2109             MOVS     R1,#+9
   \   00000034   0x202A             MOVS     R0,#+42
   \   00000036   0x.... 0x....      BL       IIC_LDC_write_byte
     24              IIC_LDC_write_byte(LDC1314_ADDR, RCOUNT_CH2, 0x04D6);//转换时间 = RCOUNT_CHx * 16/fREFx
   \   0000003A   0xF240 0x42D6      MOVW     R2,#+1238
   \   0000003E   0x210A             MOVS     R1,#+10
   \   00000040   0x202A             MOVS     R0,#+42
   \   00000042   0x.... 0x....      BL       IIC_LDC_write_byte
     25              IIC_LDC_write_byte(LDC1314_ADDR, RCOUNT_CH3, 0x04D6);
   \   00000046   0xF240 0x42D6      MOVW     R2,#+1238
   \   0000004A   0x210B             MOVS     R1,#+11
   \   0000004C   0x202A             MOVS     R0,#+42
   \   0000004E   0x.... 0x....      BL       IIC_LDC_write_byte
     26              IIC_LDC_write_byte(LDC1314_ADDR, SETTLECOUNT_CH0, 0x000A);//0000 0000 0000 1010  
   \   00000052   0x220A             MOVS     R2,#+10
   \   00000054   0x2110             MOVS     R1,#+16
   \   00000056   0x202A             MOVS     R0,#+42
   \   00000058   0x.... 0x....      BL       IIC_LDC_write_byte
     27              IIC_LDC_write_byte(LDC1314_ADDR, SETTLECOUNT_CH1, 0x000A);//通道转换稳定时间，LDC使用这个稳定时间在初始化通道0的转换开始之前来让LC传感器稳定。
   \   0000005C   0x220A             MOVS     R2,#+10
   \   0000005E   0x2111             MOVS     R1,#+17
   \   00000060   0x202A             MOVS     R0,#+42
   \   00000062   0x.... 0x....      BL       IIC_LDC_write_byte
     28              IIC_LDC_write_byte(LDC1314_ADDR, SETTLECOUNT_CH2, 0x000A);//0000 0000 0000 0000:稳定时间(tsx) = 32 / fREFx
   \   00000066   0x220A             MOVS     R2,#+10
   \   00000068   0x2112             MOVS     R1,#+18
   \   0000006A   0x202A             MOVS     R0,#+42
   \   0000006C   0x.... 0x....      BL       IIC_LDC_write_byte
     29              IIC_LDC_write_byte(LDC1314_ADDR, SETTLECOUNT_CH3, 0x000A);//b0000 0000 0000 0010~b1111 1111 1111 1111:稳定时间(tsx) = (CH0_SETTLECOUNT * 16) / fREF0
   \   00000070   0x220A             MOVS     R2,#+10
   \   00000072   0x2113             MOVS     R1,#+19
   \   00000074   0x202A             MOVS     R0,#+42
   \   00000076   0x.... 0x....      BL       IIC_LDC_write_byte
     30              
     31              IIC_LDC_write_byte(LDC1314_ADDR, CLOCK_DIVIDERS_CH0, 0x1002);//0001 0000 0000 0010
   \   0000007A   0xF241 0x0202      MOVW     R2,#+4098
   \   0000007E   0x2114             MOVS     R1,#+20
   \   00000080   0x202A             MOVS     R0,#+42
   \   00000082   0x.... 0x....      BL       IIC_LDC_write_byte
     32              IIC_LDC_write_byte(LDC1314_ADDR, CLOCK_DIVIDERS_CH1, 0x1002);//CH0_FIN_DIVIDER通道输入分频fin   CHx_FREF_DIVIDER通道参考分频fREF
   \   00000086   0xF241 0x0202      MOVW     R2,#+4098
   \   0000008A   0x2115             MOVS     R1,#+21
   \   0000008C   0x202A             MOVS     R0,#+42
   \   0000008E   0x.... 0x....      BL       IIC_LDC_write_byte
     33              IIC_LDC_write_byte(LDC1314_ADDR, CLOCK_DIVIDERS_CH2, 0x1002);//CHx_FIN_DIVIDER ≥ b0001: finx=fSENSOR0/CH0_FIN_DIVIDER   finx = fSENSOR0 / 1
   \   00000092   0xF241 0x0202      MOVW     R2,#+4098
   \   00000096   0x2116             MOVS     R1,#+22
   \   00000098   0x202A             MOVS     R0,#+42
   \   0000009A   0x.... 0x....      BL       IIC_LDC_write_byte
     34              IIC_LDC_write_byte(LDC1314_ADDR, CLOCK_DIVIDERS_CH3, 0x1002);//CHx_FREF_DIVIDER ≥ b00’0000’0001:  fREFx = fCLK/CHx_FREF_DIVIDER  fREFx = fCLK / 2
   \   0000009E   0xF241 0x0202      MOVW     R2,#+4098
   \   000000A2   0x2117             MOVS     R1,#+23
   \   000000A4   0x202A             MOVS     R0,#+42
   \   000000A6   0x.... 0x....      BL       IIC_LDC_write_byte
     35              
     36              IIC_LDC_write_byte(LDC1314_ADDR, ERROR_CONFIG, 0x0000);//0000 0000 0000 0000  
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0x2119             MOVS     R1,#+25
   \   000000AE   0x202A             MOVS     R0,#+42
   \   000000B0   0x.... 0x....      BL       IIC_LDC_write_byte
     37              IIC_LDC_write_byte(LDC1314_ADDR, MUX_CONFIG, 0xC20D);//0xA20F);//0xA20C);  1100 0010 0000 1101 多通道模式，四通道，33MHz
   \   000000B4   0xF24C 0x220D      MOVW     R2,#+49677
   \   000000B8   0x211B             MOVS     R1,#+27
   \   000000BA   0x202A             MOVS     R0,#+42
   \   000000BC   0x.... 0x....      BL       IIC_LDC_write_byte
     38              
     39              IIC_LDC_write_byte(LDC1314_ADDR, DRIVE_CURRENT_CH0, 0x9000);//1001 0000 0000 0000   驱动电流大小
   \   000000C0   0xF44F 0x4210      MOV      R2,#+36864
   \   000000C4   0x211E             MOVS     R1,#+30
   \   000000C6   0x202A             MOVS     R0,#+42
   \   000000C8   0x.... 0x....      BL       IIC_LDC_write_byte
     40              IIC_LDC_write_byte(LDC1314_ADDR, DRIVE_CURRENT_CH1, 0x9000);  
   \   000000CC   0xF44F 0x4210      MOV      R2,#+36864
   \   000000D0   0x211F             MOVS     R1,#+31
   \   000000D2   0x202A             MOVS     R0,#+42
   \   000000D4   0x.... 0x....      BL       IIC_LDC_write_byte
     41              IIC_LDC_write_byte(LDC1314_ADDR, DRIVE_CURRENT_CH2, 0x9000);  
   \   000000D8   0xF44F 0x4210      MOV      R2,#+36864
   \   000000DC   0x2120             MOVS     R1,#+32
   \   000000DE   0x202A             MOVS     R0,#+42
   \   000000E0   0x.... 0x....      BL       IIC_LDC_write_byte
     42              IIC_LDC_write_byte(LDC1314_ADDR, DRIVE_CURRENT_CH3, 0x9000);  
   \   000000E4   0xF44F 0x4210      MOV      R2,#+36864
   \   000000E8   0x2121             MOVS     R1,#+33
   \   000000EA   0x202A             MOVS     R0,#+42
   \   000000EC   0x.... 0x....      BL       IIC_LDC_write_byte
     43              
     44              IIC_LDC_write_byte(LDC1314_ADDR, CONFIG, 0x1601);//0xD681); //1101 0110 1000 0001
   \   000000F0   0xF241 0x6201      MOVW     R2,#+5633
   \   000000F4   0x211A             MOVS     R1,#+26
   \   000000F6   0x202A             MOVS     R0,#+42
   \   000000F8   0x.... 0x....      BL       IIC_LDC_write_byte
     45          
     46          }
   \   000000FC   0xBD01             POP      {R0,PC}          ;; return
     47          
     48          

   \                                 In section .text, align 2, keep-with-next
     49          void LDC1314_CH_Read(uint16 *LDCstr)
     50          {
   \                     LDC1314_CH_Read: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     51          
     52                LDCstr[0]=IIC_LDC_read_byte(LDC1314_ADDR,DATA_CH0)&0x0FFF;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x202A             MOVS     R0,#+42
   \   00000008   0x.... 0x....      BL       IIC_LDC_read_byte
   \   0000000C   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000000E   0x0D00             LSRS     R0,R0,#+20
   \   00000010   0x8020             STRH     R0,[R4, #+0]
     53                LDCstr[1]=IIC_LDC_read_byte(LDC1314_ADDR,DATA_CH1)&0x0FFF;
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x202A             MOVS     R0,#+42
   \   00000016   0x.... 0x....      BL       IIC_LDC_read_byte
   \   0000001A   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000001C   0x0D00             LSRS     R0,R0,#+20
   \   0000001E   0x8060             STRH     R0,[R4, #+2]
     54                LDCstr[2]=IIC_LDC_read_byte(LDC1314_ADDR,DATA_CH2)&0x0FFF;
   \   00000020   0x2104             MOVS     R1,#+4
   \   00000022   0x202A             MOVS     R0,#+42
   \   00000024   0x.... 0x....      BL       IIC_LDC_read_byte
   \   00000028   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000002A   0x0D00             LSRS     R0,R0,#+20
   \   0000002C   0x80A0             STRH     R0,[R4, #+4]
     55                LDCstr[3]=IIC_LDC_read_byte(LDC1314_ADDR,DATA_CH3)&0x0FFF; 
   \   0000002E   0x2106             MOVS     R1,#+6
   \   00000030   0x202A             MOVS     R0,#+42
   \   00000032   0x.... 0x....      BL       IIC_LDC_read_byte
   \   00000036   0x0500             LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   00000038   0x0D00             LSRS     R0,R0,#+20
   \   0000003A   0x80E0             STRH     R0,[R4, #+6]
     56          
     57          }
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     58          void LDC1314_Run(void)
     59          {
     60            
     61          
     62          
     63          
     64          
     65          }
   \                     LDC1314_Run: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     66          
     67          

   \                                 In section .text, align 2, keep-with-next
     68          int Speed_Control(int Speed_Test)    //速度PID
     69          {
   \                     Speed_Control: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0001             MOVS     R1,R0
     70              int Speed_Set_R = 0;
   \   00000004   0x2000             MOVS     R0,#+0
     71              static int SpeedDev[4] = {0};
     72              static int SpeedInt = 0;
     73              static int SpeedUp, SpeedUi, SpeedUd;
     74              SpeedDev[3] = SpeedDev[2];
   \   00000006   0x....             LDR.N    R2,??DataTable2
   \   00000008   0x6892             LDR      R2,[R2, #+8]
   \   0000000A   0x....             LDR.N    R3,??DataTable2
   \   0000000C   0x60DA             STR      R2,[R3, #+12]
     75              SpeedDev[2] = SpeedDev[1];
   \   0000000E   0x....             LDR.N    R2,??DataTable2
   \   00000010   0x6852             LDR      R2,[R2, #+4]
   \   00000012   0x....             LDR.N    R3,??DataTable2
   \   00000014   0x609A             STR      R2,[R3, #+8]
     76              SpeedDev[1] = SpeedDev[0];
   \   00000016   0x....             LDR.N    R2,??DataTable2
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x....             LDR.N    R3,??DataTable2
   \   0000001C   0x605A             STR      R2,[R3, #+4]
     77          
     78              SpeedDev[0] = SpeedWant-Speed_Test;
   \   0000001E   0x....             LDR.N    R2,??DataTable2_1
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0x1A52             SUBS     R2,R2,R1
   \   00000024   0x....             LDR.N    R3,??DataTable2
   \   00000026   0x601A             STR      R2,[R3, #+0]
     79          
     80              SpeedDev[0] = SpeedDev[0]>500?500:(SpeedDev[0]<-500?-500:SpeedDev[0]);
   \   00000028   0x....             LDR.N    R2,??DataTable2
   \   0000002A   0x6812             LDR      R2,[R2, #+0]
   \   0000002C   0xF5B2 0x7FFA      CMP      R2,#+500
   \   00000030   0xDD04             BLE.N    ??Speed_Control_0
   \   00000032   0xF44F 0x72FA      MOV      R2,#+500
   \   00000036   0x....             LDR.N    R3,??DataTable2
   \   00000038   0x601A             STR      R2,[R3, #+0]
   \   0000003A   0xE00C             B.N      ??Speed_Control_1
   \                     ??Speed_Control_0: (+1)
   \   0000003C   0x....             LDR.N    R2,??DataTable2
   \   0000003E   0x6812             LDR      R2,[R2, #+0]
   \   00000040   0xF512 0x7FFA      CMN      R2,#+500
   \   00000044   0xDA03             BGE.N    ??Speed_Control_2
   \   00000046   0x....             LDR.N    R2,??DataTable2_2  ;; 0xfffffe0c
   \   00000048   0x....             LDR.N    R3,??DataTable2
   \   0000004A   0x601A             STR      R2,[R3, #+0]
   \   0000004C   0xE003             B.N      ??Speed_Control_1
   \                     ??Speed_Control_2: (+1)
   \   0000004E   0x....             LDR.N    R2,??DataTable2
   \   00000050   0x6812             LDR      R2,[R2, #+0]
   \   00000052   0x....             LDR.N    R3,??DataTable2
   \   00000054   0x601A             STR      R2,[R3, #+0]
     81          
     82              SpeedInt += SpeedDev[0];
   \                     ??Speed_Control_1: (+1)
   \   00000056   0x....             LDR.N    R2,??DataTable2_3
   \   00000058   0x6812             LDR      R2,[R2, #+0]
   \   0000005A   0x....             LDR.N    R3,??DataTable2
   \   0000005C   0x681B             LDR      R3,[R3, #+0]
   \   0000005E   0x189A             ADDS     R2,R3,R2
   \   00000060   0x....             LDR.N    R3,??DataTable2_3
   \   00000062   0x601A             STR      R2,[R3, #+0]
     83              SpeedInt =  SpeedInt>10000?10000:(SpeedInt<-10000?-10000:SpeedInt);
   \   00000064   0x....             LDR.N    R2,??DataTable2_3
   \   00000066   0x6812             LDR      R2,[R2, #+0]
   \   00000068   0xF242 0x7311      MOVW     R3,#+10001
   \   0000006C   0x429A             CMP      R2,R3
   \   0000006E   0xDB04             BLT.N    ??Speed_Control_3
   \   00000070   0xF242 0x7210      MOVW     R2,#+10000
   \   00000074   0x....             LDR.N    R3,??DataTable2_3
   \   00000076   0x601A             STR      R2,[R3, #+0]
   \   00000078   0xE00C             B.N      ??Speed_Control_4
   \                     ??Speed_Control_3: (+1)
   \   0000007A   0x....             LDR.N    R2,??DataTable2_3
   \   0000007C   0x6812             LDR      R2,[R2, #+0]
   \   0000007E   0x....             LDR.N    R3,??DataTable2_4  ;; 0xffffd8f0
   \   00000080   0x429A             CMP      R2,R3
   \   00000082   0xDA03             BGE.N    ??Speed_Control_5
   \   00000084   0x....             LDR.N    R2,??DataTable2_4  ;; 0xffffd8f0
   \   00000086   0x....             LDR.N    R3,??DataTable2_3
   \   00000088   0x601A             STR      R2,[R3, #+0]
   \   0000008A   0xE003             B.N      ??Speed_Control_4
   \                     ??Speed_Control_5: (+1)
   \   0000008C   0x....             LDR.N    R2,??DataTable2_3
   \   0000008E   0x6812             LDR      R2,[R2, #+0]
   \   00000090   0x....             LDR.N    R3,??DataTable2_3
   \   00000092   0x601A             STR      R2,[R3, #+0]
     84              
     85              SpeedUp = (int)(Speed_Kp * SpeedDev[0]);
   \                     ??Speed_Control_4: (+1)
   \   00000094   0x....             LDR.N    R2,??DataTable2_5
   \   00000096   0x6812             LDR      R2,[R2, #+0]
   \   00000098   0x....             LDR.N    R3,??DataTable2
   \   0000009A   0x681B             LDR      R3,[R3, #+0]
   \   0000009C   0x435A             MULS     R2,R3,R2
   \   0000009E   0x....             LDR.N    R3,??DataTable2_6
   \   000000A0   0x601A             STR      R2,[R3, #+0]
     86              SpeedUi = (int)(Speed_Ki * SpeedInt/10);
   \   000000A2   0x....             LDR.N    R2,??DataTable2_7
   \   000000A4   0x6812             LDR      R2,[R2, #+0]
   \   000000A6   0x....             LDR.N    R3,??DataTable2_3
   \   000000A8   0x681B             LDR      R3,[R3, #+0]
   \   000000AA   0x435A             MULS     R2,R3,R2
   \   000000AC   0x230A             MOVS     R3,#+10
   \   000000AE   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   000000B2   0x....             LDR.N    R3,??DataTable2_8
   \   000000B4   0x601A             STR      R2,[R3, #+0]
     87              SpeedUd = (int)(Speed_Kd * (SpeedDev[0]-SpeedDev[1]));
   \   000000B6   0x....             LDR.N    R2,??DataTable2_9
   \   000000B8   0x6812             LDR      R2,[R2, #+0]
   \   000000BA   0x....             LDR.N    R3,??DataTable2
   \   000000BC   0x681B             LDR      R3,[R3, #+0]
   \   000000BE   0x....             LDR.N    R4,??DataTable2
   \   000000C0   0x6864             LDR      R4,[R4, #+4]
   \   000000C2   0x1B1B             SUBS     R3,R3,R4
   \   000000C4   0x435A             MULS     R2,R3,R2
   \   000000C6   0x....             LDR.N    R3,??DataTable2_10
   \   000000C8   0x601A             STR      R2,[R3, #+0]
     88           
     89              Speed_Set_R = SpeedUp + SpeedUi + SpeedUd;
   \   000000CA   0x....             LDR.N    R2,??DataTable2_6
   \   000000CC   0x6812             LDR      R2,[R2, #+0]
   \   000000CE   0x....             LDR.N    R3,??DataTable2_8
   \   000000D0   0x681B             LDR      R3,[R3, #+0]
   \   000000D2   0x189A             ADDS     R2,R3,R2
   \   000000D4   0x....             LDR.N    R3,??DataTable2_10
   \   000000D6   0x681B             LDR      R3,[R3, #+0]
   \   000000D8   0x189A             ADDS     R2,R3,R2
   \   000000DA   0x0010             MOVS     R0,R2
     90          
     91              return Speed_Set_R;
   \   000000DC   0xBC10             POP      {R4}
   \   000000DE   0x4770             BX       LR               ;; return
     92          }

   \                                 In section .bss, align 4
   \                     ??SpeedDev:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     ??SpeedInt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??SpeedUp:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??SpeedUi:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??SpeedUd:
   \   00000000                      DS8 4
     93          
     94          

   \                                 In section .text, align 2, keep-with-next
     95          int QUADRead(void)                    //0为右1为左  5.3凌晨改动
     96          {
     97           uint8 direction;
     98           int speed;
     99            direction = (FTM2_QDCTRL & FTM_QDCTRL_QUADIR_MASK) >> FTM_QDCTRL_QUADIR_SHIFT;//正负标志
   \                     QUADRead: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable2_11  ;; 0x400b8080
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0xF3C2 0x0280      UBFX     R2,R2,#+2,#+1
   \   00000008   0x0011             MOVS     R1,R2
    100            if(direction)
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD004             BEQ.N    ??QUADRead_0
    101            {
    102             speed = -(int)FTM2_CNT;                  //改   计数递增 到顶部溢出 负值 反转？
   \   00000010   0x....             LDR.N    R2,??DataTable2_12  ;; 0x400b8004
   \   00000012   0x6812             LDR      R2,[R2, #+0]
   \   00000014   0x4252             RSBS     R2,R2,#+0
   \   00000016   0x0010             MOVS     R0,R2
   \   00000018   0xE005             B.N      ??QUADRead_1
    103             
    104            }
    105            else
    106            {
    107             speed = 10000 - (int)FTM2_CNT;    //计数递减 到底部溢出 正值 正转？ 
   \                     ??QUADRead_0: (+1)
   \   0000001A   0xF242 0x7210      MOVW     R2,#+10000
   \   0000001E   0x....             LDR.N    R3,??DataTable2_12  ;; 0x400b8004
   \   00000020   0x681B             LDR      R3,[R3, #+0]
   \   00000022   0x1AD2             SUBS     R2,R2,R3
   \   00000024   0x0010             MOVS     R0,R2
    108             
    109            }
    110            FTM2_CNT = 0;
   \                     ??QUADRead_1: (+1)
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x....             LDR.N    R3,??DataTable2_12  ;; 0x400b8004
   \   0000002A   0x601A             STR      R2,[R3, #+0]
    111           
    112           
    113           if(speed < -10000)    speed = 0;
   \   0000002C   0x....             LDR.N    R2,??DataTable2_4  ;; 0xffffd8f0
   \   0000002E   0x4290             CMP      R0,R2
   \   00000030   0xDA01             BGE.N    ??QUADRead_2
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x0010             MOVS     R0,R2
    114           if(speed > 10000)     speed = 0;
   \                     ??QUADRead_2: (+1)
   \   00000036   0xF242 0x7211      MOVW     R2,#+10001
   \   0000003A   0x4290             CMP      R0,R2
   \   0000003C   0xDB01             BLT.N    ??QUADRead_3
   \   0000003E   0x2200             MOVS     R2,#+0
   \   00000040   0x0010             MOVS     R0,R2
    115           return speed;
   \                     ??QUADRead_3: (+1)
   \   00000042   0x4770             BX       LR               ;; return
    116          }
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void MotorControl(int data)
    119          {
    120             if(data > 0)
   \                     MotorControl: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xDB0C             BLT.N    ??MotorControl_0
    121             {
    122              if(data > 4999)
   \   00000004   0xF241 0x3188      MOVW     R1,#+5000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xDB02             BLT.N    ??MotorControl_1
    123               data = 4999;
   \   0000000C   0xF241 0x3187      MOVW     R1,#+4999
   \   00000010   0x0008             MOVS     R0,R1
    124          
    125              FTM0_C4V = 0;
   \                     ??MotorControl_1: (+1)
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x....             LDR.N    R2,??DataTable2_13  ;; 0x40038030
   \   00000016   0x6011             STR      R1,[R2, #+0]
    126              FTM0_C5V = data;      //左轮正转
   \   00000018   0x....             LDR.N    R1,??DataTable2_14  ;; 0x40038038
   \   0000001A   0x6008             STR      R0,[R1, #+0]
   \   0000001C   0xE018             B.N      ??MotorControl_2
    127              
    128             }
    129             else if(data < 0)
   \                     ??MotorControl_0: (+1)
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD50E             BPL.N    ??MotorControl_3
    130             {
    131              
    132              if(data < -4999)
   \   00000022   0x....             LDR.N    R1,??DataTable2_15  ;; 0xffffec79
   \   00000024   0x4288             CMP      R0,R1
   \   00000026   0xDA01             BGE.N    ??MotorControl_4
    133               data = -4999;
   \   00000028   0x....             LDR.N    R1,??DataTable2_15  ;; 0xffffec79
   \   0000002A   0x0008             MOVS     R0,R1
    134          
    135              FTM0_C5V = 0;
   \                     ??MotorControl_4: (+1)
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x....             LDR.N    R2,??DataTable2_14  ;; 0x40038038
   \   00000030   0x6011             STR      R1,[R2, #+0]
    136              FTM0_C4V = -1 * data;  //左轮反转
   \   00000032   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000036   0xFB01 0xF100      MUL      R1,R1,R0
   \   0000003A   0x....             LDR.N    R2,??DataTable2_13  ;; 0x40038030
   \   0000003C   0x6011             STR      R1,[R2, #+0]
   \   0000003E   0xE007             B.N      ??MotorControl_2
    137              
    138             }
    139             else if(data == 0)
   \                     ??MotorControl_3: (+1)
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD105             BNE.N    ??MotorControl_2
    140             {
    141              FTM0_C7V = 0;
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x....             LDR.N    R2,??DataTable2_16  ;; 0x40038048
   \   00000048   0x6011             STR      R1,[R2, #+0]
    142              FTM0_C6V = 0;
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0x....             LDR.N    R2,??DataTable2_17  ;; 0x40038040
   \   0000004E   0x6011             STR      R1,[R2, #+0]
    143             }
    144          }
   \                     ??MotorControl_2: (+1)
   \   00000050   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     ??SpeedDev

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     SpeedWant

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xFFFFFE0C         DC32     0xfffffe0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     ??SpeedInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0xFFFFD8F0         DC32     0xffffd8f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     Speed_Kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ??SpeedUp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     Speed_Ki

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ??SpeedUi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     Speed_Kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     ??SpeedUd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x400B8080         DC32     0x400b8080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x400B8004         DC32     0x400b8004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x40038030         DC32     0x40038030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x40038038         DC32     0x40038038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0xFFFFEC79         DC32     0xffffec79

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x40038048         DC32     0x40038048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x40038040         DC32     0x40038040

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LDC1314_CH_Read
         8   -> IIC_LDC_read_byte
       8   LDC1314_Init
         8   -> IIC_LDC_write_byte
         8   -> gpio_init
       0   LDC1314_Run
       0   MotorControl
       0   QUADRead
       4   Speed_Control


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      62  LDC1314_CH_Read
     254  LDC1314_Init
       2  LDC1314_Run
      82  MotorControl
      68  QUADRead
      16  SpeedDev
       4  SpeedInt
       4  SpeedUd
       4  SpeedUi
       4  SpeedUp
       4  SpeedWant
     224  Speed_Control
       4  Speed_Kd
       4  Speed_Ki
       4  Speed_Kp

 
  48 bytes in section .bss
 764 bytes in section .text
 
 764 bytes of CODE memory
  48 bytes of DATA memory

Errors: none
Warnings: none
