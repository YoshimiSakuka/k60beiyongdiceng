###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_rtc.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_rtc.c -D DEBUG
#        -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_rtc.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_rtc.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_rtc.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_rtc.c
     11           * @brief      rtc模块函数
     12           * @author     山外科技
     13           * @version    v5.1
     14           * @date       2014-04-25
     15           */
     16          
     17          #include "common.h"
     18          #include "MK60_rtc.h"
     19          
     20          /*!
     21           *  @brief      RTC初始化
     22           *  @since      v5.0
     23           *  Sample usage:       rtc_init();    //RTC初始化
     24           */

   \                                 In section .text, align 2, keep-with-next
     25          void rtc_init(void)
     26          {
   \                     rtc_init: (+1)
   \   00000000   0xB081             SUB      SP,SP,#+4
     27              volatile uint32 delay;
     28          
     29              SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;    //开启 RTC 时钟
   \   00000002   0x....             LDR.N    R0,??DataTable5  ;; 0x4004803c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF050 0x5000      ORRS     R0,R0,#0x20000000
   \   0000000A   0x....             LDR.N    R1,??DataTable5  ;; 0x4004803c
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     30          
     31              RTC_CR  = RTC_CR_SWR_MASK;          //复位 RTC 寄存器（除 SWR， RTC_WAR ， RTC_RAR ）
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x....             LDR.N    R1,??DataTable5_1  ;; 0x4003d010
   \   00000012   0x6008             STR      R0,[R1, #+0]
     32              RTC_CR  &= ~RTC_CR_SWR_MASK;        //清空复位标志位
   \   00000014   0x....             LDR.N    R0,??DataTable5_1  ;; 0x4003d010
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x0840             LSRS     R0,R0,#+1
   \   0000001A   0x0040             LSLS     R0,R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable5_1  ;; 0x4003d010
   \   0000001E   0x6008             STR      R0,[R1, #+0]
     33              RTC_CR  = (0
     34                         | RTC_CR_OSCE_MASK       //32.768 kHz 晶振 使能
     35                         //| RTC_CR_SC2P_MASK     //加入 2p 电容
     36                         //| RTC_CR_SC4P_MASK     //加入 4p 电容
     37                         //| RTC_CR_SC8P_MASK     //加入 8p 电容
     38                         | RTC_CR_SC16P_MASK      //加入 16p 电容
     39                         | RTC_CR_CLKO_MASK       //RTC_CLKOUT 输出 32k 使能 (0表示输出，1表示禁止)
     40                        );
   \   00000020   0xF44F 0x60E0      MOV      R0,#+1792
   \   00000024   0x....             LDR.N    R1,??DataTable5_1  ;; 0x4003d010
   \   00000026   0x6008             STR      R0,[R1, #+0]
     41          
     42              delay = 0x600000;
   \   00000028   0xF45F 0x00C0      MOVS     R0,#+6291456
   \   0000002C   0x9000             STR      R0,[SP, #+0]
     43              while(delay--);                     //等待 32K 晶振稳定（起振时间需要看晶振手册）
   \                     ??rtc_init_0: (+1)
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x1E41             SUBS     R1,R0,#+1
   \   00000032   0x9100             STR      R1,[SP, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD1FA             BNE.N    ??rtc_init_0
     44          
     45              //设置时间补偿
     46              RTC_TCR = (0
     47                         | RTC_TCR_CIR(0)         //补偿间隔(可以从1秒(0X0)到256(0xFF)的范围内),8bit
     48                         | RTC_TCR_TCR(0)         //补偿值的范围从 32*1024Hz -127 的周期到 32*1024Hz +128 周期，即 TCR 范围为 (int8)-127 ~ (int8)128
     49                        );
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR.N    R1,??DataTable5_2  ;; 0x4003d00c
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     50          
     51              RTC_SR &= RTC_SR_TCE_MASK;          //禁用RTC 计数器，便于后续设置寄存器  TSR 和 TPR
   \   0000003E   0x....             LDR.N    R0,??DataTable5_3  ;; 0x4003d014
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF010 0x0010      ANDS     R0,R0,#0x10
   \   00000046   0x....             LDR.N    R1,??DataTable5_3  ;; 0x4003d014
   \   00000048   0x6008             STR      R0,[R1, #+0]
     52          
     53              //时间和闹钟设置
     54              RTC_TSR = 0;                        //当前时间
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x....             LDR.N    R1,??DataTable5_4  ;; 0x4003d000
   \   0000004E   0x6008             STR      R0,[R1, #+0]
     55              RTC_TAR = 0;                        //闹钟时间
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x....             LDR.N    R1,??DataTable5_5  ;; 0x4003d008
   \   00000054   0x6008             STR      R0,[R1, #+0]
     56          
     57              //中断配置
     58              RTC_IER = (0
     59                         //| RTC_IER_TAIE_MASK    //闹钟中断使能（0表示禁止，1表示使能）
     60                         //| RTC_IER_TOIE_MASK    //溢出中断使能（0表示禁止，1表示使能）
     61                         //| RTC_IER_TIIE_MASK    //无效时间中断使能（0表示禁止，1表示使能）
     62                        );
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x....             LDR.N    R1,??DataTable5_6  ;; 0x4003d01c
   \   0000005A   0x6008             STR      R0,[R1, #+0]
     63          
     64              RTC_SR |= RTC_SR_TCE_MASK;          //使能RTC 计数器
   \   0000005C   0x....             LDR.N    R0,??DataTable5_3  ;; 0x4003d014
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000064   0x....             LDR.N    R1,??DataTable5_3  ;; 0x4003d014
   \   00000066   0x6008             STR      R0,[R1, #+0]
     65          }
   \   00000068   0xB001             ADD      SP,SP,#+4
   \   0000006A   0x4770             BX       LR               ;; return
     66          
     67          /*!
     68           *  @brief      设置当前时间
     69           *  @since      v5.0
     70           */

   \                                 In section .text, align 2, keep-with-next
     71          void rtc_set_time(uint32 seconds)
     72          {
     73              RTC_SR &= ~RTC_SR_TCE_MASK;         //禁用RTC 计数器，便于后续设置寄存器  TSR 和 TPR
   \                     rtc_set_time: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_3  ;; 0x4003d014
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF031 0x0110      BICS     R1,R1,#0x10
   \   00000008   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4003d014
   \   0000000A   0x6011             STR      R1,[R2, #+0]
     74              RTC_TSR = seconds;                  //当前时间
   \   0000000C   0x....             LDR.N    R1,??DataTable5_4  ;; 0x4003d000
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     75              RTC_SR |= RTC_SR_TCE_MASK;          //使能RTC 计数器
   \   00000010   0x....             LDR.N    R1,??DataTable5_3  ;; 0x4003d014
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0xF051 0x0110      ORRS     R1,R1,#0x10
   \   00000018   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4003d014
   \   0000001A   0x6011             STR      R1,[R2, #+0]
     76          
     77          }
   \   0000001C   0x4770             BX       LR               ;; return
     78          
     79          /*!
     80           *  @brief      获取当前时间
     81           *  @since      v5.0
     82           */

   \                                 In section .text, align 2, keep-with-next
     83          uint32 rtc_get_time(void)
     84          {
     85              return RTC_TSR;
   \                     rtc_get_time: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_4  ;; 0x4003d000
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR               ;; return
     86          }
     87          
     88          
     89          /*!
     90           *  @brief      设置RTC闹钟时间，使能闹钟中断
     91           *  @param      alarm    闹钟时间
     92           *  @return     设置闹钟结果(0表示失败，1表示成功)
     93           *  @since      v5.0
     94           *  Sample usage:       if( rtc_set_alarm(sec) == 0 )       //设置闹钟时间 为 sec
     95                                  {
     96                                      printf("\n设置闹钟失败，不能设置过去的时间为闹钟时间!");
     97                                  }
     98           */

   \                                 In section .text, align 2, keep-with-next
     99          uint8 rtc_set_alarm(uint32 alarm)
    100          {
   \                     rtc_set_alarm: (+1)
   \   00000000   0x0001             MOVS     R1,R0
    101              if(alarm < RTC_TSR)                 //闹钟时间不能为过去时间
   \   00000002   0x....             LDR.N    R0,??DataTable5_4  ;; 0x4003d000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4281             CMP      R1,R0
   \   00000008   0xD201             BCS.N    ??rtc_set_alarm_0
    102              {
    103                  return 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE014             B.N      ??rtc_set_alarm_1
    104              }
    105          
    106              RTC_SR &= ~RTC_SR_TCE_MASK;         //禁用RTC 计数器，便于后续设置寄存器  TSR 和 TPR
   \                     ??rtc_set_alarm_0: (+1)
   \   0000000E   0x....             LDR.N    R0,??DataTable5_3  ;; 0x4003d014
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF030 0x0010      BICS     R0,R0,#0x10
   \   00000016   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4003d014
   \   00000018   0x6010             STR      R0,[R2, #+0]
    107          
    108              RTC_TAR = alarm;                    //闹钟时间
   \   0000001A   0x....             LDR.N    R0,??DataTable5_5  ;; 0x4003d008
   \   0000001C   0x6001             STR      R1,[R0, #+0]
    109              RTC_SR |= RTC_SR_TCE_MASK;          //使能RTC 计数器
   \   0000001E   0x....             LDR.N    R0,??DataTable5_3  ;; 0x4003d014
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000026   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4003d014
   \   00000028   0x6010             STR      R0,[R2, #+0]
    110          
    111              RTC_IER |= RTC_IER_TAIE_MASK;       //使能闹钟中断
   \   0000002A   0x....             LDR.N    R0,??DataTable5_6  ;; 0x4003d01c
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000032   0x....             LDR.N    R2,??DataTable5_6  ;; 0x4003d01c
   \   00000034   0x6010             STR      R0,[R2, #+0]
    112          
    113              return 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??rtc_set_alarm_1: (+1)
   \   00000038   0x4770             BX       LR               ;; return
    114          }
    115          
    116          /*!
    117           *  @brief      关闭闹钟中断
    118           *  @since      v5.0
    119           */

   \                                 In section .text, align 2, keep-with-next
    120          void rtc_close_alarm()
    121          {
    122              RTC_IER &= ~RTC_IER_TAIE_MASK;      //禁止闹钟中断
   \                     rtc_close_alarm: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_6  ;; 0x4003d01c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable5_6  ;; 0x4003d01c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    123          }
   \   0000000C   0x4770             BX       LR               ;; return
    124          
    125          /*!
    126           *  @brief      RTC测试中断服务函数
    127           *  @since      v5.0
    128           *  @warning    此函数需要用户根据自己需求完成，这里仅仅是提供一个模版
    129           *  Sample usage:       set_vector_handler(RTC_VECTORn , rtc_test_handler);    //把 rtc_test_handler 函数添加到中断向量表，不需要我们手动调用
    130           */

   \                                 In section .text, align 2, keep-with-next
    131          void rtc_test_handler(void)
    132          {
    133              uint32 sr = RTC_SR;
   \                     rtc_test_handler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_3  ;; 0x4003d014
   \   00000002   0x6800             LDR      R0,[R0, #+0]
    134          
    135              if(sr & RTC_SR_TIF_MASK) //无效设置
   \   00000004   0x07C1             LSLS     R1,R0,#+31
   \   00000006   0xD505             BPL.N    ??rtc_test_handler_0
    136              {
    137                  //清TIF、TOF位，禁用计数时写TSR寄存器就会清空此位
    138                  RTC_SR = (0
    139                            //| RTC_SR_TCE_MASK    //计能使数(0为禁止，1为使能)
    140                            );
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4003d014
   \   0000000C   0x6011             STR      R1,[R2, #+0]
    141                  RTC_TSR = 0;  //秒计数寄存器，写操作来清空TIF位
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR.N    R2,??DataTable5_4  ;; 0x4003d000
   \   00000012   0x6011             STR      R1,[R2, #+0]
    142          
    143                  //下面由用户加入自己的代码
    144                  //printf("\nRTC无效设置");
    145              }
    146          
    147              if(sr & RTC_SR_TOF_MASK)  //溢出
   \                     ??rtc_test_handler_0: (+1)
   \   00000014   0x0781             LSLS     R1,R0,#+30
   \   00000016   0xD505             BPL.N    ??rtc_test_handler_1
    148              {
    149          
    150                  //清TIF、TOF位，禁用计数时写TSR寄存器就会清空此位
    151                  RTC_SR = (0
    152                            //| RTC_SR_TCE_MASK    //计能使数(0为禁止，1为使能)
    153                            );
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4003d014
   \   0000001C   0x6011             STR      R1,[R2, #+0]
    154                  RTC_TSR = 0;  //秒计数寄存器，写操作来清空TIF位
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x....             LDR.N    R2,??DataTable5_4  ;; 0x4003d000
   \   00000022   0x6011             STR      R1,[R2, #+0]
    155          
    156                  //下面由用户加入自己的代码
    157                  //printf("\nRTC溢出");
    158              }
    159          
    160              if(sr & RTC_SR_TAF_MASK)  //报警
   \                     ??rtc_test_handler_1: (+1)
   \   00000024   0x0741             LSLS     R1,R0,#+29
   \   00000026   0xD502             BPL.N    ??rtc_test_handler_2
    161              {
    162                  //写 TAR 来清空 SR_TAF
    163                  RTC_TAR = 0;
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x....             LDR.N    R2,??DataTable5_5  ;; 0x4003d008
   \   0000002C   0x6011             STR      R1,[R2, #+0]
    164          
    165                  //下面由用户加入自己的代码
    166                  //printf("\nRTC报警");
    167              }
    168          
    169          
    170          
    171          
    172          }
   \                     ??rtc_test_handler_2: (+1)
   \   0000002E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4003D010         DC32     0x4003d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4003D00C         DC32     0x4003d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4003D014         DC32     0x4003d014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x4003D000         DC32     0x4003d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x4003D008         DC32     0x4003d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4003D01C         DC32     0x4003d01c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   rtc_close_alarm
       0   rtc_get_time
       4   rtc_init
       0   rtc_set_alarm
       0   rtc_set_time
       0   rtc_test_handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
      14  rtc_close_alarm
       6  rtc_get_time
     108  rtc_init
      58  rtc_set_alarm
      30  rtc_set_time
      48  rtc_test_handler

 
 292 bytes in section .text
 
 292 bytes of CODE memory

Errors: none
Warnings: none
