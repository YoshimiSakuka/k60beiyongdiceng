###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_usb.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_usb.c -D DEBUG
#        -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_usb.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_usb.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_usb.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_usb.c
     11           * @brief      USB 代码库(目前 仅 有 虚拟 串口 )
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-09-26
     15           * @note       本例程 移植 飞思卡尔公司 提供的 K60 参考代码
     16           */
     17          
     18          
     19          #include "common.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF010 0x021F      ANDS     R2,R0,#0x1F
   \   00000006   0x4091             LSLS     R1,R1,R2
   \   00000008   0x....             LDR.N    R2,??DataTable3  ;; 0xe000e100
   \   0000000A   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   0000000C   0x0943             LSRS     R3,R0,#+5
   \   0000000E   0xF842 0x1023      STR      R1,[R2, R3, LSL #+2]
   \   00000012   0x4770             BX       LR               ;; return
     20          #include "usb.h"
     21          #include "MK60_usb.h"
     22          
     23          
     24          /*!
     25           *  @brief      USB模块 初始化
     26           *  @since      v5.0
     27           */

   \                                 In section .text, align 2, keep-with-next
     28          void usb_init(void)
     29          {
   \                     usb_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     30              /* 软件配置 */
     31              Setup_Pkt = (tUSB_Setup *)BufferPointer[bEP0OUT_ODD];
   \   00000002   0x....             LDR.N    R0,??DataTable3_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R1,??DataTable3_2
   \   00000008   0x6008             STR      R0,[R1, #+0]
     32              gu8USB_State = uPOWER;                          //标记状态为上电状态
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable3_3
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
     33              /* MPU 配置 */
     34              MPU_CESR = 0;                                   // MPU is disable. All accesses from all bus masters are allowed
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable3_4  ;; 0x4000d000
   \   00000014   0x6008             STR      R0,[R1, #+0]
     35          
     36              /* SIM 配置 */
     37          #ifdef USB_CLOCK_CLKIN
     38              FLAG_SET(SIM_SCGC5_PORTE_SHIFT, SIM_SCGC5);
     39              PORTE_PCR26 = (0 | PORT_PCR_MUX(7));            // Enabling PTE26 as CLK input
     40          
     41          #endif
     42          
     43          
     44          #if defined(MK60DZ10)
     45          #ifdef USB_CLOCK_PLL
     46              FLAG_SET(SIM_SOPT2_PLLFLLSEL_SHIFT, SIM_SOPT2); // Select PLL output
   \   00000016   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40048004
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \   0000001E   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40048004
   \   00000020   0x6008             STR      R0,[R1, #+0]
     47          #endif
     48          
     49          
     50          #ifndef USB_CLOCK_CLKIN
     51              FLAG_SET(SIM_SOPT2_USBSRC_SHIFT, SIM_SOPT2);    // PLL/FLL selected as CLK source
   \   00000022   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40048004
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   0000002A   0x....             LDR.N    R1,??DataTable3_5  ;; 0x40048004
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     52          #endif
     53          
     54              SIM_CLKDIV2 = ((SIM_CLKDIV2 & ~( SIM_CLKDIV2_USBDIV_MASK | SIM_CLKDIV2_USBFRAC_MASK ))
     55                             | SIM_CLKDIV2_USBDIV(USB_CLK_DIV)                    //USB 分频因子
     56                             | (USB_CLK_FRAC << SIM_CLKDIV2_USBFRAC_SHIFT)        //USB 倍频因子
     57                             //USB clk = PLL × [ (USBFRAC+1) / (USBDIV+1) ]
     58                            );
   \   0000002E   0x....             LDR.N    R0,??DataTable3_6  ;; 0x40048048
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x0900             LSRS     R0,R0,#+4
   \   00000034   0x0100             LSLS     R0,R0,#+4
   \   00000036   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000003A   0x....             LDR.N    R1,??DataTable3_6  ;; 0x40048048
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     59              SIM_SCGC4 |= SIM_SCGC4_USBOTG_MASK;             //USB Clock Gating
   \   0000003E   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40048034
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \   00000046   0x....             LDR.N    R1,??DataTable3_7  ;; 0x40048034
   \   00000048   0x6008             STR      R0,[R1, #+0]
     60                                                              //开启USB模块的时钟源
     61          #elif defined(MK60F15)
     62          #ifdef USB_CLOCK_PLL
     63              SIM_SOPT2 |=(0
     64                          | SIM_SOPT2_PLLFLLSEL(1)       /** PLL0 reference */   
     65                          | SIM_SOPT2_USBFSRC(0)         /** MCGPLLCLK as CLKC source */
     66                          | SIM_SOPT2_USBF_CLKSEL_MASK   /** USB fractional divider like USB reference clock */  
     67                          );
     68          
     69          #endif
     70          
     71          
     72          #ifndef USB_CLOCK_CLKIN
     73              FLAG_SET(SIM_SOPT2_USBHSRC_SHIFT, SIM_SOPT2);    // PLL/FLL selected as CLK source
     74          #endif
     75          
     76              SIM_CLKDIV2 = ((SIM_CLKDIV2 & ~( SIM_CLKDIV2_USBFSDIV_MASK | SIM_CLKDIV2_USBFSFRAC_MASK ))
     77                             | SIM_CLKDIV2_USBFSDIV(USB_CLK_DIV)                  //USB 分频因子
     78                             | (USB_CLK_FRAC << SIM_CLKDIV2_USBFSFRAC_SHIFT)      //USB 倍频因子
     79                             //USB clk = PLL × [ (USBFRAC+1) / (USBDIV+1) ]
     80                            );
     81          
     82              //SIM_SCGC6 |= SIM_SCGC6_USB2OTG_MASK;
     83              SIM_SCGC4 |= SIM_SCGC4_USBFS_MASK;             //USB Clock Gating
     84                                                              //开启USB模块的时钟源
     85          #endif
     86          
     87          
     88              /* NVIC模块配置 */
     89              set_vector_handler(USB0_VECTORn, USB_ISR);
   \   0000004A   0x....             LDR.N    R1,??DataTable3_8
   \   0000004C   0x2059             MOVS     R0,#+89
   \   0000004E   0x.... 0x....      BL       set_vector_handler
     90              enable_irq(USB0_IRQn);                          //使能NVIC中的USB OTG中断
   \   00000052   0x2049             MOVS     R0,#+73
   \   00000054   0x.... 0x....      BL       NVIC_EnableIRQ
     91          
     92              /* USB模块配置 */
     93              USB0_USBTRC0 |= USB_USBTRC0_USBRESET_MASK;      //复位USB模块
   \   00000058   0x....             LDR.N    R0,??DataTable3_9  ;; 0x4007210c
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000060   0x....             LDR.N    R1,??DataTable3_9  ;; 0x4007210c
   \   00000062   0x7008             STRB     R0,[R1, #+0]
     94              while(FLAG_CHK(USB_USBTRC0_USBRESET_SHIFT, USB0_USBTRC0));
   \                     ??usb_init_0: (+1)
   \   00000064   0x....             LDR.N    R0,??DataTable3_9  ;; 0x4007210c
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x0600             LSLS     R0,R0,#+24
   \   0000006A   0xD4FB             BMI.N    ??usb_init_0
     95              USB0_BDTPAGE1 = (uint8)((uint32)tBDTtable >> 8); //配置当前缓冲描述符表BDT
   \   0000006C   0x....             LDR.N    R0,??DataTable3_10
   \   0000006E   0x0A00             LSRS     R0,R0,#+8
   \   00000070   0x....             LDR.N    R1,??DataTable3_11  ;; 0x4007209c
   \   00000072   0x7008             STRB     R0,[R1, #+0]
     96              USB0_BDTPAGE2 = (uint8)((uint32)tBDTtable >> 16);
   \   00000074   0x....             LDR.N    R0,??DataTable3_10
   \   00000076   0x0C00             LSRS     R0,R0,#+16
   \   00000078   0x....             LDR.N    R1,??DataTable3_12  ;; 0x400720b0
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
     97              USB0_BDTPAGE3 = (uint8)((uint32)tBDTtable >> 24);
   \   0000007C   0x....             LDR.N    R0,??DataTable3_10
   \   0000007E   0x0E00             LSRS     R0,R0,#+24
   \   00000080   0x....             LDR.N    R1,??DataTable3_13  ;; 0x400720b4
   \   00000082   0x7008             STRB     R0,[R1, #+0]
     98          
     99              // 清 USB 复位标记
    100              FLAG_SET(USB_ISTAT_USBRST_MASK, USB0_ISTAT);
   \   00000084   0x....             LDR.N    R0,??DataTable3_14  ;; 0x40072080
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000008C   0x....             LDR.N    R1,??DataTable3_14  ;; 0x40072080
   \   0000008E   0x7008             STRB     R0,[R1, #+0]
    101          
    102              // 使能 USB 复位中断
    103              FLAG_SET(USB_INTEN_USBRSTEN_SHIFT, USB0_INTEN);
   \   00000090   0x....             LDR.N    R0,??DataTable3_15  ;; 0x40072084
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000098   0x....             LDR.N    R1,??DataTable3_15  ;; 0x40072084
   \   0000009A   0x7008             STRB     R0,[R1, #+0]
    104          
    105              // Enable weak pull downs
    106              USB0_USBCTRL = 0x40;
   \   0000009C   0x2040             MOVS     R0,#+64
   \   0000009E   0x....             LDR.N    R1,??DataTable3_16  ;; 0x40072100
   \   000000A0   0x7008             STRB     R0,[R1, #+0]
    107          
    108              USB0_USBTRC0 |= 0x40;
   \   000000A2   0x....             LDR.N    R0,??DataTable3_9  ;; 0x4007210c
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   000000AA   0x....             LDR.N    R1,??DataTable3_9  ;; 0x4007210c
   \   000000AC   0x7008             STRB     R0,[R1, #+0]
    109          
    110              USB0_CTL |= 0x01;
   \   000000AE   0x....             LDR.N    R0,??DataTable3_17  ;; 0x40072094
   \   000000B0   0x7800             LDRB     R0,[R0, #+0]
   \   000000B2   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000B6   0x....             LDR.N    R1,??DataTable3_17  ;; 0x40072094
   \   000000B8   0x7008             STRB     R0,[R1, #+0]
    111          
    112              // 上拉使能
    113              FLAG_SET(USB_CONTROL_DPPULLUPNONOTG_SHIFT, USB0_CONTROL);
   \   000000BA   0x....             LDR.N    R0,??DataTable3_18  ;; 0x40072108
   \   000000BC   0x7800             LDRB     R0,[R0, #+0]
   \   000000BE   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   000000C2   0x....             LDR.N    R1,??DataTable3_18  ;; 0x40072108
   \   000000C4   0x7008             STRB     R0,[R1, #+0]
    114          }
   \   000000C6   0xBD01             POP      {R0,PC}          ;; return
    115          
    116          
    117          /*!
    118           *  @brief      USB 虚拟串口 初始化
    119           *  @since      v5.0
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          void usb_com_init(void)
    122          {
   \                     usb_com_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    123              usb_init(); //初始化USB模块
   \   00000002   0x.... 0x....      BL       usb_init
    124          
    125              CDC_Init(); //初始化USB CDC模式
   \   00000006   0x.... 0x....      BL       CDC_Init
    126          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    127          
    128          
    129          /*!
    130           *  @brief      USB 等待枚举
    131           *  @since      v5.0
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          void usb_enum_wait(void)
    134          {
    135              while(gu8USB_State != uENUMERATED);//等待USB设备被枚举
   \                     usb_enum_wait: (+1)
   \                     ??usb_enum_wait_0: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3_3
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD1FB             BNE.N    ??usb_enum_wait_0
    136          }
   \   00000008   0x4770             BX       LR               ;; return
    137          
    138          /*!
    139           *  @brief      USB 虚拟串口 接收
    140           *  @param      rx_buf          数据接收缓冲区
    141           *  @return     接收到的长度
    142           *  @since      v5.0
    143           */

   \                                 In section .text, align 2, keep-with-next
    144          uint8 usb_com_rx(uint8_t *rx_buf)
    145          {
   \                     usb_com_rx: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    146              uint8 len;
    147              uint8 temp = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    148              uint8 *pu8EPBuffer;
    149          
    150              if(FLAG_CHK(EP_OUT, gu8USB_Flags)) // 如果有数据到来
   \   00000006   0x....             LDR.N    R0,??DataTable3_19
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x0700             LSLS     R0,R0,#+28
   \   0000000C   0xD51E             BPL.N    ??usb_com_rx_0
    151              {
    152                  len = USB_EP_OUT_SizeCheck(EP_OUT);
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0x.... 0x....      BL       USB_EP_OUT_SizeCheck
   \   00000014   0x0005             MOVS     R5,R0
    153                  temp = len;
   \   00000016   0x002E             MOVS     R6,R5
    154                  pu8EPBuffer = gu8EP3_OUT_ODD_Buffer;
   \   00000018   0x....             LDR.N    R0,??DataTable3_20
   \   0000001A   0x0007             MOVS     R7,R0
    155          
    156                  while(len--)
   \                     ??usb_com_rx_1: (+1)
   \   0000001C   0x0028             MOVS     R0,R5
   \   0000001E   0x1E45             SUBS     R5,R0,#+1
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD004             BEQ.N    ??usb_com_rx_2
    157                      *rx_buf++ = *pu8EPBuffer++;
   \   00000026   0x7838             LDRB     R0,[R7, #+0]
   \   00000028   0x7020             STRB     R0,[R4, #+0]
   \   0000002A   0x1C7F             ADDS     R7,R7,#+1
   \   0000002C   0x1C64             ADDS     R4,R4,#+1
   \   0000002E   0xE7F5             B.N      ??usb_com_rx_1
    158          
    159                  usbEP_Reset(EP_OUT);
   \                     ??usb_com_rx_2: (+1)
   \   00000030   0x2040             MOVS     R0,#+64
   \   00000032   0x....             LDR.N    R1,??DataTable3_10
   \   00000034   0xF8A1 0x0062      STRH     R0,[R1, #+98]
    160                  usbSIE_CONTROL(EP_OUT);
   \   00000038   0x2080             MOVS     R0,#+128
   \   0000003A   0x....             LDR.N    R1,??DataTable3_10
   \   0000003C   0xF881 0x0060      STRB     R0,[R1, #+96]
    161                  FLAG_CLR(EP_OUT, gu8USB_Flags);
   \   00000040   0x....             LDR.N    R0,??DataTable3_19
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0xF010 0x00F7      ANDS     R0,R0,#0xF7
   \   00000048   0x....             LDR.N    R1,??DataTable3_19
   \   0000004A   0x7008             STRB     R0,[R1, #+0]
    162              }
    163              return temp;
   \                     ??usb_com_rx_0: (+1)
   \   0000004C   0x0030             MOVS     R0,R6
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    164          }
    165          
    166          
    167          /*!
    168           *  @brief      USB 虚拟串口 发送
    169           *  @param      tx_buf          数据发送缓冲区
    170           *  @param      需要发送的数据长度
    171           *  @since      v5.0
    172           */

   \                                 In section .text, align 2, keep-with-next
    173          void usb_com_tx(uint8 *tx_buf, uint8 len)
    174          {
   \                     usb_com_tx: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    175              EP_IN_Transfer(EP_IN, tx_buf, len);
   \   00000006   0x002A             MOVS     R2,R5
   \   00000008   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000000A   0x0021             MOVS     R1,R4
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       EP_IN_Transfer
    176          }
   \   00000012   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     BufferPointer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     Setup_Pkt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     gu8USB_State

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4000D000         DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40048048         DC32     0x40048048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     USB_ISR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x4007210C         DC32     0x4007210c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     tBDTtable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4007209C         DC32     0x4007209c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x400720B0         DC32     0x400720b0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x400720B4         DC32     0x400720b4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x40072080         DC32     0x40072080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x40072084         DC32     0x40072084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x40072100         DC32     0x40072100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x40072094         DC32     0x40072094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x40072108         DC32     0x40072108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x........         DC32     gu8USB_Flags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x........         DC32     gu8EP3_OUT_ODD_Buffer
    177          
    178          
    179          
    180          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   NVIC_EnableIRQ
       8   usb_com_init
         8   -> CDC_Init
         8   -> usb_init
      24   usb_com_rx
        24   -> USB_EP_OUT_SizeCheck
      16   usb_com_tx
        16   -> EP_IN_Transfer
       0   usb_enum_wait
       8   usb_init
         8   -> NVIC_EnableIRQ
         8   -> set_vector_handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      20  NVIC_EnableIRQ
      12  usb_com_init
      82  usb_com_rx
      20  usb_com_tx
      10  usb_enum_wait
     200  usb_init

 
 428 bytes in section .text
 
 428 bytes of CODE memory

Errors: none
Warnings: none
