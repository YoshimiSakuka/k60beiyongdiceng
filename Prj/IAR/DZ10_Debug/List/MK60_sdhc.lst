###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:30
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_sdhc.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_sdhc.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_sdhc.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_sdhc.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_sdhc.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           *     本驱动由brtos代码提取并修改而成:http://code.google.com/p/brtos/downloads/detail?name=BRTOS%201.66%20Kinetis%20-%20SD%20card%20-%20BMP%2024%20bit.rar&can=2&q=
     11           *
     12           * @file       MK60_sdhc.c
     13           * @brief      SD模块函数
     14           * @author     山外科技 & gustavo(brtos作者)
     15           * @version    v5.0
     16           * @date       2013-09-19
     17           */
     18          
     19          
     20          #include "common.h"
     21          #include "MK60_sdhc.h"
     22          

   \                                 In section .bss, align 4
     23          SDCARD_t        SDHC_card;
   \                     SDHC_card:
   \   00000000                      DS8 20
     24          
     25          
     26          //SD卡命令

   \                                 In section .rodata, align 4
     27          const uint32 ESDHC_COMMAND_XFERTYP[] =
   \                     ESDHC_COMMAND_XFERTYP:
   \   00000000   0x00000000         DC32 0, 16777216, 34144256, 52035584, 67108864, 84017152, 102367232
   \              0x01000000   
   \              0x02090000   
   \              0x031A0000   
   \              0x04000000   
   \              0x05020000   
   \              0x061A0000   
   \   0000001C   0x071B0000         DC32 119209984, 135921664, 151584768, 168361984, 186253312, 215678976
   \              0x081A0000   
   \              0x09090000   
   \              0x0A090000   
   \              0x0B1A0000   
   \              0x0CDB0000   
   \   00000034   0x0D1A0000         DC32 219807744, 4294967295, 251658240, 270139392, 286916608, 303693828
   \              0xFFFFFFFF   
   \              0x0F000000   
   \              0x101A0000   
   \              0x111A0000   
   \              0x121A0004   
   \   0000004C   0xFFFFFFFF         DC32 4294967295, 337248256, 4294967295, 370802688, 387579904, 404357120
   \              0x141A0000   
   \              0xFFFFFFFF   
   \              0x161A0000   
   \              0x171A0000   
   \              0x181A0000   
   \   00000064   0x191A0004         DC32 421134340, 437911552, 454688768, 471531520, 488308736, 505020416
   \              0x1A1A0000   
   \              0x1B1A0000   
   \              0x1C1B0000   
   \              0x1D1B0000   
   \              0x1E1A0000   
   \   0000007C   0xFFFFFFFF         DC32 4294967295, 538574848, 555352064, 572129280, 588906496, 605683712
   \              0x201A0000   
   \              0x211A0000   
   \              0x221A0000   
   \              0x231A0000   
   \              0x241A0000   
   \   00000094   0x251A0000         DC32 622460928, 639303680, 654442496, 672792576, 687996928, 706412544
   \              0x261B0000   
   \              0x27020000   
   \              0x281A0000   
   \              0x29020000   
   \              0x2A1B0000   
   \   000000AC   0xFFFFFFFF         DC32 4294967295, 4294967295, 4294967295, 4294967295, 4294967295
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \   000000C0   0xFFFFFFFF         DC32 4294967295, 4294967295, 4294967295, 857341952, 874119168
   \              0xFFFFFFFF   
   \              0xFFFFFFFF   
   \              0x331A0000   
   \              0x341A0000   
   \   000000D4   0x351A0000         DC32 890896384, 4294967295, 924450816, 941293568, 4294967295
   \              0xFFFFFFFF   
   \              0x371A0000   
   \              0x381B0000   
   \              0xFFFFFFFF   
   \   000000E8   0xFFFFFFFF         DC32 4294967295, 4294967295, 1008402432, 1025179648, 4294967295
   \              0xFFFFFFFF   
   \              0x3C1B0000   
   \              0x3D1B0000   
   \              0xFFFFFFFF   
   \   000000FC   0xFFFFFFFF         DC32 4294967295
     28          {
     29              /* CMD0 */
     30              SDHC_XFERTYP_CMDINX(ESDHC_CMD0) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     31              SDHC_XFERTYP_CMDINX(ESDHC_CMD1) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     32              SDHC_XFERTYP_CMDINX(ESDHC_CMD2) | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136),
     33              SDHC_XFERTYP_CMDINX(ESDHC_CMD3) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     34              SDHC_XFERTYP_CMDINX(ESDHC_CMD4) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     35              /* CMD5 */
     36              SDHC_XFERTYP_CMDINX(ESDHC_CMD5) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     37              SDHC_XFERTYP_CMDINX(ESDHC_CMD6) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     38              SDHC_XFERTYP_CMDINX(ESDHC_CMD7) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     39              SDHC_XFERTYP_CMDINX(ESDHC_CMD8) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     40              SDHC_XFERTYP_CMDINX(ESDHC_CMD9) | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136),
     41              /* CMD10 */
     42              SDHC_XFERTYP_CMDINX(ESDHC_CMD10) | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136),
     43              SDHC_XFERTYP_CMDINX(ESDHC_CMD11) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     44              SDHC_XFERTYP_CMDINX(ESDHC_CMD12) | SDHC_XFERTYP_CMDTYP(ESDHC_XFERTYP_CMDTYP_ABORT) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     45              SDHC_XFERTYP_CMDINX(ESDHC_CMD13) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     46              ~0,
     47              /* CMD15 */
     48              SDHC_XFERTYP_CMDINX(ESDHC_CMD15) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO),
     49              SDHC_XFERTYP_CMDINX(ESDHC_CMD16) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     50              SDHC_XFERTYP_CMDINX(ESDHC_CMD17) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     51              SDHC_XFERTYP_CMDINX(ESDHC_CMD18) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48)| SDHC_XFERTYP_AC12EN_MASK,
     52              ~0,
     53              /* CMD20 */
     54              SDHC_XFERTYP_CMDINX(ESDHC_CMD20) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     55              ~0,
     56              SDHC_XFERTYP_CMDINX(ESDHC_ACMD22) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     57              SDHC_XFERTYP_CMDINX(ESDHC_ACMD23) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     58              SDHC_XFERTYP_CMDINX(ESDHC_CMD24) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     59              /* CMD25 */
     60              SDHC_XFERTYP_CMDINX(ESDHC_CMD25) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48) | SDHC_XFERTYP_AC12EN_MASK,
     61              SDHC_XFERTYP_CMDINX(ESDHC_CMD26) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     62              SDHC_XFERTYP_CMDINX(ESDHC_CMD27) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     63              SDHC_XFERTYP_CMDINX(ESDHC_CMD28) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     64              SDHC_XFERTYP_CMDINX(ESDHC_CMD29) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     65              /* CMD30 */
     66              SDHC_XFERTYP_CMDINX(ESDHC_CMD30) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     67              ~0,
     68              SDHC_XFERTYP_CMDINX(ESDHC_CMD32) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     69              SDHC_XFERTYP_CMDINX(ESDHC_CMD33) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     70              SDHC_XFERTYP_CMDINX(ESDHC_CMD34) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     71              /* CMD35 */
     72              SDHC_XFERTYP_CMDINX(ESDHC_CMD35) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     73              SDHC_XFERTYP_CMDINX(ESDHC_CMD36) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     74              SDHC_XFERTYP_CMDINX(ESDHC_CMD37) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     75              SDHC_XFERTYP_CMDINX(ESDHC_CMD38) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     76              SDHC_XFERTYP_CMDINX(ESDHC_CMD39) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     77              /* CMD40 */
     78              SDHC_XFERTYP_CMDINX(ESDHC_CMD40) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     79              SDHC_XFERTYP_CMDINX(ESDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     80              SDHC_XFERTYP_CMDINX(ESDHC_CMD42) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     81              ~0,
     82              ~0,
     83              /* CMD45 */
     84              ~0,
     85              ~0,
     86              ~0,
     87              ~0,
     88              ~0,
     89              /* CMD50 */
     90              ~0,
     91              SDHC_XFERTYP_CMDINX(ESDHC_ACMD51) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     92              SDHC_XFERTYP_CMDINX(ESDHC_CMD52) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     93              SDHC_XFERTYP_CMDINX(ESDHC_CMD53) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     94              ~0,
     95              /* CMD55 */
     96              SDHC_XFERTYP_CMDINX(ESDHC_CMD55) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48),
     97              SDHC_XFERTYP_CMDINX(ESDHC_CMD56) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
     98              ~0,
     99              ~0,
    100              ~0,
    101              /* CMD60 */
    102              SDHC_XFERTYP_CMDINX(ESDHC_CMD60) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
    103              SDHC_XFERTYP_CMDINX(ESDHC_CMD61) | SDHC_XFERTYP_CICEN_MASK | SDHC_XFERTYP_CCCEN_MASK | SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY),
    104              ~0,
    105              ~0
    106          };
    107          
    108          #define SDHC_CMD_MAX    ARR_SIZE( ESDHC_COMMAND_XFERTYP )
    109          
    110          
    111          
    112          /*!
    113           *  @brief      SDHC初始化(仅初始化模块，不初始化SD卡)
    114           *  @since      v5.0
    115           */

   \                                 In section .text, align 2, keep-with-next
    116          void SDHC_init()
    117          {
   \                     SDHC_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    118          
    119              SDHC_card.CARD = ESDHC_CARD_NONE;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable3
   \   00000008   0x6008             STR      R0,[R1, #+0]
    120          
    121          #if defined( MK60DZ10)
    122              /* 使能 SDHC 模块时钟 */
    123              SIM_SCGC3 |= SIM_SCGC3_SDHC_MASK;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable3_1  ;; 0x40048030
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable3_1  ;; 0x40048030
   \   00000018   0x6008             STR      R0,[R1, #+0]
    124          
    125          #elif defined( MK60F15)
    126              /* 使能 SDHC 模块时钟 */
    127              SIM_SCGC3 |= SIM_SCGC3_ESDHC_MASK;
    128          #endif
    129          
    130              /* 复位 ESDHC */
    131              SDHC_SYSCTL = SDHC_SYSCTL_RSTA_MASK | SDHC_SYSCTL_SDCLKFS(0x80);
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable3_2  ;; 0x1008000
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable3_3  ;; 0x400b102c
   \   00000022   0x6008             STR      R0,[R1, #+0]
    132              while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA_MASK) {};
   \                     ??SDHC_init_0: (+1)
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable3_3  ;; 0x400b102c
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x01C0             LSLS     R0,R0,#+7
   \   0000002C   0xD4FA             BMI.N    ??SDHC_init_0
    133          
    134              /* 初始化值 */
    135              SDHC_VENDOR     = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable3_4  ;; 0x400b10c0
   \   00000034   0x6008             STR      R0,[R1, #+0]
    136              SDHC_BLKATTR    = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
   \   00000036   0xF45F 0x3081      MOVS     R0,#+66048
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable3_5  ;; 0x400b1004
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    137              SDHC_PROCTL     = SDHC_PROCTL_EMODE(ESDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD_MASK;
   \   00000040   0x2028             MOVS     R0,#+40
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable3_6  ;; 0x400b1028
   \   00000046   0x6008             STR      R0,[R1, #+0]
    138              SDHC_WML        = SDHC_WML_RDWML(1) | SDHC_WML_WRWML(1);
   \   00000048   0xF05F 0x1001      MOVS     R0,#+65537
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable3_7  ;; 0x400b1044
   \   00000050   0x6008             STR      R0,[R1, #+0]
    139          
    140              /* 配置 ESDHC 波特率 */
    141              SDHC_set_baudrate ( SDHC_INIT_BANDRATE );
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable3_8  ;; 0x493e0
   \   00000056   0x.... 0x....      BL       SDHC_set_baudrate
    142          
    143              /* Poll inhibit bits */
    144              while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB_MASK | SDHC_PRSSTAT_CDIHB_MASK)) {};
   \                     ??SDHC_init_1: (+1)
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable3_9  ;; 0x400b1024
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF010 0x0F03      TST      R0,#0x3
   \   00000064   0xD1F9             BNE.N    ??SDHC_init_1
    145          
    146              /* 初始化管脚复用 */
    147              port_init(PTE0, ALT4 | HDS | PULLUP ); /* ESDHC.D1  */
   \   00000066   0xF240 0x4143      MOVW     R1,#+1091
   \   0000006A   0x2080             MOVS     R0,#+128
   \   0000006C   0x.... 0x....      BL       port_init
    148              port_init(PTE1, ALT4 | HDS | PULLUP ); /* ESDHC.D0  */
   \   00000070   0xF240 0x4143      MOVW     R1,#+1091
   \   00000074   0x2081             MOVS     R0,#+129
   \   00000076   0x.... 0x....      BL       port_init
    149              port_init(PTE2, ALT4 | HDS          ); /* ESDHC.CLK */
   \   0000007A   0xF44F 0x6188      MOV      R1,#+1088
   \   0000007E   0x2082             MOVS     R0,#+130
   \   00000080   0x.... 0x....      BL       port_init
    150              port_init(PTE3, ALT4 | HDS | PULLUP ); /* ESDHC.CMD */
   \   00000084   0xF240 0x4143      MOVW     R1,#+1091
   \   00000088   0x2083             MOVS     R0,#+131
   \   0000008A   0x.... 0x....      BL       port_init
    151              port_init(PTE4, ALT4 | HDS | PULLUP ); /* ESDHC.D3  */
   \   0000008E   0xF240 0x4143      MOVW     R1,#+1091
   \   00000092   0x2084             MOVS     R0,#+132
   \   00000094   0x.... 0x....      BL       port_init
    152              port_init(PTE5, ALT4 | HDS | PULLUP ); /* ESDHC.D2  */
   \   00000098   0xF240 0x4143      MOVW     R1,#+1091
   \   0000009C   0x2085             MOVS     R0,#+133
   \   0000009E   0x.... 0x....      BL       port_init
    153          
    154              /* 使能请求 */
    155              SDHC_IRQSTAT = 0xFFFF;
   \   000000A2   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000A6   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x400b1030
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    156              SDHC_IRQSTATEN =      SDHC_IRQSTATEN_DEBESEN_MASK | SDHC_IRQSTATEN_DCESEN_MASK | SDHC_IRQSTATEN_DTOESEN_MASK
    157                                    | SDHC_IRQSTATEN_CIESEN_MASK | SDHC_IRQSTATEN_CEBESEN_MASK | SDHC_IRQSTATEN_CCESEN_MASK | SDHC_IRQSTATEN_CTOESEN_MASK
    158                                    | SDHC_IRQSTATEN_BRRSEN_MASK | SDHC_IRQSTATEN_BWRSEN_MASK | SDHC_IRQSTATEN_CRMSEN_MASK
    159                                    | SDHC_IRQSTATEN_TCSEN_MASK | SDHC_IRQSTATEN_CCSEN_MASK;
   \   000000AC   0x.... 0x....      LDR.W    R0,??DataTable3_11  ;; 0x7f00b3
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable3_12  ;; 0x400b1034
   \   000000B4   0x6008             STR      R0,[R1, #+0]
    160          
    161              /* 发送 80 个 最初的时钟周期 到卡上，卡上电期间是需要用到 */
    162              SDHC_SYSCTL |= SDHC_SYSCTL_INITA_MASK;
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable3_3  ;; 0x400b102c
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable3_3  ;; 0x400b102c
   \   000000C4   0x6008             STR      R0,[R1, #+0]
    163              while (SDHC_SYSCTL & SDHC_SYSCTL_INITA_MASK) {};        //等待 80个SD周期发送完成
   \                     ??SDHC_init_2: (+1)
   \   000000C6   0x.... 0x....      LDR.W    R0,??DataTable3_3  ;; 0x400b102c
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x0100             LSLS     R0,R0,#+4
   \   000000CE   0xD4FA             BMI.N    ??SDHC_init_2
    164          
    165              /* 检测 卡是否插入 */
    166              if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS_MASK)              // CINS 字段 由 0变1表示插入卡，由1变0表示拔出卡
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable3_9  ;; 0x400b1024
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x03C0             LSLS     R0,R0,#+15
   \   000000D8   0xD503             BPL.N    ??SDHC_init_3
    167              {
    168                  SDHC_card.CARD = ESDHC_CARD_UNKNOWN;          //插入了卡，类型未知
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x.... 0x....      LDR.W    R1,??DataTable3
   \   000000E0   0x6008             STR      R0,[R1, #+0]
    169              }
    170              SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM_MASK;                  //写1清 CRM 标志位。0表示插入卡，1表示移除卡。写1清0后，卡还是没有插入，则恢复值为1
   \                     ??SDHC_init_3: (+1)
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   000000E6   0x6800             LDR      R0,[R0, #+0]
   \   000000E8   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000EC   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x400b1030
   \   000000F0   0x6008             STR      R0,[R1, #+0]
    171          }
   \   000000F2   0xBD01             POP      {R0,PC}          ;; return
    172          
    173          
    174          
    175          
    176          /*!
    177           *  @brief      SDHC波特率配置
    178           *  @param      baudrate    波特率(Hz)
    179           *  @since      v5.0
    180           */

   \                                 In section .text, align 2, keep-with-next
    181          void SDHC_set_baudrate(uint32 baudrate)
    182          {
   \                     SDHC_set_baudrate: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
    183              uint32 pres, div, min, minpres = 0x80, mindiv = 0x0F;
   \   00000002   0x2480             MOVS     R4,#+128
   \   00000004   0x250F             MOVS     R5,#+15
    184              int32  val;
    185              uint32 clock = SDHC_CLOCK;
   \   00000006   0x.... 0x....      LDR.W    R7,??DataTable3_13
   \   0000000A   0x683F             LDR      R7,[R7, #+0]
   \   0000000C   0xF44F 0x7C7A      MOV      R12,#+1000
   \   00000010   0xFB0C 0xF707      MUL      R7,R12,R7
    186          
    187              /* 计算最佳配置 */
    188              //SDCLK 时钟频率 = 基时钟/(预分频器*除数)
    189              //SD 时钟频率的最大值是 50MHz
    190              //预分频 = 2,4,8,16,32,64,128,256  ,且 SDCLKFS = 预分频 >> 1;
    191              //除数 = DVS + 1 ,DVS 的取值范围是 0~ 0xF
    192              min = (uint32) - 1;                         //先把 min 配置为最大值
   \   00000014   0xF05F 0x3CFF      MOVS     R12,#-1
   \   00000018   0x4663             MOV      R3,R12
    193              for (pres = 2; pres <= 256; pres <<= 1)     //pres 即 预分频器 prescaler
   \   0000001A   0xF05F 0x0C02      MOVS     R12,#+2
   \   0000001E   0x4661             MOV      R1,R12
   \                     ??SDHC_set_baudrate_0: (+1)
   \   00000020   0xF5B1 0x7F80      CMP      R1,#+256
   \   00000024   0xD816             BHI.N    ??SDHC_set_baudrate_1
    194              {
    195                  for (div = 1; div <= 16; div++)         //div 即 除数Divisor
   \   00000026   0xF05F 0x0C01      MOVS     R12,#+1
   \   0000002A   0x4662             MOV      R2,R12
   \                     ??SDHC_set_baudrate_2: (+1)
   \   0000002C   0x2A11             CMP      R2,#+17
   \   0000002E   0xD20F             BCS.N    ??SDHC_set_baudrate_3
    196                  {
    197                      val = pres * div * baudrate - clock;
   \   00000030   0xFB02 0xFC01      MUL      R12,R2,R1
   \   00000034   0xFB00 0xFC0C      MUL      R12,R0,R12
   \   00000038   0xEBBC 0x0C07      SUBS     R12,R12,R7
   \   0000003C   0x4666             MOV      R6,R12
    198                      if (val >= 0)                       //波特率 大于或等于 设定的目标值
   \   0000003E   0x2E00             CMP      R6,#+0
   \   00000040   0xD404             BMI.N    ??SDHC_set_baudrate_4
    199                      {
    200                          if (min > val)                  //选择最接近 目标值 的
   \   00000042   0x429E             CMP      R6,R3
   \   00000044   0xD202             BCS.N    ??SDHC_set_baudrate_4
    201                          {
    202                              min = val;
   \   00000046   0x0033             MOVS     R3,R6
    203                              minpres = pres;
   \   00000048   0x000C             MOVS     R4,R1
    204                              mindiv = div;
   \   0000004A   0x0015             MOVS     R5,R2
    205                          }
    206                      }
    207                  }
   \                     ??SDHC_set_baudrate_4: (+1)
   \   0000004C   0x1C52             ADDS     R2,R2,#+1
   \   0000004E   0xE7ED             B.N      ??SDHC_set_baudrate_2
    208              }
   \                     ??SDHC_set_baudrate_3: (+1)
   \   00000050   0x0049             LSLS     R1,R1,#+1
   \   00000052   0xE7E5             B.N      ??SDHC_set_baudrate_0
    209          
    210              /* 禁止 ESDHC 时钟 */
    211              SDHC_SYSCTL &= (~ SDHC_SYSCTL_SDCLKEN_MASK);
   \                     ??SDHC_set_baudrate_1: (+1)
   \   00000054   0x.... 0x....      LDR.W    R12,??DataTable3_3  ;; 0x400b102c
   \   00000058   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   0000005C   0xF03C 0x0C08      BICS     R12,R12,#0x8
   \   00000060   0x.... 0x....      LDR.W    LR,??DataTable3_3  ;; 0x400b102c
   \   00000064   0xF8CE 0xC000      STR      R12,[LR, #+0]
    212          
    213              /* 改变分频系数 */
    214              SDHC_SYSCTL = (   (SDHC_SYSCTL & (~ (SDHC_SYSCTL_DTOCV_MASK | SDHC_SYSCTL_SDCLKFS_MASK | SDHC_SYSCTL_DVS_MASK)) ) //先 清 SDHC_SYSCTL 的 DTOCV 、SDCLKFS 、DVS 字段
    215                                | SDHC_SYSCTL_DTOCV(0x0E)               //数据超时计数器值 = SDCLK x (DTOCV + 213)  ,DTOCV 的范围是 0 - 0x0E
    216                                | SDHC_SYSCTL_SDCLKFS(minpres >> 1)     //SDCLK 频率选择 = 基时钟 / (1 << SDCLKFS )
    217                                | SDHC_SYSCTL_DVS(mindiv - 1)
    218          
    219                            );
   \   00000068   0x.... 0x....      LDR.W    R12,??DataTable3_3  ;; 0x400b102c
   \   0000006C   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   00000070   0xF36F 0x1C13      BFC      R12,#+4,#+16
   \   00000074   0xEA5F 0x1EC4      LSLS     LR,R4,#+7
   \   00000078   0xF41E 0x4E7F      ANDS     LR,LR,#0xFF00
   \   0000007C   0xEA5E 0x0C0C      ORRS     R12,LR,R12
   \   00000080   0xF1B5 0x0E01      SUBS     LR,R5,#+1
   \   00000084   0xEA5F 0x1E0E      LSLS     LR,LR,#+4
   \   00000088   0xF01E 0x0EF0      ANDS     LR,LR,#0xF0
   \   0000008C   0xEA5E 0x0C0C      ORRS     R12,LR,R12
   \   00000090   0xF45C 0x2C60      ORRS     R12,R12,#0xE0000
   \   00000094   0x.... 0x....      LDR.W    LR,??DataTable3_3  ;; 0x400b102c
   \   00000098   0xF8CE 0xC000      STR      R12,[LR, #+0]
    220          
    221              /* 等待 SD 时钟稳定  */
    222              while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB_MASK));
   \                     ??SDHC_set_baudrate_5: (+1)
   \   0000009C   0x.... 0x....      LDR.W    R12,??DataTable3_9  ;; 0x400b1024
   \   000000A0   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   000000A4   0xEA5F 0x7C0C      LSLS     R12,R12,#+28
   \   000000A8   0xD5F8             BPL.N    ??SDHC_set_baudrate_5
    223          
    224          
    225              /* 使能 ESDHC 时钟 */
    226              SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN_MASK;
   \   000000AA   0x.... 0x....      LDR.W    R12,??DataTable3_3  ;; 0x400b102c
   \   000000AE   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   000000B2   0xF05C 0x0C08      ORRS     R12,R12,#0x8
   \   000000B6   0x.... 0x....      LDR.W    LR,??DataTable3_3  ;; 0x400b102c
   \   000000BA   0xF8CE 0xC000      STR      R12,[LR, #+0]
    227          
    228              SDHC_IRQSTAT |= SDHC_IRQSTAT_DTOE_MASK;     //清 数据超时错误 标志
   \   000000BE   0x.... 0x....      LDR.W    R12,??DataTable3_10  ;; 0x400b1030
   \   000000C2   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \   000000C6   0xF45C 0x1C80      ORRS     R12,R12,#0x100000
   \   000000CA   0x.... 0x....      LDR.W    LR,??DataTable3_10  ;; 0x400b1030
   \   000000CE   0xF8CE 0xC000      STR      R12,[LR, #+0]
    229          }
   \   000000D2   0xBDF0             POP      {R4-R7,PC}       ;; return
    230          
    231          
    232          /*!
    233           *  @brief      SDHC发送cmd命令
    234           *  @param      command     命令
    235           *  @return     发送命令结果，    0表示成功，1表示错误，-1 表示 超时
    236           *  @since      v5.0
    237           */

   \                                 In section .text, align 2, keep-with-next
    238          uint32 SDHC_cmd (pESDHC_CMD_t command) /* [IN/OUT] Command specification */
    239          {
   \                     SDHC_cmd: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    240              uint32  xfertyp;
    241              uint32  blkattr;
    242          
    243              //ASSERT(SDHC_CMD_MAX > command->COMMAND  );      //断言，命令不能超过 SDHC_CMD_MAX
    244          
    245              /* 检查命令 */
    246              xfertyp = ESDHC_COMMAND_XFERTYP[command->COMMAND ];
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable3_14
   \   00000008   0x7821             LDRB     R1,[R4, #+0]
   \   0000000A   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \   0000000E   0x0005             MOVS     R5,R0
    247          
    248              ASSERT (~0 != xfertyp);                             //断言，合法的CMD,xfertyp 不能为 ~0
   \   00000010   0xF115 0x0F01      CMN      R5,#+1
   \   00000014   0xD104             BNE.N    ??SDHC_cmd_0
   \   00000016   0x21F8             MOVS     R1,#+248
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable3_15
   \   0000001C   0x.... 0x....      BL       assert_failed
    249          
    250              /* 准备检测卡插拔状态 */
    251              SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM_MASK;
   \                     ??SDHC_cmd_0: (+1)
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x400b1030
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    252          
    253              /* 等待CMD 线空闲 */
    254              while (SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB_MASK) {};
   \                     ??SDHC_cmd_1: (+1)
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable3_9  ;; 0x400b1024
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x07C0             LSLS     R0,R0,#+31
   \   00000038   0xD4FA             BMI.N    ??SDHC_cmd_1
    255          
    256              /* 设置命令 */
    257              SDHC_CMDARG = command->ARGUMENT;
   \   0000003A   0x6860             LDR      R0,[R4, #+4]
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable3_16  ;; 0x400b1008
   \   00000040   0x6008             STR      R0,[R1, #+0]
    258              xfertyp &= (~ SDHC_XFERTYP_CMDTYP_MASK);
   \   00000042   0xF435 0x0540      BICS     R5,R5,#0xC00000
    259              xfertyp |= SDHC_XFERTYP_CMDTYP(command->TYPE);
   \   00000046   0x7860             LDRB     R0,[R4, #+1]
   \   00000048   0x0580             LSLS     R0,R0,#+22
   \   0000004A   0xF410 0x0040      ANDS     R0,R0,#0xC00000
   \   0000004E   0x4305             ORRS     R5,R0,R5
    260              if (ESDHC_TYPE_RESUME == command->TYPE)     //恢复命令 必须 DPSEL 位 置位
   \   00000050   0x7860             LDRB     R0,[R4, #+1]
   \   00000052   0x2802             CMP      R0,#+2
   \   00000054   0xD101             BNE.N    ??SDHC_cmd_2
    261              {
    262                  xfertyp |= SDHC_XFERTYP_DPSEL_MASK;
   \   00000056   0xF455 0x1500      ORRS     R5,R5,#0x200000
    263              }
    264          
    265              if (0 != command->BLOCKS)
   \                     ??SDHC_cmd_2: (+1)
   \   0000005A   0x68A0             LDR      R0,[R4, #+8]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD020             BEQ.N    ??SDHC_cmd_3
    266              {
    267                  if ((xfertyp & SDHC_XFERTYP_RSPTYP_MASK) != SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_48BUSY))
   \   00000060   0xF415 0x3040      ANDS     R0,R5,#0x30000
   \   00000064   0xF5B0 0x3F40      CMP      R0,#+196608
   \   00000068   0xD001             BEQ.N    ??SDHC_cmd_4
    268                  {
    269                      xfertyp |= SDHC_XFERTYP_DPSEL_MASK;
   \   0000006A   0xF455 0x1500      ORRS     R5,R5,#0x200000
    270                  }
    271                  if (command->READ)       //写数据
   \                     ??SDHC_cmd_4: (+1)
   \   0000006E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD001             BEQ.N    ??SDHC_cmd_5
    272                  {
    273                     xfertyp |= SDHC_XFERTYP_DTDSEL_MASK;
   \   00000074   0xF055 0x0510      ORRS     R5,R5,#0x10
    274                  }
    275                  if (command->BLOCKS > 1)
   \                     ??SDHC_cmd_5: (+1)
   \   00000078   0x68A0             LDR      R0,[R4, #+8]
   \   0000007A   0x2802             CMP      R0,#+2
   \   0000007C   0xD301             BCC.N    ??SDHC_cmd_6
    276                  {
    277                      xfertyp |= SDHC_XFERTYP_MSBSEL_MASK;
   \   0000007E   0xF055 0x0520      ORRS     R5,R5,#0x20
    278                  }
    279                  if ((uint32) - 1 != command->BLOCKS)
   \                     ??SDHC_cmd_6: (+1)
   \   00000082   0x68A0             LDR      R0,[R4, #+8]
   \   00000084   0xF110 0x0F01      CMN      R0,#+1
   \   00000088   0xD007             BEQ.N    ??SDHC_cmd_7
    280                  {
    281                      blkattr  = SDHC_BLKATTR_BLKCNT(command->BLOCKS) | SDHC_BLKATTR_BLKSIZE(SDCARD_BLOCK_SIZE);
   \   0000008A   0x68A0             LDR      R0,[R4, #+8]
   \   0000008C   0x0400             LSLS     R0,R0,#+16
   \   0000008E   0xF450 0x7000      ORRS     R0,R0,#0x200
   \   00000092   0x0006             MOVS     R6,R0
    282                      xfertyp |= SDHC_XFERTYP_BCEN_MASK;
   \   00000094   0xF055 0x0502      ORRS     R5,R5,#0x2
   \   00000098   0xE005             B.N      ??SDHC_cmd_8
    283                  }
    284                  else
    285                  {
    286                      blkattr = SDHC_BLKATTR_BLKCNT(0xFFFF)| SDHC_BLKATTR_BLKSIZE(SDCARD_BLOCK_SIZE) ;
   \                     ??SDHC_cmd_7: (+1)
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable3_17  ;; 0xffff0200
   \   0000009E   0x0006             MOVS     R6,R0
   \   000000A0   0xE001             B.N      ??SDHC_cmd_8
    287                  }
    288              }
    289              else
    290              {
    291                  blkattr = 0;
   \                     ??SDHC_cmd_3: (+1)
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x0006             MOVS     R6,R0
    292              }
    293          
    294              SDHC_BLKATTR = blkattr;
   \                     ??SDHC_cmd_8: (+1)
   \   000000A6   0x.... 0x....      LDR.W    R0,??DataTable3_5  ;; 0x400b1004
   \   000000AA   0x6006             STR      R6,[R0, #+0]
    295          
    296          
    297              /* 发出命令 */
    298              SDHC_DSADDR = 0;
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x.... 0x....      LDR.W    R1,??DataTable3_18  ;; 0x400b1000
   \   000000B2   0x6008             STR      R0,[R1, #+0]
    299              SDHC_XFERTYP = xfertyp;
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable3_19  ;; 0x400b100c
   \   000000B8   0x6005             STR      R5,[R0, #+0]
    300          
    301              /* 等待回应 */
    302              SDHC_STATUS_WAIT (SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CC_MASK);
   \                     ??SDHC_cmd_9: (+1)
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x.... 0x....      LDR.W    R1,??DataTable3_20  ;; 0xe0001
   \   000000C4   0x4208             TST      R0,R1
   \   000000C6   0xD0F8             BEQ.N    ??SDHC_cmd_9
    303              if (SDHC_STATUS_GET(SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CC_MASK) != SDHC_IRQSTAT_CC_MASK)
   \   000000C8   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0x.... 0x....      LDR.W    R1,??DataTable3_20  ;; 0xe0001
   \   000000D2   0x4008             ANDS     R0,R1,R0
   \   000000D4   0x2801             CMP      R0,#+1
   \   000000D6   0xD00B             BEQ.N    ??SDHC_cmd_10
    304              {
    305                  SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CIE_MASK | SDHC_IRQSTAT_CEBE_MASK | SDHC_IRQSTAT_CCE_MASK | SDHC_IRQSTAT_CC_MASK;
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0xF440 0x2070      ORR      R0,R0,#0xF0000
   \   000000E2   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x400b1030
   \   000000EA   0x6008             STR      R0,[R1, #+0]
    306                  return ESDHC_CMD_TIMEOUT;
   \   000000EC   0x2003             MOVS     R0,#+3
   \   000000EE   0xE03E             B.N      ??SDHC_cmd_11
    307              }
    308          
    309              /* 检测卡拔插状态 */
    310              if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM_MASK)
   \                     ??SDHC_cmd_10: (+1)
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x0600             LSLS     R0,R0,#+24
   \   000000F8   0xD509             BPL.N    ??SDHC_cmd_12
    311              {
    312                  SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CC_MASK;
   \   000000FA   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0xF050 0x1001      ORRS     R0,R0,#0x10001
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x400b1030
   \   00000108   0x6008             STR      R0,[R1, #+0]
    313                  return ESDHC_CMD_ERR;
   \   0000010A   0x2002             MOVS     R0,#+2
   \   0000010C   0xE02F             B.N      ??SDHC_cmd_11
    314              }
    315          
    316              /* 如果有，则获取相应 */
    317              if (SDHC_IRQSTAT & SDHC_IRQSTAT_CTOE_MASK)
   \                     ??SDHC_cmd_12: (+1)
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   00000112   0x6800             LDR      R0,[R0, #+0]
   \   00000114   0x03C0             LSLS     R0,R0,#+15
   \   00000116   0xD509             BPL.N    ??SDHC_cmd_13
    318              {
    319                  SDHC_IRQSTAT |= SDHC_IRQSTAT_CTOE_MASK | SDHC_IRQSTAT_CC_MASK;
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   0000011C   0x6800             LDR      R0,[R0, #+0]
   \   0000011E   0xF050 0x1001      ORRS     R0,R0,#0x10001
   \   00000122   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x400b1030
   \   00000126   0x6008             STR      R0,[R1, #+0]
    320                  return ESDHC_CMD_TIMEOUT;
   \   00000128   0x2003             MOVS     R0,#+3
   \   0000012A   0xE020             B.N      ??SDHC_cmd_11
    321              }
    322          
    323              //如果 发送有相应 命令
    324              if ((xfertyp & SDHC_XFERTYP_RSPTYP_MASK) != SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_NO))
   \                     ??SDHC_cmd_13: (+1)
   \   0000012C   0xF415 0x3F40      TST      R5,#0x30000
   \   00000130   0xD014             BEQ.N    ??SDHC_cmd_14
    325              {
    326                  command->RESPONSE[0] = SDHC_CMDRSP(0);
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable3_21  ;; 0x400b1010
   \   00000136   0x6800             LDR      R0,[R0, #+0]
   \   00000138   0x60E0             STR      R0,[R4, #+12]
    327          
    328                  //如果接收到长相应
    329                  if ((xfertyp & SDHC_XFERTYP_RSPTYP_MASK) == SDHC_XFERTYP_RSPTYP(ESDHC_XFERTYP_RSPTYP_136))
   \   0000013A   0xF415 0x3040      ANDS     R0,R5,#0x30000
   \   0000013E   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000142   0xD10B             BNE.N    ??SDHC_cmd_14
    330                  {
    331                      command->RESPONSE[1] = SDHC_CMDRSP(1);
   \   00000144   0x.... 0x....      LDR.W    R0,??DataTable3_22  ;; 0x400b1014
   \   00000148   0x6800             LDR      R0,[R0, #+0]
   \   0000014A   0x6120             STR      R0,[R4, #+16]
    332                      command->RESPONSE[2] = SDHC_CMDRSP(2);
   \   0000014C   0x.... 0x....      LDR.W    R0,??DataTable3_23  ;; 0x400b1018
   \   00000150   0x6800             LDR      R0,[R0, #+0]
   \   00000152   0x6160             STR      R0,[R4, #+20]
    333                      command->RESPONSE[3] = SDHC_CMDRSP(3);
   \   00000154   0x.... 0x....      LDR.W    R0,??DataTable3_24  ;; 0x400b101c
   \   00000158   0x6800             LDR      R0,[R0, #+0]
   \   0000015A   0x61A0             STR      R0,[R4, #+24]
    334                  }
    335              }
    336          
    337              //完成命令
    338              SDHC_IRQSTAT |= SDHC_IRQSTAT_CC_MASK;
   \                     ??SDHC_cmd_14: (+1)
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable3_10  ;; 0x400b1030
   \   00000160   0x6800             LDR      R0,[R0, #+0]
   \   00000162   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000166   0x.... 0x....      LDR.W    R1,??DataTable3_10  ;; 0x400b1030
   \   0000016A   0x6008             STR      R0,[R1, #+0]
    339          
    340              return 0;
   \   0000016C   0x2000             MOVS     R0,#+0
   \                     ??SDHC_cmd_11: (+1)
   \   0000016E   0xBD70             POP      {R4-R6,PC}       ;; return
    341          }
    342          
    343          
    344          
    345          /*!
    346           *  @brief      SDHC 控制命令
    347           *  @param      ESDHC_IOCTL_CMD_e       命令
    348           *  @return     ESDHC_IOCTL_ERR_e       操作结果
    349           *  @since      v5.0
    350           */

   \                                 In section .text, align 2, keep-with-next
    351          ESDHC_IOCTL_ERR_e SDHC_ioctl(ESDHC_IOCTL_CMD_e cmd, void *param_ptr )
    352          {
   \                     SDHC_ioctl: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB089             SUB      SP,SP,#+36
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x000D             MOVS     R5,R1
    353              ESDHC_CMD_t             command;
    354              uint8                   mem, io, mmc, ceata, mp, hc;
    355              int32                   val;
    356              ESDHC_IOCTL_ERR_e                  result ;
    357              uint32                  *param32_ptr = param_ptr;
   \   0000000A   0x46AA             MOV      R10,R5
    358          
    359              result = ESDHC_IOCTL_OK;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4681             MOV      R9,R0
    360          
    361              switch (cmd)
   \   00000010   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000012   0x2C00             CMP      R4,#+0
   \   00000014   0xD00A             BEQ.N    ??SDHC_ioctl_0
   \   00000016   0x2C02             CMP      R4,#+2
   \   00000018   0xF000 0x8204      BEQ.W    ??SDHC_ioctl_1
   \   0000001C   0xF0C0 0x818F      BCC.W    ??SDHC_ioctl_2
   \   00000020   0x2C04             CMP      R4,#+4
   \   00000022   0xF000 0x81BE      BEQ.W    ??SDHC_ioctl_3
   \   00000026   0xF0C0 0x8199      BCC.W    ??SDHC_ioctl_4
   \   0000002A   0xE22C             B.N      ??SDHC_ioctl_5
    362              {
    363              case ESDHC_IOCTL_INIT:
    364          
    365                  SDHC_init();        //初始化 SD卡模块
   \                     ??SDHC_ioctl_0: (+1)
   \   0000002C   0x.... 0x....      BL       SDHC_init
    366          
    367                  mem = FALSE;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x0006             MOVS     R6,R0
    368                  io  = FALSE;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF88D 0x0000      STRB     R0,[SP, #+0]
    369                  mmc = FALSE;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x0007             MOVS     R7,R0
    370                  ceata = FALSE;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xF88D 0x0002      STRB     R0,[SP, #+2]
    371                  hc = FALSE;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x4680             MOV      R8,R0
    372                  mp = FALSE;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    373          
    374                  /* CMD0 - Go to idle - reset card */
    375                  command.COMMAND = ESDHC_CMD0;
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0xF88D 0x0004      STRB     R0,[SP, #+4]
    376                  command.TYPE = ESDHC_TYPE_NORMAL;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xF88D 0x0005      STRB     R0,[SP, #+5]
    377                  command.ARGUMENT = 0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9002             STR      R0,[SP, #+8]
    378                  command.READ = FALSE;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF88D 0x0006      STRB     R0,[SP, #+6]
    379                  command.BLOCKS = 0;
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x9003             STR      R0,[SP, #+12]
    380                  if (SDHC_cmd (&command))
   \   00000068   0xA801             ADD      R0,SP,#+4
   \   0000006A   0x.... 0x....      BL       SDHC_cmd
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD002             BEQ.N    ??SDHC_ioctl_6
    381                  {
    382                      result = ESDHC_INIT_ERR;
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x4681             MOV      R9,R0
    383                      break;
   \   00000076   0xE208             B.N      ??SDHC_ioctl_7
    384                  }
    385          
    386                  DELAY_MS(1100);
   \                     ??SDHC_ioctl_6: (+1)
   \   00000078   0xF240 0x404C      MOVW     R0,#+1100
   \   0000007C   0x.... 0x....      BL       systick_delay_ms
    387          
    388                  /* CMD8 - Send interface condition - check HC support */
    389                  command.COMMAND = ESDHC_CMD8;
   \   00000080   0x2008             MOVS     R0,#+8
   \   00000082   0xF88D 0x0004      STRB     R0,[SP, #+4]
    390                  command.TYPE = ESDHC_TYPE_NORMAL;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0xF88D 0x0005      STRB     R0,[SP, #+5]
    391                  command.ARGUMENT = 0x000001AA;
   \   0000008C   0xF44F 0x70D5      MOV      R0,#+426
   \   00000090   0x9002             STR      R0,[SP, #+8]
    392                  command.READ = FALSE;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xF88D 0x0006      STRB     R0,[SP, #+6]
    393                  command.BLOCKS = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x9003             STR      R0,[SP, #+12]
    394                  val = SDHC_cmd (&command);
   \   0000009C   0xA801             ADD      R0,SP,#+4
   \   0000009E   0x.... 0x....      BL       SDHC_cmd
   \   000000A2   0x4683             MOV      R11,R0
    395          
    396                  if (val == 0)
   \   000000A4   0xF1BB 0x0F00      CMP      R11,#+0
   \   000000A8   0xD108             BNE.N    ??SDHC_ioctl_8
    397                  {
    398                      // SDHC Card
    399                      if (command.RESPONSE[0] != command.ARGUMENT)
   \   000000AA   0x9804             LDR      R0,[SP, #+16]
   \   000000AC   0x9902             LDR      R1,[SP, #+8]
   \   000000AE   0x4288             CMP      R0,R1
   \   000000B0   0xD002             BEQ.N    ??SDHC_ioctl_9
    400                      {
    401                          result = ESDHC_INIT_ERR;
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x4681             MOV      R9,R0
    402                          break;
   \   000000B6   0xE1E8             B.N      ??SDHC_ioctl_7
    403                      }
    404                      hc = TRUE;
   \                     ??SDHC_ioctl_9: (+1)
   \   000000B8   0x2001             MOVS     R0,#+1
   \   000000BA   0x4680             MOV      R8,R0
    405                  }
    406          
    407                  mp = TRUE;
   \                     ??SDHC_ioctl_8: (+1)
   \   000000BC   0x2001             MOVS     R0,#+1
   \   000000BE   0xF88D 0x0001      STRB     R0,[SP, #+1]
    408          
    409                  if (mp)
   \   000000C2   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xF000 0x80FB      BEQ.W    ??SDHC_ioctl_10
    410                  {
    411                      /* CMD55 - Application specific command - check MMC */
    412                      command.COMMAND = ESDHC_CMD55;
   \   000000CC   0x2037             MOVS     R0,#+55
   \   000000CE   0xF88D 0x0004      STRB     R0,[SP, #+4]
    413                      command.TYPE = ESDHC_TYPE_NORMAL;
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0xF88D 0x0005      STRB     R0,[SP, #+5]
    414                      command.ARGUMENT = 0;
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x9002             STR      R0,[SP, #+8]
    415                      command.READ = FALSE;
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0xF88D 0x0006      STRB     R0,[SP, #+6]
    416                      command.BLOCKS = 0;
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x9003             STR      R0,[SP, #+12]
    417                      val = SDHC_cmd (&command);
   \   000000E6   0xA801             ADD      R0,SP,#+4
   \   000000E8   0x.... 0x....      BL       SDHC_cmd
   \   000000EC   0x4683             MOV      R11,R0
    418                      if (val > 0)
   \   000000EE   0xF1BB 0x0F01      CMP      R11,#+1
   \   000000F2   0xDB02             BLT.N    ??SDHC_ioctl_11
    419                      {
    420                          result = ESDHC_INIT_ERR;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0x4681             MOV      R9,R0
    421                          break;
   \   000000F8   0xE1C7             B.N      ??SDHC_ioctl_7
    422                      }
    423                      if (val < 0)
   \                     ??SDHC_ioctl_11: (+1)
   \   000000FA   0xF1BB 0x0F00      CMP      R11,#+0
   \   000000FE   0xD56D             BPL.N    ??SDHC_ioctl_12
    424                      {
    425                          /* MMC or CE-ATA */
    426                          io = FALSE;
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0xF88D 0x0000      STRB     R0,[SP, #+0]
    427                          mem = FALSE;
   \   00000106   0x2000             MOVS     R0,#+0
   \   00000108   0x0006             MOVS     R6,R0
    428                          hc = FALSE;
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0x4680             MOV      R8,R0
    429          
    430                          /* CMD1 - Send operating conditions - check HC */
    431                          command.COMMAND = ESDHC_CMD1;
   \   0000010E   0x2001             MOVS     R0,#+1
   \   00000110   0xF88D 0x0004      STRB     R0,[SP, #+4]
    432                          command.TYPE = ESDHC_TYPE_NORMAL;
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0xF88D 0x0005      STRB     R0,[SP, #+5]
    433                          command.ARGUMENT = 0x40300000;
   \   0000011A   0x.... 0x....      LDR.W    R0,??DataTable3_25  ;; 0x40300000
   \   0000011E   0x9002             STR      R0,[SP, #+8]
    434                          command.READ = FALSE;
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0xF88D 0x0006      STRB     R0,[SP, #+6]
    435                          command.BLOCKS = 0;
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x9003             STR      R0,[SP, #+12]
    436                          if (SDHC_cmd (&command))
   \   0000012A   0xA801             ADD      R0,SP,#+4
   \   0000012C   0x.... 0x....      BL       SDHC_cmd
   \   00000130   0x2800             CMP      R0,#+0
   \   00000132   0xD002             BEQ.N    ??SDHC_ioctl_13
    437                          {
    438                              result = ESDHC_INIT_ERR;
   \   00000134   0x2001             MOVS     R0,#+1
   \   00000136   0x4681             MOV      R9,R0
    439                              break;
   \   00000138   0xE1A7             B.N      ??SDHC_ioctl_7
    440                          }
    441                          if (0x20000000 == (command.RESPONSE[0] & 0x60000000))
   \                     ??SDHC_ioctl_13: (+1)
   \   0000013A   0x9804             LDR      R0,[SP, #+16]
   \   0000013C   0xF010 0x40C0      ANDS     R0,R0,#0x60000000
   \   00000140   0xF1B0 0x5F00      CMP      R0,#+536870912
   \   00000144   0xD101             BNE.N    ??SDHC_ioctl_14
    442                          {
    443                              hc = TRUE;
   \   00000146   0x2001             MOVS     R0,#+1
   \   00000148   0x4680             MOV      R8,R0
    444                          }
    445                          mmc = TRUE;
   \                     ??SDHC_ioctl_14: (+1)
   \   0000014A   0x2001             MOVS     R0,#+1
   \   0000014C   0x0007             MOVS     R7,R0
    446          
    447                          /* CMD39 - Fast IO - check CE-ATA signature CE */
    448                          command.COMMAND = ESDHC_CMD39;
   \   0000014E   0x2027             MOVS     R0,#+39
   \   00000150   0xF88D 0x0004      STRB     R0,[SP, #+4]
    449                          command.TYPE = ESDHC_TYPE_NORMAL;
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0xF88D 0x0005      STRB     R0,[SP, #+5]
    450                          command.ARGUMENT = 0x0C00;
   \   0000015A   0xF44F 0x6040      MOV      R0,#+3072
   \   0000015E   0x9002             STR      R0,[SP, #+8]
    451                          command.READ = FALSE;
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0xF88D 0x0006      STRB     R0,[SP, #+6]
    452                          command.BLOCKS = 0;
   \   00000166   0x2000             MOVS     R0,#+0
   \   00000168   0x9003             STR      R0,[SP, #+12]
    453                          if (SDHC_cmd (&command))
   \   0000016A   0xA801             ADD      R0,SP,#+4
   \   0000016C   0x.... 0x....      BL       SDHC_cmd
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD002             BEQ.N    ??SDHC_ioctl_15
    454                          {
    455                              result = ESDHC_INIT_ERR;
   \   00000174   0x2001             MOVS     R0,#+1
   \   00000176   0x4681             MOV      R9,R0
    456                              break;
   \   00000178   0xE187             B.N      ??SDHC_ioctl_7
    457                          }
    458                          if (0xCE == (command.RESPONSE[0] >> 8) & 0xFF)
   \                     ??SDHC_ioctl_15: (+1)
   \   0000017A   0x9804             LDR      R0,[SP, #+16]
   \   0000017C   0x0A00             LSRS     R0,R0,#+8
   \   0000017E   0x28CE             CMP      R0,#+206
   \   00000180   0xD101             BNE.N    ??SDHC_ioctl_16
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0xE000             B.N      ??SDHC_ioctl_17
   \                     ??SDHC_ioctl_16: (+1)
   \   00000186   0x2000             MOVS     R0,#+0
   \                     ??SDHC_ioctl_17: (+1)
   \   00000188   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000018A   0x2800             CMP      R0,#+0
   \   0000018C   0xF000 0x8099      BEQ.W    ??SDHC_ioctl_10
    459                          {
    460                              /* CMD39 - Fast IO - check CE-ATA signature AA */
    461                              command.COMMAND = ESDHC_CMD39;
   \   00000190   0x2027             MOVS     R0,#+39
   \   00000192   0xF88D 0x0004      STRB     R0,[SP, #+4]
    462                              command.TYPE = ESDHC_TYPE_NORMAL;
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0xF88D 0x0005      STRB     R0,[SP, #+5]
    463                              command.ARGUMENT = 0x0D00;
   \   0000019C   0xF44F 0x6050      MOV      R0,#+3328
   \   000001A0   0x9002             STR      R0,[SP, #+8]
    464                              command.READ = FALSE;
   \   000001A2   0x2000             MOVS     R0,#+0
   \   000001A4   0xF88D 0x0006      STRB     R0,[SP, #+6]
    465                              command.BLOCKS = 0;
   \   000001A8   0x2000             MOVS     R0,#+0
   \   000001AA   0x9003             STR      R0,[SP, #+12]
    466                              if (SDHC_cmd (&command))
   \   000001AC   0xA801             ADD      R0,SP,#+4
   \   000001AE   0x.... 0x....      BL       SDHC_cmd
   \   000001B2   0x2800             CMP      R0,#+0
   \   000001B4   0xD002             BEQ.N    ??SDHC_ioctl_18
    467                              {
    468                                  result = ESDHC_INIT_ERR;
   \   000001B6   0x2001             MOVS     R0,#+1
   \   000001B8   0x4681             MOV      R9,R0
    469                                  break;
   \   000001BA   0xE166             B.N      ??SDHC_ioctl_7
    470                              }
    471                              if (0xAA == (command.RESPONSE[0] >> 8) & 0xFF)
   \                     ??SDHC_ioctl_18: (+1)
   \   000001BC   0x9804             LDR      R0,[SP, #+16]
   \   000001BE   0x0A00             LSRS     R0,R0,#+8
   \   000001C0   0x28AA             CMP      R0,#+170
   \   000001C2   0xD101             BNE.N    ??SDHC_ioctl_19
   \   000001C4   0x2001             MOVS     R0,#+1
   \   000001C6   0xE000             B.N      ??SDHC_ioctl_20
   \                     ??SDHC_ioctl_19: (+1)
   \   000001C8   0x2000             MOVS     R0,#+0
   \                     ??SDHC_ioctl_20: (+1)
   \   000001CA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001CC   0x2800             CMP      R0,#+0
   \   000001CE   0xD078             BEQ.N    ??SDHC_ioctl_10
    472                              {
    473                                  mmc = FALSE;
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0x0007             MOVS     R7,R0
    474                                  ceata = TRUE;
   \   000001D4   0x2001             MOVS     R0,#+1
   \   000001D6   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   000001DA   0xE072             B.N      ??SDHC_ioctl_10
    475                              }
    476                          }
    477                      }
    478                      else
    479                      {
    480                          /* SD */
    481                          /* ACMD41 - Send Operating Conditions */
    482                          command.COMMAND = ESDHC_ACMD41;
   \                     ??SDHC_ioctl_12: (+1)
   \   000001DC   0x2029             MOVS     R0,#+41
   \   000001DE   0xF88D 0x0004      STRB     R0,[SP, #+4]
    483                          command.TYPE = ESDHC_TYPE_NORMAL;
   \   000001E2   0x2000             MOVS     R0,#+0
   \   000001E4   0xF88D 0x0005      STRB     R0,[SP, #+5]
    484                          command.ARGUMENT = 0;
   \   000001E8   0x2000             MOVS     R0,#+0
   \   000001EA   0x9002             STR      R0,[SP, #+8]
    485                          command.READ = FALSE;
   \   000001EC   0x2000             MOVS     R0,#+0
   \   000001EE   0xF88D 0x0006      STRB     R0,[SP, #+6]
    486                          command.BLOCKS = 0;
   \   000001F2   0x2000             MOVS     R0,#+0
   \   000001F4   0x9003             STR      R0,[SP, #+12]
    487                          if (SDHC_cmd (&command))
   \   000001F6   0xA801             ADD      R0,SP,#+4
   \   000001F8   0x.... 0x....      BL       SDHC_cmd
   \   000001FC   0x2800             CMP      R0,#+0
   \   000001FE   0xD002             BEQ.N    ??SDHC_ioctl_21
    488                          {
    489                              result = ESDHC_INIT_ERR;
   \   00000200   0x2001             MOVS     R0,#+1
   \   00000202   0x4681             MOV      R9,R0
    490                              break;
   \   00000204   0xE141             B.N      ??SDHC_ioctl_7
    491                          }
    492                          if (command.RESPONSE[0] & 0x300000)
   \                     ??SDHC_ioctl_21: (+1)
   \   00000206   0x9804             LDR      R0,[SP, #+16]
   \   00000208   0xF410 0x1F40      TST      R0,#0x300000
   \   0000020C   0xD059             BEQ.N    ??SDHC_ioctl_10
    493                          {
    494                              val = 0;
   \   0000020E   0x2000             MOVS     R0,#+0
   \   00000210   0x4683             MOV      R11,R0
    495                              do
    496                              {
    497                                  DELAY_MS(10);
   \                     ??SDHC_ioctl_22: (+1)
   \   00000212   0x200A             MOVS     R0,#+10
   \   00000214   0x.... 0x....      BL       systick_delay_ms
    498                                  val++;
   \   00000218   0xF11B 0x0B01      ADDS     R11,R11,#+1
    499          
    500                                  /* CMD55 + ACMD41 - Send OCR */
    501                                  //MMC卡对CMD55+ACMD41命令不作响应，故在初始化过程中用这一命令可以区别SD卡跟MMC卡
    502                                  command.COMMAND = ESDHC_CMD55;
   \   0000021C   0x2037             MOVS     R0,#+55
   \   0000021E   0xF88D 0x0004      STRB     R0,[SP, #+4]
    503                                  command.TYPE = ESDHC_TYPE_NORMAL;
   \   00000222   0x2000             MOVS     R0,#+0
   \   00000224   0xF88D 0x0005      STRB     R0,[SP, #+5]
    504                                  command.ARGUMENT = 0;
   \   00000228   0x2000             MOVS     R0,#+0
   \   0000022A   0x9002             STR      R0,[SP, #+8]
    505                                  command.READ = FALSE;
   \   0000022C   0x2000             MOVS     R0,#+0
   \   0000022E   0xF88D 0x0006      STRB     R0,[SP, #+6]
    506                                  command.BLOCKS = 0;
   \   00000232   0x2000             MOVS     R0,#+0
   \   00000234   0x9003             STR      R0,[SP, #+12]
    507                                  if (SDHC_cmd (&command))
   \   00000236   0xA801             ADD      R0,SP,#+4
   \   00000238   0x.... 0x....      BL       SDHC_cmd
   \   0000023C   0x2800             CMP      R0,#+0
   \   0000023E   0xD002             BEQ.N    ??SDHC_ioctl_23
    508                                  {
    509                                      result = ESDHC_INIT_ERR;
   \   00000240   0x2001             MOVS     R0,#+1
   \   00000242   0x4681             MOV      R9,R0
    510                                      break;
   \   00000244   0xE023             B.N      ??SDHC_ioctl_24
    511                                  }
    512          
    513                                  command.COMMAND = ESDHC_ACMD41;
   \                     ??SDHC_ioctl_23: (+1)
   \   00000246   0x2029             MOVS     R0,#+41
   \   00000248   0xF88D 0x0004      STRB     R0,[SP, #+4]
    514                                  command.TYPE = ESDHC_TYPE_NORMAL;
   \   0000024C   0x2000             MOVS     R0,#+0
   \   0000024E   0xF88D 0x0005      STRB     R0,[SP, #+5]
    515                                  if (hc)
   \   00000252   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000256   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000025A   0xD002             BEQ.N    ??SDHC_ioctl_25
    516                                  {
    517                                      command.ARGUMENT = 0x40300000;
   \   0000025C   0x....             LDR.N    R0,??DataTable3_25  ;; 0x40300000
   \   0000025E   0x9002             STR      R0,[SP, #+8]
   \   00000260   0xE002             B.N      ??SDHC_ioctl_26
    518                                  }
    519                                  else
    520                                  {
    521                                      command.ARGUMENT = 0x00300000;
   \                     ??SDHC_ioctl_25: (+1)
   \   00000262   0xF45F 0x1040      MOVS     R0,#+3145728
   \   00000266   0x9002             STR      R0,[SP, #+8]
    522                                  }
    523                                  command.READ = FALSE;
   \                     ??SDHC_ioctl_26: (+1)
   \   00000268   0x2000             MOVS     R0,#+0
   \   0000026A   0xF88D 0x0006      STRB     R0,[SP, #+6]
    524                                  command.BLOCKS = 0;
   \   0000026E   0x2000             MOVS     R0,#+0
   \   00000270   0x9003             STR      R0,[SP, #+12]
    525                                  if (SDHC_cmd (&command))
   \   00000272   0xA801             ADD      R0,SP,#+4
   \   00000274   0x.... 0x....      BL       SDHC_cmd
   \   00000278   0x2800             CMP      R0,#+0
   \   0000027A   0xD002             BEQ.N    ??SDHC_ioctl_27
    526                                  {
    527                                      result = ESDHC_INIT_ERR;
   \   0000027C   0x2001             MOVS     R0,#+1
   \   0000027E   0x4681             MOV      R9,R0
    528                                      break;
   \   00000280   0xE005             B.N      ??SDHC_ioctl_24
    529                                  }
    530                              }
    531                              while ((0 == (command.RESPONSE[0] & 0x80000000)) && (val < SEND_OCR_TIME));
   \                     ??SDHC_ioctl_27: (+1)
   \   00000282   0x9804             LDR      R0,[SP, #+16]
   \   00000284   0x2800             CMP      R0,#+0
   \   00000286   0xD402             BMI.N    ??SDHC_ioctl_24
   \   00000288   0xF1BB 0x0F64      CMP      R11,#+100
   \   0000028C   0xDBC1             BLT.N    ??SDHC_ioctl_22
    532                              if (ESDHC_IOCTL_OK != result)
   \                     ??SDHC_ioctl_24: (+1)
   \   0000028E   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000292   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000296   0xF040 0x80F8      BNE.W    ??SDHC_ioctl_7
    533                              {
    534                                  break;
    535                              }
    536                              if (val >= SEND_OCR_TIME)
   \                     ??SDHC_ioctl_28: (+1)
   \   0000029A   0xF1BB 0x0F64      CMP      R11,#+100
   \   0000029E   0xDB02             BLT.N    ??SDHC_ioctl_29
    537                              {
    538                                  hc = FALSE;
   \   000002A0   0x2000             MOVS     R0,#+0
   \   000002A2   0x4680             MOV      R8,R0
   \   000002A4   0xE00D             B.N      ??SDHC_ioctl_10
    539                              }
    540                              else
    541                              {
    542                                  mem = TRUE;
   \                     ??SDHC_ioctl_29: (+1)
   \   000002A6   0x2001             MOVS     R0,#+1
   \   000002A8   0x0006             MOVS     R6,R0
    543                                  if (hc)
   \   000002AA   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000002AE   0xF1B8 0x0F00      CMP      R8,#+0
   \   000002B2   0xD006             BEQ.N    ??SDHC_ioctl_10
    544                                  {
    545                                      hc = FALSE;
   \   000002B4   0x2000             MOVS     R0,#+0
   \   000002B6   0x4680             MOV      R8,R0
    546                                      if (command.RESPONSE[0] & 0x40000000)
   \   000002B8   0x9804             LDR      R0,[SP, #+16]
   \   000002BA   0x0040             LSLS     R0,R0,#+1
   \   000002BC   0xD501             BPL.N    ??SDHC_ioctl_10
    547                                      {
    548                                          hc = TRUE;
   \   000002BE   0x2001             MOVS     R0,#+1
   \   000002C0   0x4680             MOV      R8,R0
    549                                      }
    550                                  }
    551                              }
    552                          }
    553                      }
    554                  }
    555          
    556          
    557                  if (mmc)
   \                     ??SDHC_ioctl_10: (+1)
   \   000002C2   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002C4   0x2F00             CMP      R7,#+0
   \   000002C6   0xD002             BEQ.N    ??SDHC_ioctl_30
    558                  {
    559                      SDHC_card.CARD = ESDHC_CARD_MMC;
   \   000002C8   0x2007             MOVS     R0,#+7
   \   000002CA   0x....             LDR.N    R1,??DataTable3
   \   000002CC   0x6008             STR      R0,[R1, #+0]
    560                  }
    561                  if (ceata)
   \                     ??SDHC_ioctl_30: (+1)
   \   000002CE   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   000002D2   0x2800             CMP      R0,#+0
   \   000002D4   0xD002             BEQ.N    ??SDHC_ioctl_31
    562                  {
    563                      SDHC_card.CARD = ESDHC_CARD_CEATA;
   \   000002D6   0x2008             MOVS     R0,#+8
   \   000002D8   0x....             LDR.N    R1,??DataTable3
   \   000002DA   0x6008             STR      R0,[R1, #+0]
    564                  }
    565                  if (io)
   \                     ??SDHC_ioctl_31: (+1)
   \   000002DC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000002E0   0x2800             CMP      R0,#+0
   \   000002E2   0xD002             BEQ.N    ??SDHC_ioctl_32
    566                  {
    567                      SDHC_card.CARD = ESDHC_CARD_SDIO;
   \   000002E4   0x2004             MOVS     R0,#+4
   \   000002E6   0x....             LDR.N    R1,??DataTable3
   \   000002E8   0x6008             STR      R0,[R1, #+0]
    568                  }
    569                  if (mem)
   \                     ??SDHC_ioctl_32: (+1)
   \   000002EA   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000002EC   0x2E00             CMP      R6,#+0
   \   000002EE   0xD00A             BEQ.N    ??SDHC_ioctl_33
    570                  {
    571                      SDHC_card.CARD = ESDHC_CARD_SD;
   \   000002F0   0x2002             MOVS     R0,#+2
   \   000002F2   0x....             LDR.N    R1,??DataTable3
   \   000002F4   0x6008             STR      R0,[R1, #+0]
    572                      if (hc)
   \   000002F6   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000002FA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000002FE   0xD002             BEQ.N    ??SDHC_ioctl_33
    573                      {
    574                          SDHC_card.CARD = ESDHC_CARD_SDHC;
   \   00000300   0x2003             MOVS     R0,#+3
   \   00000302   0x....             LDR.N    R1,??DataTable3
   \   00000304   0x6008             STR      R0,[R1, #+0]
    575                      }
    576                  }
    577                  if (io && mem)
   \                     ??SDHC_ioctl_33: (+1)
   \   00000306   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000030A   0x2800             CMP      R0,#+0
   \   0000030C   0xD00D             BEQ.N    ??SDHC_ioctl_34
   \   0000030E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000310   0x2E00             CMP      R6,#+0
   \   00000312   0xD00A             BEQ.N    ??SDHC_ioctl_34
    578                  {
    579                      SDHC_card.CARD = ESDHC_CARD_SDCOMBO;
   \   00000314   0x2005             MOVS     R0,#+5
   \   00000316   0x....             LDR.N    R1,??DataTable3
   \   00000318   0x6008             STR      R0,[R1, #+0]
    580                      if (hc)
   \   0000031A   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000031E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000322   0xD002             BEQ.N    ??SDHC_ioctl_34
    581                      {
    582                          SDHC_card.CARD = ESDHC_CARD_SDHCCOMBO;
   \   00000324   0x2006             MOVS     R0,#+6
   \   00000326   0x....             LDR.N    R1,??DataTable3
   \   00000328   0x6008             STR      R0,[R1, #+0]
    583                      }
    584                  }
    585          
    586                  /* 设置 ESDHC 默认波特率 */
    587                  SDHC_set_baudrate (SDHC_BANDRATE);
   \                     ??SDHC_ioctl_34: (+1)
   \   0000032A   0x....             LDR.N    R0,??DataTable3_26  ;; 0x16e3600
   \   0000032C   0x.... 0x....      BL       SDHC_set_baudrate
    588          
    589          #if defined( MK60DZ10)
    590                  /* 使能 SDHC 模块时钟 */
    591                  SIM_SCGC3 |= SIM_SCGC3_SDHC_MASK;
   \   00000330   0x....             LDR.N    R0,??DataTable3_1  ;; 0x40048030
   \   00000332   0x6800             LDR      R0,[R0, #+0]
   \   00000334   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \   00000338   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40048030
   \   0000033A   0x6008             STR      R0,[R1, #+0]
    592          
    593          #elif defined( MK60F15)
    594                  /* 使能 SDHC 模块时钟 */
    595                  SIM_SCGC3 |= SIM_SCGC3_ESDHC_MASK;
    596          #endif
    597                  break;
   \   0000033C   0xE0A5             B.N      ??SDHC_ioctl_7
    598              case ESDHC_IOCTL_SEND_CMD:
    599                  val = SDHC_cmd ((pESDHC_CMD_t)param32_ptr);
   \                     ??SDHC_ioctl_2: (+1)
   \   0000033E   0x4650             MOV      R0,R10
   \   00000340   0x.... 0x....      BL       SDHC_cmd
   \   00000344   0x4683             MOV      R11,R0
    600                  if (val > 0)
   \   00000346   0xF1BB 0x0F01      CMP      R11,#+1
   \   0000034A   0xDB01             BLT.N    ??SDHC_ioctl_35
    601                  {
    602                      result = ESDHC_CMD_ERR;
   \   0000034C   0x2002             MOVS     R0,#+2
   \   0000034E   0x4681             MOV      R9,R0
    603                  }
    604                  if (val < 0)
   \                     ??SDHC_ioctl_35: (+1)
   \   00000350   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000354   0xD501             BPL.N    ??SDHC_ioctl_36
    605                  {
    606                      result = ESDHC_CMD_TIMEOUT;
   \   00000356   0x2003             MOVS     R0,#+3
   \   00000358   0x4681             MOV      R9,R0
    607                  }
    608                  break;
   \                     ??SDHC_ioctl_36: (+1)
   \   0000035A   0xE096             B.N      ??SDHC_ioctl_7
    609              case ESDHC_IOCTL_GET_BUS_WIDTH:
    610                  if (NULL == param32_ptr)
   \                     ??SDHC_ioctl_4: (+1)
   \   0000035C   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000360   0xD102             BNE.N    ??SDHC_ioctl_37
    611                  {
    612                      result = ESDHC_PARAM_INVALID;
   \   00000362   0x2005             MOVS     R0,#+5
   \   00000364   0x4681             MOV      R9,R0
   \   00000366   0xE01B             B.N      ??SDHC_ioctl_38
    613                  }
    614                  else
    615                  {
    616                      /* 获取 ESDHC 总线宽度 */
    617                      val = (SDHC_PROCTL & SDHC_PROCTL_DTW_MASK) >> SDHC_PROCTL_DTW_SHIFT;
   \                     ??SDHC_ioctl_37: (+1)
   \   00000368   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400b1028
   \   0000036A   0x6800             LDR      R0,[R0, #+0]
   \   0000036C   0xF3C0 0x0041      UBFX     R0,R0,#+1,#+2
   \   00000370   0x4683             MOV      R11,R0
    618                      if (ESDHC_PROCTL_DTW_1BIT == val)
   \   00000372   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000376   0xD103             BNE.N    ??SDHC_ioctl_39
    619                      {
    620                          *param32_ptr = ESDHC_BUS_WIDTH_1BIT;
   \   00000378   0x2000             MOVS     R0,#+0
   \   0000037A   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \   0000037E   0xE00F             B.N      ??SDHC_ioctl_38
    621                      }
    622                      else if (ESDHC_PROCTL_DTW_4BIT == val)
   \                     ??SDHC_ioctl_39: (+1)
   \   00000380   0xF1BB 0x0F01      CMP      R11,#+1
   \   00000384   0xD103             BNE.N    ??SDHC_ioctl_40
    623                      {
    624                          *param32_ptr = ESDHC_BUS_WIDTH_4BIT;
   \   00000386   0x2001             MOVS     R0,#+1
   \   00000388   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \   0000038C   0xE008             B.N      ??SDHC_ioctl_38
    625                      }
    626                      else if (ESDHC_PROCTL_DTW_8BIT == val)
   \                     ??SDHC_ioctl_40: (+1)
   \   0000038E   0xF1BB 0x0F10      CMP      R11,#+16
   \   00000392   0xD103             BNE.N    ??SDHC_ioctl_41
    627                      {
    628                          *param32_ptr = ESDHC_BUS_WIDTH_8BIT;
   \   00000394   0x2002             MOVS     R0,#+2
   \   00000396   0xF8CA 0x0000      STR      R0,[R10, #+0]
   \   0000039A   0xE001             B.N      ??SDHC_ioctl_38
    629                      }
    630                      else
    631                      {
    632                          result = ESDHC_BUS_WIDTH_INVALID;
   \                     ??SDHC_ioctl_41: (+1)
   \   0000039C   0x2006             MOVS     R0,#+6
   \   0000039E   0x4681             MOV      R9,R0
    633                      }
    634                  }
    635                  break;
   \                     ??SDHC_ioctl_38: (+1)
   \   000003A0   0xE073             B.N      ??SDHC_ioctl_7
    636              case ESDHC_IOCTL_SET_BUS_WIDTH:
    637                  if (NULL == param32_ptr)
   \                     ??SDHC_ioctl_3: (+1)
   \   000003A2   0xF1BA 0x0F00      CMP      R10,#+0
   \   000003A6   0xD102             BNE.N    ??SDHC_ioctl_42
    638                  {
    639                      result = ESDHC_PARAM_INVALID;
   \   000003A8   0x2005             MOVS     R0,#+5
   \   000003AA   0x4681             MOV      R9,R0
   \   000003AC   0xE039             B.N      ??SDHC_ioctl_43
    640                  }
    641                  else
    642                  {
    643                      /* 设置 ESDHC 总线宽度 */
    644                      if (! SDHC_is_running())
   \                     ??SDHC_ioctl_42: (+1)
   \   000003AE   0x....             LDR.N    R0,??DataTable3_9  ;; 0x400b1024
   \   000003B0   0x6800             LDR      R0,[R0, #+0]
   \   000003B2   0xF240 0x3107      MOVW     R1,#+775
   \   000003B6   0x4208             TST      R0,R1
   \   000003B8   0xD131             BNE.N    ??SDHC_ioctl_44
    645                      {
    646                          if (ESDHC_BUS_WIDTH_1BIT == *param32_ptr)
   \   000003BA   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000003BE   0x2800             CMP      R0,#+0
   \   000003C0   0xD10A             BNE.N    ??SDHC_ioctl_45
    647                          {
    648                              SDHC_PROCTL &= (~ SDHC_PROCTL_DTW_MASK);
   \   000003C2   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400b1028
   \   000003C4   0x6800             LDR      R0,[R0, #+0]
   \   000003C6   0xF030 0x0006      BICS     R0,R0,#0x6
   \   000003CA   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400b1028
   \   000003CC   0x6008             STR      R0,[R1, #+0]
    649                              SDHC_PROCTL |= SDHC_PROCTL_DTW(ESDHC_PROCTL_DTW_1BIT);
   \   000003CE   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400b1028
   \   000003D0   0x6800             LDR      R0,[R0, #+0]
   \   000003D2   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400b1028
   \   000003D4   0x6008             STR      R0,[R1, #+0]
   \   000003D6   0xE024             B.N      ??SDHC_ioctl_43
    650                          }
    651                          else if (ESDHC_BUS_WIDTH_4BIT == *param32_ptr)
   \                     ??SDHC_ioctl_45: (+1)
   \   000003D8   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000003DC   0x2801             CMP      R0,#+1
   \   000003DE   0xD10C             BNE.N    ??SDHC_ioctl_46
    652                          {
    653                              SDHC_PROCTL &= (~ SDHC_PROCTL_DTW_MASK);
   \   000003E0   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400b1028
   \   000003E2   0x6800             LDR      R0,[R0, #+0]
   \   000003E4   0xF030 0x0006      BICS     R0,R0,#0x6
   \   000003E8   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400b1028
   \   000003EA   0x6008             STR      R0,[R1, #+0]
    654                              SDHC_PROCTL |= SDHC_PROCTL_DTW(ESDHC_PROCTL_DTW_4BIT);
   \   000003EC   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400b1028
   \   000003EE   0x6800             LDR      R0,[R0, #+0]
   \   000003F0   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000003F4   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400b1028
   \   000003F6   0x6008             STR      R0,[R1, #+0]
   \   000003F8   0xE013             B.N      ??SDHC_ioctl_43
    655                          }
    656                          else if (ESDHC_BUS_WIDTH_8BIT == *param32_ptr)
   \                     ??SDHC_ioctl_46: (+1)
   \   000003FA   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000003FE   0x2802             CMP      R0,#+2
   \   00000400   0xD10A             BNE.N    ??SDHC_ioctl_47
    657                          {
    658                              SDHC_PROCTL &= (~ SDHC_PROCTL_DTW_MASK);
   \   00000402   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400b1028
   \   00000404   0x6800             LDR      R0,[R0, #+0]
   \   00000406   0xF030 0x0006      BICS     R0,R0,#0x6
   \   0000040A   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400b1028
   \   0000040C   0x6008             STR      R0,[R1, #+0]
    659                              SDHC_PROCTL |= SDHC_PROCTL_DTW(ESDHC_PROCTL_DTW_8BIT);
   \   0000040E   0x....             LDR.N    R0,??DataTable3_6  ;; 0x400b1028
   \   00000410   0x6800             LDR      R0,[R0, #+0]
   \   00000412   0x....             LDR.N    R1,??DataTable3_6  ;; 0x400b1028
   \   00000414   0x6008             STR      R0,[R1, #+0]
   \   00000416   0xE004             B.N      ??SDHC_ioctl_43
    660                          }
    661                          else
    662                          {
    663                              result = ESDHC_BUS_WIDTH_INVALID;
   \                     ??SDHC_ioctl_47: (+1)
   \   00000418   0x2006             MOVS     R0,#+6
   \   0000041A   0x4681             MOV      R9,R0
   \   0000041C   0xE001             B.N      ??SDHC_ioctl_43
    664                          }
    665                      }
    666                      else
    667                      {
    668                          result = ESDHC_BUSY;
   \                     ??SDHC_ioctl_44: (+1)
   \   0000041E   0x2007             MOVS     R0,#+7
   \   00000420   0x4681             MOV      R9,R0
    669                      }
    670                  }
    671                  break;
   \                     ??SDHC_ioctl_43: (+1)
   \   00000422   0xE032             B.N      ??SDHC_ioctl_7
    672              case ESDHC_IOCTL_GET_CARD:
    673                  if (NULL == param32_ptr)
   \                     ??SDHC_ioctl_1: (+1)
   \   00000424   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000428   0xD102             BNE.N    ??SDHC_ioctl_48
    674                  {
    675                      result = ESDHC_PARAM_INVALID;
   \   0000042A   0x2005             MOVS     R0,#+5
   \   0000042C   0x4681             MOV      R9,R0
   \   0000042E   0xE029             B.N      ??SDHC_ioctl_49
    676                  }
    677                  else
    678                  {
    679                      /* 80 clocks to update levels */
    680                      SDHC_SYSCTL |= SDHC_SYSCTL_INITA_MASK;
   \                     ??SDHC_ioctl_48: (+1)
   \   00000430   0x....             LDR.N    R0,??DataTable3_3  ;; 0x400b102c
   \   00000432   0x6800             LDR      R0,[R0, #+0]
   \   00000434   0xF050 0x6000      ORRS     R0,R0,#0x8000000
   \   00000438   0x....             LDR.N    R1,??DataTable3_3  ;; 0x400b102c
   \   0000043A   0x6008             STR      R0,[R1, #+0]
    681                      while (SDHC_SYSCTL & SDHC_SYSCTL_INITA_MASK)
   \                     ??SDHC_ioctl_50: (+1)
   \   0000043C   0x....             LDR.N    R0,??DataTable3_3  ;; 0x400b102c
   \   0000043E   0x6800             LDR      R0,[R0, #+0]
   \   00000440   0x0100             LSLS     R0,R0,#+4
   \   00000442   0xD4FB             BMI.N    ??SDHC_ioctl_50
    682                          { };
    683          
    684                      /* Update and return actual card status */
    685                      if (SDHC_IRQSTAT & SDHC_IRQSTAT_CRM_MASK)
   \   00000444   0x....             LDR.N    R0,??DataTable3_10  ;; 0x400b1030
   \   00000446   0x6800             LDR      R0,[R0, #+0]
   \   00000448   0x0600             LSLS     R0,R0,#+24
   \   0000044A   0xD508             BPL.N    ??SDHC_ioctl_51
    686                      {
    687                          SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM_MASK;
   \   0000044C   0x....             LDR.N    R0,??DataTable3_10  ;; 0x400b1030
   \   0000044E   0x6800             LDR      R0,[R0, #+0]
   \   00000450   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000454   0x....             LDR.N    R1,??DataTable3_10  ;; 0x400b1030
   \   00000456   0x6008             STR      R0,[R1, #+0]
    688                          SDHC_card.CARD = ESDHC_CARD_NONE;
   \   00000458   0x2000             MOVS     R0,#+0
   \   0000045A   0x....             LDR.N    R1,??DataTable3
   \   0000045C   0x6008             STR      R0,[R1, #+0]
    689                      }
    690                      if (SDHC_PRSSTAT & SDHC_PRSSTAT_CINS_MASK)
   \                     ??SDHC_ioctl_51: (+1)
   \   0000045E   0x....             LDR.N    R0,??DataTable3_9  ;; 0x400b1024
   \   00000460   0x6800             LDR      R0,[R0, #+0]
   \   00000462   0x03C0             LSLS     R0,R0,#+15
   \   00000464   0xD507             BPL.N    ??SDHC_ioctl_52
    691                      {
    692                          if (ESDHC_CARD_NONE == SDHC_card.CARD)
   \   00000466   0x....             LDR.N    R0,??DataTable3
   \   00000468   0x6800             LDR      R0,[R0, #+0]
   \   0000046A   0x2800             CMP      R0,#+0
   \   0000046C   0xD106             BNE.N    ??SDHC_ioctl_53
    693                          {
    694                              SDHC_card.CARD = ESDHC_CARD_UNKNOWN;
   \   0000046E   0x2001             MOVS     R0,#+1
   \   00000470   0x....             LDR.N    R1,??DataTable3
   \   00000472   0x6008             STR      R0,[R1, #+0]
   \   00000474   0xE002             B.N      ??SDHC_ioctl_53
    695                          }
    696                      }
    697                      else
    698                      {
    699                          SDHC_card.CARD = ESDHC_CARD_NONE;
   \                     ??SDHC_ioctl_52: (+1)
   \   00000476   0x2000             MOVS     R0,#+0
   \   00000478   0x....             LDR.N    R1,??DataTable3
   \   0000047A   0x6008             STR      R0,[R1, #+0]
    700                      }
    701                      *param32_ptr = SDHC_card.CARD;
   \                     ??SDHC_ioctl_53: (+1)
   \   0000047C   0x....             LDR.N    R0,??DataTable3
   \   0000047E   0x6800             LDR      R0,[R0, #+0]
   \   00000480   0xF8CA 0x0000      STR      R0,[R10, #+0]
    702                  }
    703                  break;
   \                     ??SDHC_ioctl_49: (+1)
   \   00000484   0xE001             B.N      ??SDHC_ioctl_7
    704              default:
    705                  result = ESDHC_CMD_INVALID;
   \                     ??SDHC_ioctl_5: (+1)
   \   00000486   0x2004             MOVS     R0,#+4
   \   00000488   0x4681             MOV      R9,R0
    706                  break;
    707              }
    708              return result;
   \                     ??SDHC_ioctl_7: (+1)
   \   0000048A   0x4648             MOV      R0,R9
   \   0000048C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000048E   0xB009             ADD      SP,SP,#+36
   \   00000490   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    709          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     SDHC_card

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x01008000         DC32     0x1008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x400B102C         DC32     0x400b102c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x400B10C0         DC32     0x400b10c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x400B1004         DC32     0x400b1004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x400B1028         DC32     0x400b1028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x400B1044         DC32     0x400b1044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x000493E0         DC32     0x493e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x400B1024         DC32     0x400b1024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x400B1030         DC32     0x400b1030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x007F00B3         DC32     0x7f00b3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x400B1034         DC32     0x400b1034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     core_clk_khz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     ESDHC_COMMAND_XFERTYP

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x400B1008         DC32     0x400b1008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0xFFFF0200         DC32     0xffff0200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x400B1000         DC32     0x400b1000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x400B100C         DC32     0x400b100c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x000E0001         DC32     0xe0001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x400B1010         DC32     0x400b1010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x400B1014         DC32     0x400b1014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x400B1018         DC32     0x400b1018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x400B101C         DC32     0x400b101c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   0x40300000         DC32     0x40300000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \   00000000   0x016E3600         DC32     0x16e3600

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 43H, 68H, 69H, 70H, 5CH, 73H
   \              0x43 0x68    
   \              0x69 0x70    
   \              0x5C 0x73    
   \   00000030   0x72 0x63          DC8 72H, 63H, 5CH, 4DH, 4BH, 36H, 30H, 5FH
   \              0x5C 0x4D    
   \              0x4B 0x36    
   \              0x30 0x5F    
   \   00000038   0x73 0x64          DC8 73H, 64H, 68H, 63H, 2EH, 63H, 0
   \              0x68 0x63    
   \              0x2E 0x63    
   \              0x00         
   \   0000003F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   SDHC_cmd
        16   -> assert_failed
       8   SDHC_init
         8   -> SDHC_set_baudrate
         8   -> port_init
      72   SDHC_ioctl
        72   -> SDHC_cmd
        72   -> SDHC_init
        72   -> SDHC_set_baudrate
        72   -> systick_delay_ms
      20   SDHC_set_baudrate


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      64  ?_0
     256  ESDHC_COMMAND_XFERTYP
      20  SDHC_card
     368  SDHC_cmd
     244  SDHC_init
    1172  SDHC_ioctl
     212  SDHC_set_baudrate

 
    20 bytes in section .bss
   320 bytes in section .rodata
 2 104 bytes in section .text
 
 2 104 bytes of CODE  memory
   320 bytes of CONST memory
    20 bytes of DATA  memory

Errors: none
Warnings: none
