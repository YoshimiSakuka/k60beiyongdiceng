###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        26/Jul/2016  23:31:06
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_camera.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_camera.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\VCAN_camera.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\VCAN_camera.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_camera.c
      1          #include "common.h"
      2          
      3          
      4          //压缩二值化图像解压（空间 换 时间 解压）
      5          //srclen 是二值化图像的占用空间大小
      6          //【鹰眼解压】鹰眼图像解压，转为 二维数组 - 智能车资料区 - 山外论坛 http://vcan123.com/forum.php?mod=viewthread&tid=17&ctid=6
      7          //解压的时候，里面有个数组，配置黑、白对应的值是多少。

   \                                 In section .text, align 4, keep-with-next
      8          void img_extract(void *dst, void *src, uint32_t srclen)
      9          {
   \                     img_extract: (+1)
   \   00000000   0xB4F8             PUSH     {R3-R7}
     10              uint8_t colour[2] = {255, 0}; //0 和 1 分别对应的颜色
   \   00000002   0x4B23             LDR.N    R3,??img_extract_0
   \   00000004   0x881B             LDRH     R3,[R3, #+0]
   \   00000006   0xF8AD 0x3000      STRH     R3,[SP, #+0]
     11              uint8_t * mdst = dst;
   \   0000000A   0x0005             MOVS     R5,R0
     12              uint8_t * msrc = src;
   \   0000000C   0x000C             MOVS     R4,R1
     13              //注：山外的摄像头 0 表示 白色，1表示 黑色
     14              uint8_t tmpsrc;
     15              while(srclen --)
   \                     ??img_extract_1: (+1)
   \   0000000E   0x0016             MOVS     R6,R2
   \   00000010   0x1E72             SUBS     R2,R6,#+1
   \   00000012   0x2E00             CMP      R6,#+0
   \   00000014   0xD03A             BEQ.N    ??img_extract_2
     16              {
     17                  tmpsrc = *msrc++;
   \   00000016   0x7826             LDRB     R6,[R4, #+0]
   \   00000018   0x0033             MOVS     R3,R6
   \   0000001A   0x1C64             ADDS     R4,R4,#+1
     18                  *mdst++ = colour[ (tmpsrc >> 7 ) & 0x01 ];
   \   0000001C   0xAE00             ADD      R6,SP,#+0
   \   0000001E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000020   0x11DF             ASRS     R7,R3,#+7
   \   00000022   0x5DBE             LDRB     R6,[R7, R6]
   \   00000024   0x702E             STRB     R6,[R5, #+0]
   \   00000026   0x1C6D             ADDS     R5,R5,#+1
     19                  *mdst++ = colour[ (tmpsrc >> 6 ) & 0x01 ];
   \   00000028   0xAE00             ADD      R6,SP,#+0
   \   0000002A   0xF3C3 0x1780      UBFX     R7,R3,#+6,#+1
   \   0000002E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000030   0x5DBE             LDRB     R6,[R7, R6]
   \   00000032   0x702E             STRB     R6,[R5, #+0]
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
     20                  *mdst++ = colour[ (tmpsrc >> 5 ) & 0x01 ];
   \   00000036   0xAE00             ADD      R6,SP,#+0
   \   00000038   0xF3C3 0x1740      UBFX     R7,R3,#+5,#+1
   \   0000003C   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000003E   0x5DBE             LDRB     R6,[R7, R6]
   \   00000040   0x702E             STRB     R6,[R5, #+0]
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
     21                  *mdst++ = colour[ (tmpsrc >> 4 ) & 0x01 ];
   \   00000044   0xAE00             ADD      R6,SP,#+0
   \   00000046   0xF3C3 0x1700      UBFX     R7,R3,#+4,#+1
   \   0000004A   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000004C   0x5DBE             LDRB     R6,[R7, R6]
   \   0000004E   0x702E             STRB     R6,[R5, #+0]
   \   00000050   0x1C6D             ADDS     R5,R5,#+1
     22                  *mdst++ = colour[ (tmpsrc >> 3 ) & 0x01 ];
   \   00000052   0xAE00             ADD      R6,SP,#+0
   \   00000054   0xF3C3 0x07C0      UBFX     R7,R3,#+3,#+1
   \   00000058   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000005A   0x5DBE             LDRB     R6,[R7, R6]
   \   0000005C   0x702E             STRB     R6,[R5, #+0]
   \   0000005E   0x1C6D             ADDS     R5,R5,#+1
     23                  *mdst++ = colour[ (tmpsrc >> 2 ) & 0x01 ];
   \   00000060   0xAE00             ADD      R6,SP,#+0
   \   00000062   0xF3C3 0x0780      UBFX     R7,R3,#+2,#+1
   \   00000066   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000068   0x5DBE             LDRB     R6,[R7, R6]
   \   0000006A   0x702E             STRB     R6,[R5, #+0]
   \   0000006C   0x1C6D             ADDS     R5,R5,#+1
     24                  *mdst++ = colour[ (tmpsrc >> 1 ) & 0x01 ];
   \   0000006E   0xAE00             ADD      R6,SP,#+0
   \   00000070   0xF3C3 0x0740      UBFX     R7,R3,#+1,#+1
   \   00000074   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000076   0x5DBE             LDRB     R6,[R7, R6]
   \   00000078   0x702E             STRB     R6,[R5, #+0]
   \   0000007A   0x1C6D             ADDS     R5,R5,#+1
     25                  *mdst++ = colour[ (tmpsrc >> 0 ) & 0x01 ];
   \   0000007C   0xAE00             ADD      R6,SP,#+0
   \   0000007E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000080   0xF013 0x0701      ANDS     R7,R3,#0x1
   \   00000084   0x5DBE             LDRB     R6,[R7, R6]
   \   00000086   0x702E             STRB     R6,[R5, #+0]
   \   00000088   0x1C6D             ADDS     R5,R5,#+1
   \   0000008A   0xE7C0             B.N      ??img_extract_1
     26              }
     27          }
   \                     ??img_extract_2: (+1)
   \   0000008C   0xBCF1             POP      {R0,R4-R7}
   \   0000008E   0x4770             BX       LR               ;; return
   \                     ??img_extract_0:
   \   00000090   0x........         DC32     ?_0

   \                                 In section .rodata, align 2
   \                     ?_0:
   \   00000000   0xFF 0x00          DC8 255, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   img_extract


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?_0
     148  img_extract

 
   2 bytes in section .rodata
 148 bytes in section .text
 
 148 bytes of CODE  memory
   2 bytes of CONST memory

Errors: none
Warnings: none
