###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        26/Jul/2016  23:31:09
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_LCD.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_LCD.c -D
#        DEBUG -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\VCAN_LCD.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\VCAN_LCD.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Board\src\VCAN_LCD.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       VCAN_LCD.c
     11           * @brief      LCD 函数库
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-06-26
     15           */
     16          
     17          
     18          #include "common.h"
     19          #include "VCAN_LCD.h"
     20          
     21          
     22          
     23          /*!
     24           *  @brief      LCD初始化
     25           *  @since      v5.0
     26           */

   \                                 In section .text, align 2, keep-with-next
     27          void LCD_init(void)
     28          {
   \                     LCD_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     29              Site_t site = {0, 0};
   \   00000004   0x....             LDR.N    R0,??DataTable4
   \   00000006   0x6804             LDR      R4,[R0, #+0]
     30              Size_t size ;
     31          
     32              LCD_INIT();                             //初始化LCD
   \   00000008   0x.... 0x....      BL       LCD_ILI9341_init
     33          
     34              //LCD_SET_DIR(LCD_DIR+1);
     35          
     36              //由于初始化的时候进行 屏幕方向 选择，因而初始化完成后，才获取宽高
     37              size.W = LCD_W;
   \   0000000C   0x.... 0x....      BL       ILI9341_get_w
   \   00000010   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     38              size.H = LCD_H;
   \   00000014   0x.... 0x....      BL       ILI9341_get_h
   \   00000018   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     39          
     40              LCD_rectangle(site, size, BCOLOUR);     //初始化背景
   \   0000001C   0xF44F 0x4278      MOV      R2,#+63488
   \   00000020   0x9900             LDR      R1,[SP, #+0]
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0x.... 0x....      BL       LCD_rectangle
     41          }
   \   00000028   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     42          
     43          /*!
     44           *  @brief      显示实心矩形
     45           *  @param      site    左上角坐标
     46           *  @param      size    矩形大小
     47           *  @param      rgb565  颜色
     48           *  @since      v5.0
     49          *  Sample usage:        Site_t site = {10,20};   //x = 10 ,y = 20
     50                                  Size_t size = {50,60};  // W = 50 ,H = 60
     51                                  LCD_rectangle(site, size, RED);
     52           */

   \                                 In section .text, align 2, keep-with-next
     53          void LCD_rectangle(Site_t site, Size_t size, uint16 rgb565)
     54          {
   \                     LCD_rectangle: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
     55              uint32 n, temp;
     56          
     57              LCD_PTLON(site, size);              //开窗
   \   00000006   0x9900             LDR      R1,[SP, #+0]
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       LCD_ILI9341_ptlon
     58          
     59              temp = (uint32)size.W * size.H;
   \   0000000E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000012   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000016   0x4348             MULS     R0,R1,R0
   \   00000018   0x0007             MOVS     R7,R0
     60              LCD_RAMWR();                        //写内存
   \   0000001A   0x202C             MOVS     R0,#+44
   \   0000001C   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000020   0x8008             STRH     R0,[R1, #+0]
     61              for(n = 0; n < temp; n++)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x0006             MOVS     R6,R0
   \                     ??LCD_rectangle_0: (+1)
   \   00000026   0x42BE             CMP      R6,R7
   \   00000028   0xD204             BCS.N    ??LCD_rectangle_1
     62              {
     63                  LCD_WR_DATA( rgb565 );          //写数据
   \   0000002A   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   0000002E   0x8005             STRH     R5,[R0, #+0]
     64              }
   \   00000030   0x1C76             ADDS     R6,R6,#+1
   \   00000032   0xE7F8             B.N      ??LCD_rectangle_0
     65          }
   \                     ??LCD_rectangle_1: (+1)
   \   00000034   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void LCD_clear(uint16 rgb565)     //清屏
     68          {
   \                     LCD_clear: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
     69              Site_t site = {0,0};
   \   00000004   0x....             LDR.N    R0,??DataTable4_1
   \   00000006   0x6805             LDR      R5,[R0, #+0]
     70              Size_t size;
     71              size.H = LCD_H;
   \   00000008   0x.... 0x....      BL       ILI9341_get_h
   \   0000000C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     72              size.W = LCD_W;
   \   00000010   0x.... 0x....      BL       ILI9341_get_w
   \   00000014   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     73          
     74              LCD_rectangle(site, size, rgb565);
   \   00000018   0x0022             MOVS     R2,R4
   \   0000001A   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x0028             MOVS     R0,R5
   \   00000020   0x.... 0x....      BL       LCD_rectangle
     75          
     76          }
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     77          
     78          //画十字形

   \                                 In section .text, align 2, keep-with-next
     79          void LCD_cross(Site_t site,uint16 len,uint16 Color)
     80          {
   \                     LCD_cross: (+1)
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
     81              //画两条直线
     82              Site_t sitetmp;
     83              Size_t size;
     84              int16  stmp,etmp;
     85              uint16 w = LCD_W,h = LCD_H;
   \   0000000A   0x.... 0x....      BL       ILI9341_get_w
   \   0000000E   0x4680             MOV      R8,R0
   \   00000010   0x.... 0x....      BL       ILI9341_get_h
   \   00000014   0x4681             MOV      R9,R0
     86          
     87              ASSERT((site.x<LCD_W) && (site.y<LCD_H));       //十字线的中心不能超出液晶范围
   \   00000016   0x.... 0x....      BL       ILI9341_get_w
   \   0000001A   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   0000001E   0x4281             CMP      R1,R0
   \   00000020   0xD205             BCS.N    ??LCD_cross_0
   \   00000022   0x.... 0x....      BL       ILI9341_get_h
   \   00000026   0xF8BD 0x100A      LDRH     R1,[SP, #+10]
   \   0000002A   0x4281             CMP      R1,R0
   \   0000002C   0xD303             BCC.N    ??LCD_cross_1
   \                     ??LCD_cross_0: (+1)
   \   0000002E   0x2157             MOVS     R1,#+87
   \   00000030   0x....             LDR.N    R0,??DataTable4_2
   \   00000032   0x.... 0x....      BL       assert_failed
     88          
     89              stmp = site.x - len/2;                          //计算水平线的x轴起点和结束点，限制不超出液晶范围
   \                     ??LCD_cross_1: (+1)
   \   00000036   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \   0000003A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003C   0x2102             MOVS     R1,#+2
   \   0000003E   0xFB94 0xF1F1      SDIV     R1,R4,R1
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0x0006             MOVS     R6,R0
     90              if(stmp < 0)stmp = 0;
   \   00000046   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   00000048   0x2E00             CMP      R6,#+0
   \   0000004A   0xD501             BPL.N    ??LCD_cross_2
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x0006             MOVS     R6,R0
     91              etmp = site.x + len/2;
   \                     ??LCD_cross_2: (+1)
   \   00000050   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \   00000054   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000056   0x2102             MOVS     R1,#+2
   \   00000058   0xFB94 0xF1F1      SDIV     R1,R4,R1
   \   0000005C   0x1808             ADDS     R0,R1,R0
   \   0000005E   0x0007             MOVS     R7,R0
     92              if(etmp >= w)etmp= w-1;
   \   00000060   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   00000062   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000066   0x4547             CMP      R7,R8
   \   00000068   0xDB02             BLT.N    ??LCD_cross_3
   \   0000006A   0xF1B8 0x0001      SUBS     R0,R8,#+1
   \   0000006E   0x0007             MOVS     R7,R0
     93          
     94              sitetmp.x = stmp;
   \                     ??LCD_cross_3: (+1)
   \   00000070   0xF8AD 0x6004      STRH     R6,[SP, #+4]
     95              sitetmp.y = site.y;
   \   00000074   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000078   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     96              size.W = etmp - stmp +1;
   \   0000007C   0x1BB8             SUBS     R0,R7,R6
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \   00000080   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     97              size.H = 1;
   \   00000084   0x2001             MOVS     R0,#+1
   \   00000086   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     98              LCD_rectangle(sitetmp,size, Color);
   \   0000008A   0x002A             MOVS     R2,R5
   \   0000008C   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000008E   0x9900             LDR      R1,[SP, #+0]
   \   00000090   0x9801             LDR      R0,[SP, #+4]
   \   00000092   0x.... 0x....      BL       LCD_rectangle
     99          
    100              stmp = site.y - len/2;                          //计算水平线的x轴起点和结束点，限制不超出液晶范围
   \   00000096   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   0000009A   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000009C   0x2102             MOVS     R1,#+2
   \   0000009E   0xFB94 0xF1F1      SDIV     R1,R4,R1
   \   000000A2   0x1A40             SUBS     R0,R0,R1
   \   000000A4   0x0006             MOVS     R6,R0
    101              if(stmp < 0)stmp = 0;
   \   000000A6   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   000000A8   0x2E00             CMP      R6,#+0
   \   000000AA   0xD501             BPL.N    ??LCD_cross_4
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0x0006             MOVS     R6,R0
    102              etmp = site.y + len/2;
   \                     ??LCD_cross_4: (+1)
   \   000000B0   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000000B4   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000000B6   0x2102             MOVS     R1,#+2
   \   000000B8   0xFB94 0xF1F1      SDIV     R1,R4,R1
   \   000000BC   0x1808             ADDS     R0,R1,R0
   \   000000BE   0x0007             MOVS     R7,R0
    103              if(etmp >= h)etmp= h-1;
   \   000000C0   0xB23F             SXTH     R7,R7            ;; SignExt  R7,R7,#+16,#+16
   \   000000C2   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000C6   0x454F             CMP      R7,R9
   \   000000C8   0xDB02             BLT.N    ??LCD_cross_5
   \   000000CA   0xF1B9 0x0001      SUBS     R0,R9,#+1
   \   000000CE   0x0007             MOVS     R7,R0
    104          
    105              sitetmp.x = site.x;
   \                     ??LCD_cross_5: (+1)
   \   000000D0   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   000000D4   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    106              sitetmp.y = stmp;
   \   000000D8   0xF8AD 0x6006      STRH     R6,[SP, #+6]
    107              size.W = 1;
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    108              size.H = etmp - stmp +1;
   \   000000E2   0x1BB8             SUBS     R0,R7,R6
   \   000000E4   0x1C40             ADDS     R0,R0,#+1
   \   000000E6   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    109              LCD_rectangle(sitetmp,size, Color);
   \   000000EA   0x002A             MOVS     R2,R5
   \   000000EC   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000EE   0x9900             LDR      R1,[SP, #+0]
   \   000000F0   0x9801             LDR      R0,[SP, #+4]
   \   000000F2   0x.... 0x....      BL       LCD_rectangle
    110          
    111          
    112          
    113          }
   \   000000F6   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return
    114          
    115          /*!
    116           *  @brief      画点
    117           *  @param      site    左上角坐标
    118           *  @param      rgb565  颜色
    119           *  @since      v5.0
    120          *  Sample usage:        Site_t site = {10,20};   //x = 10 ,y = 20
    121                                  LCD_point(site, RED);
    122           */

   \                                 In section .text, align 2, keep-with-next
    123          void LCD_point(Site_t site, uint16 rgb565)
    124          {
   \                     LCD_point: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    125              Size_t size = {1, 1};
   \   00000006   0x....             LDR.N    R0,??DataTable4_3
   \   00000008   0x6806             LDR      R6,[R0, #+0]
    126              LCD_PTLON(site, size);
   \   0000000A   0x0031             MOVS     R1,R6
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       LCD_ILI9341_ptlon
    127              LCD_RAMWR();                        //写内存
   \   00000012   0x202C             MOVS     R0,#+44
   \   00000014   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000018   0x8008             STRH     R0,[R1, #+0]
    128              LCD_WR_DATA(rgb565);                //写数据
   \   0000001A   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   0000001E   0x8005             STRH     R5,[R0, #+0]
    129          }
   \   00000020   0xBD70             POP      {R4-R6,PC}       ;; return
    130          
    131          /*!
    132           *  @brief      画一堆点
    133           *  @param      site        点坐标数组
    134           *  @param      point_num   点的数量
    135           *  @param      rgb565      颜色
    136           *  @since      v5.0
    137          *  Sample usage:        Site_t site[3] = {{10,20},{11,21},{12,22}};   //3个点，坐标分别是  {10,20},{11,21},{12,22}
    138                                  LCD_points(site,3, RED);
    139           */

   \                                 In section .text, align 2, keep-with-next
    140          void LCD_points          (Site_t *site,uint32 point_num, uint16 rgb565)                 //画一堆点
    141          {
   \                     LCD_points: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    142              while(point_num--)
   \                     ??LCD_points_0: (+1)
   \   0000000A   0x0028             MOVS     R0,R5
   \   0000000C   0x1E45             SUBS     R5,R0,#+1
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD008             BEQ.N    ??LCD_points_1
   \   00000012   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \   00000016   0x9000             STR      R0,[SP, #+0]
    143              {
    144                  LCD_point(site[point_num],rgb565);                 //画点
   \   00000018   0x0031             MOVS     R1,R6
   \   0000001A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x.... 0x....      BL       LCD_point
   \   00000022   0xE7F2             B.N      ??LCD_points_0
    145              }
    146          }
   \                     ??LCD_points_1: (+1)
   \   00000024   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    147          
    148          /*!
    149           *  @brief      显示字符
    150           *  @param      site    左上角坐标
    151           *  @param      ascii   字符
    152           *  @param      Color   字体颜色
    153           *  @param      bkColor 背景颜色
    154           *  @since      v5.0
    155          *  Sample usage:        Site_t site = {10,20};   //x = 10 ,y = 20
    156                                  LCD_char(site,'0', BLUE,RED);
    157           */

   \                                 In section .text, align 2, keep-with-next
    158          void LCD_char(Site_t site, uint8 ascii, uint16 Color, uint16 bkColor)
    159          {
   \                     LCD_char: (+1)
   \   00000000   0xE92D 0x47F1      PUSH     {R0,R4-R10,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    160          #define MAX_CHAR_POSX (LCD_W-8)
    161          #define MAX_CHAR_POSY (LCD_H-16)
    162          
    163              uint8 temp, t, pos;
    164              Size_t size = {8, 16};
   \   0000000C   0x....             LDR.N    R0,??DataTable4_4
   \   0000000E   0xF8D0 0xA000      LDR      R10,[R0, #+0]
    165          
    166              if(site.x > MAX_CHAR_POSX || site.y > MAX_CHAR_POSY)
   \   00000012   0x.... 0x....      BL       ILI9341_get_w
   \   00000016   0x3808             SUBS     R0,R0,#+8
   \   00000018   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xDB06             BLT.N    ??LCD_char_0
   \   00000020   0x.... 0x....      BL       ILI9341_get_h
   \   00000024   0x3810             SUBS     R0,R0,#+16
   \   00000026   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xDA00             BGE.N    ??LCD_char_1
    167              {
    168                  return;
   \                     ??LCD_char_0: (+1)
   \   0000002E   0xE02F             B.N      ??LCD_char_2
    169              }
    170          
    171              LCD_PTLON(site, size);
   \                     ??LCD_char_1: (+1)
   \   00000030   0x4651             MOV      R1,R10
   \   00000032   0x9801             LDR      R0,[SP, #+4]
   \   00000034   0x.... 0x....      BL       LCD_ILI9341_ptlon
    172          
    173              LCD_RAMWR();                    //写内存
   \   00000038   0x202C             MOVS     R0,#+44
   \   0000003A   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   0000003E   0x8008             STRH     R0,[R1, #+0]
    174          
    175              for (pos = 0; pos < 16; pos++)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x4681             MOV      R9,R0
   \                     ??LCD_char_3: (+1)
   \   00000044   0xFA5F 0xF989      UXTB     R9,R9            ;; ZeroExt  R9,R9,#+24,#+24
   \   00000048   0xF1B9 0x0F10      CMP      R9,#+16
   \   0000004C   0xDA20             BGE.N    ??LCD_char_4
    176              {
    177                  temp = ascii_8x16[((ascii-0x20)*16)+pos];
   \   0000004E   0x....             LDR.N    R0,??DataTable4_5
   \   00000050   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000052   0x0121             LSLS     R1,R4,#+4
   \   00000054   0xFA51 0xF189      UXTAB    R1,R1,R9
   \   00000058   0x1808             ADDS     R0,R1,R0
   \   0000005A   0xF5B0 0x7000      SUBS     R0,R0,#+512
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x0007             MOVS     R7,R0
    178          
    179                  for(t = 0; t < 8; t++)
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x4680             MOV      R8,R0
   \                     ??LCD_char_5: (+1)
   \   00000066   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000006A   0xF1B8 0x0F08      CMP      R8,#+8
   \   0000006E   0xDA0C             BGE.N    ??LCD_char_6
    180                  {
    181          
    182                      if(temp & 0x80)
   \   00000070   0x0638             LSLS     R0,R7,#+24
   \   00000072   0xD503             BPL.N    ??LCD_char_7
    183                      {
    184                          LCD_WR_DATA(Color);
   \   00000074   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   00000078   0x8005             STRH     R5,[R0, #+0]
   \   0000007A   0xE002             B.N      ??LCD_char_8
    185                      }
    186                      else
    187                      {
    188                          LCD_WR_DATA(bkColor);
   \                     ??LCD_char_7: (+1)
   \   0000007C   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   00000080   0x8006             STRH     R6,[R0, #+0]
    189                      }
    190                      temp <<= 1;
   \                     ??LCD_char_8: (+1)
   \   00000082   0x007F             LSLS     R7,R7,#+1
    191                  }
   \   00000084   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000088   0xE7ED             B.N      ??LCD_char_5
    192              }
   \                     ??LCD_char_6: (+1)
   \   0000008A   0xF119 0x0901      ADDS     R9,R9,#+1
   \   0000008E   0xE7D9             B.N      ??LCD_char_3
    193              return;
   \                     ??LCD_char_4: (+1)
   \                     ??LCD_char_2: (+1)
   \   00000090   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
    194          #undef MAX_CHAR_POSX
    195          #undef MAX_CHAR_POSY
    196          }
    197          
    198          /*!
    199           *  @brief      显示字符串
    200           *  @param      site    左上角坐标
    201           *  @param      Str     字符串地址
    202           *  @param      Color   字体颜色
    203           *  @param      bkColor 背景颜色
    204           *  @since      v5.0
    205          *  Sample usage:        Site_t site = {10,20};   //x = 10 ,y = 20
    206                                  LCD_str(site,"www.vcan123.com", BLUE,RED);
    207           */

   \                                 In section .text, align 2, keep-with-next
    208          void LCD_str(Site_t site, uint8 *Str, uint16 Color, uint16 bkColor)
    209          {
   \                     LCD_str: (+1)
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x000C             MOVS     R4,R1
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x001E             MOVS     R6,R3
    210          #define MAX_CHAR_POSX (LCD_W-8)
    211          #define MAX_CHAR_POSY (LCD_H-16)
    212              while(*Str != '\0')
   \                     ??LCD_str_0: (+1)
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD02A             BEQ.N    ??LCD_str_1
    213              {
    214                  if(site.x > MAX_CHAR_POSX )
   \   00000010   0x.... 0x....      BL       ILI9341_get_w
   \   00000014   0x3808             SUBS     R0,R0,#+8
   \   00000016   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xDA07             BGE.N    ??LCD_str_2
    215                  {
    216                      //换行
    217                      site.x = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    218                      site.y += 16;
   \   00000024   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000028   0x3010             ADDS     R0,R0,#+16
   \   0000002A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    219                  }
    220                  if(site.y > MAX_CHAR_POSY )
   \                     ??LCD_str_2: (+1)
   \   0000002E   0x.... 0x....      BL       ILI9341_get_h
   \   00000032   0x3810             SUBS     R0,R0,#+16
   \   00000034   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xDA05             BGE.N    ??LCD_str_3
    221                  {
    222                      //一屏
    223                      site.y = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    224                      site.x = 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    225                  }
    226          
    227                  LCD_char(site, *Str, Color, bkColor);
   \                     ??LCD_str_3: (+1)
   \   00000048   0x0033             MOVS     R3,R6
   \   0000004A   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000004C   0x002A             MOVS     R2,R5
   \   0000004E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000050   0x7821             LDRB     R1,[R4, #+0]
   \   00000052   0x9801             LDR      R0,[SP, #+4]
   \   00000054   0x.... 0x....      BL       LCD_char
    228                  site.x += 8;
   \   00000058   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000005C   0x3008             ADDS     R0,R0,#+8
   \   0000005E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    229                  Str ++ ;
   \   00000062   0x1C64             ADDS     R4,R4,#+1
   \   00000064   0xE7D1             B.N      ??LCD_str_0
    230              }
    231          #undef MAX_CHAR_POSX
    232          #undef MAX_CHAR_POSY
    233          }
   \                     ??LCD_str_1: (+1)
   \   00000066   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    234          
    235          /*!
    236           *  @brief      显示数字
    237           *  @param      site    左上角坐标
    238           *  @param      num     数字
    239           *  @param      Color   字体颜色
    240           *  @param      bkColor 背景颜色
    241           *  @since      v5.0
    242          *  Sample usage:        Site_t site = {10,20};   //x = 10 ,y = 20
    243                                  LCD_num(site,123, BLUE,RED);
    244           */

   \                                 In section .text, align 2, keep-with-next
    245          void LCD_num(Site_t site, uint32 num, uint16 Color, uint16 bkColor)
    246          {
   \                     LCD_num: (+1)
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
    247              uint32 res = num;
   \   0000000C   0x0027             MOVS     R7,R4
    248              uint8 t = 0;
   \   0000000E   0xF05F 0x0800      MOVS     R8,#+0
    249              Site_t sitetemp;
    250              sitetemp.y = site.y;
   \   00000012   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000016   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    251          
    252              if( num == 0 )
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD108             BNE.N    ??LCD_num_0
    253              {
    254                  LCD_char(site, '0', Color, bkColor);
   \   0000001E   0x0033             MOVS     R3,R6
   \   00000020   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000022   0x002A             MOVS     R2,R5
   \   00000024   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000026   0x2130             MOVS     R1,#+48
   \   00000028   0x9801             LDR      R0,[SP, #+4]
   \   0000002A   0x.... 0x....      BL       LCD_char
    255                  return;
   \   0000002E   0xE029             B.N      ??LCD_num_1
    256              }
    257              while( res )  /*得到数字长度t*/
   \                     ??LCD_num_0: (+1)
   \   00000030   0x2F00             CMP      R7,#+0
   \   00000032   0xD005             BEQ.N    ??LCD_num_2
    258              {
    259                  res /= 10;
   \   00000034   0x200A             MOVS     R0,#+10
   \   00000036   0xFBB7 0xF7F0      UDIV     R7,R7,R0
    260                  t++;
   \   0000003A   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000003E   0xE7F7             B.N      ??LCD_num_0
    261              }
    262          
    263              while(num)
   \                     ??LCD_num_2: (+1)
   \   00000040   0x2C00             CMP      R4,#+0
   \   00000042   0xD01F             BEQ.N    ??LCD_num_3
    264              {
    265                  sitetemp.x = site.x + (8 * (t--) - 8);
   \   00000044   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000048   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000004C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000050   0xEB10 0x00C8      ADDS     R0,R0,R8, LSL #+3
   \   00000054   0x3808             SUBS     R0,R0,#+8
   \   00000056   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000005A   0xF1B8 0x0801      SUBS     R8,R8,#+1
    266                  LCD_char(sitetemp, (num % 10) + '0', Color, bkColor);
   \   0000005E   0x200A             MOVS     R0,#+10
   \   00000060   0x0033             MOVS     R3,R6
   \   00000062   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000064   0x002A             MOVS     R2,R5
   \   00000066   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000068   0xFBB4 0xF1F0      UDIV     R1,R4,R0
   \   0000006C   0xFB00 0x4011      MLS      R0,R0,R1,R4
   \   00000070   0xF110 0x0130      ADDS     R1,R0,#+48
   \   00000074   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000076   0x9800             LDR      R0,[SP, #+0]
   \   00000078   0x.... 0x....      BL       LCD_char
    267                  num /= 10 ;
   \   0000007C   0x200A             MOVS     R0,#+10
   \   0000007E   0xFBB4 0xF4F0      UDIV     R4,R4,R0
   \   00000082   0xE7DD             B.N      ??LCD_num_2
    268              }
    269          }
   \                     ??LCD_num_3: (+1)
   \                     ??LCD_num_1: (+1)
   \   00000084   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    270          
    271          /*!
    272           *  @brief      显示数字（清空多余的位）
    273           *  @param      site            左上角坐标
    274           *  @param      num             数字
    275           *  @param      max_num_bit     最大的位数
    276           *  @param      Color           字体颜色
    277           *  @param      bkColor         背景颜色
    278           *  @since      v5.0
    279          *  Sample usage:        Site_t site = {10,20};   //x = 10 ,y = 20
    280                                  LCD_num_BC(site,123,5, BLUE,RED);
    281           */

   \                                 In section .text, align 2, keep-with-next
    282          void LCD_num_BC(Site_t site, uint32 num, uint8 max_num_bit, uint16 Color, uint16 bkColor)
    283          {
   \                     LCD_num_BC: (+1)
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x0015             MOVS     R5,R2
   \   0000000A   0x001E             MOVS     R6,R3
   \   0000000C   0x9C0A             LDR      R4,[SP, #+40]
    284              uint32 res = num;
   \   0000000E   0x464F             MOV      R7,R9
    285              uint8 t = 0;
   \   00000010   0xF05F 0x0800      MOVS     R8,#+0
    286              Site_t sitetemp;
    287              Size_t size;
    288          
    289              sitetemp.y = site.y;
   \   00000014   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000018   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    290          
    291              if( num == 0 )
   \   0000001C   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000020   0xD11C             BNE.N    ??LCD_num_BC_0
    292              {
    293                  LCD_char(site, '0', Color, bkColor);
   \   00000022   0x0023             MOVS     R3,R4
   \   00000024   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   00000026   0x0032             MOVS     R2,R6
   \   00000028   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   0000002A   0x2130             MOVS     R1,#+48
   \   0000002C   0x9802             LDR      R0,[SP, #+8]
   \   0000002E   0x.... 0x....      BL       LCD_char
    294          
    295                  site.x += 8;
   \   00000032   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000036   0x3008             ADDS     R0,R0,#+8
   \   00000038   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    296                  size.H  = 16;
   \   0000003C   0x2010             MOVS     R0,#+16
   \   0000003E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    297                  size.W  = 8 * (max_num_bit - 1);
   \   00000042   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000044   0x1E68             SUBS     R0,R5,#+1
   \   00000046   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000048   0x00C0             LSLS     R0,R0,#+3
   \   0000004A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    298                  LCD_rectangle(site, size, bkColor);
   \   0000004E   0x0022             MOVS     R2,R4
   \   00000050   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000052   0x9900             LDR      R1,[SP, #+0]
   \   00000054   0x9802             LDR      R0,[SP, #+8]
   \   00000056   0x.... 0x....      BL       LCD_rectangle
    299          
    300                  return;
   \   0000005A   0xE04E             B.N      ??LCD_num_BC_1
    301              }
    302              while( res )            /*得到数字长度t*/
   \                     ??LCD_num_BC_0: (+1)
   \   0000005C   0x2F00             CMP      R7,#+0
   \   0000005E   0xD005             BEQ.N    ??LCD_num_BC_2
    303              {
    304                  res /= 10;
   \   00000060   0x200A             MOVS     R0,#+10
   \   00000062   0xFBB7 0xF7F0      UDIV     R7,R7,R0
    305                  t++;
   \   00000066   0xF118 0x0801      ADDS     R8,R8,#+1
   \   0000006A   0xE7F7             B.N      ??LCD_num_BC_0
    306              }
    307              if(t >= max_num_bit )    //限制最大长度
   \                     ??LCD_num_BC_2: (+1)
   \   0000006C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000070   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000072   0x45A8             CMP      R8,R5
   \   00000074   0xD300             BCC.N    ??LCD_num_BC_3
    308              {
    309                  t = max_num_bit;
   \   00000076   0x46A8             MOV      R8,R5
    310              }
    311          
    312              res = t;
   \                     ??LCD_num_BC_3: (+1)
   \   00000078   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000007C   0x4647             MOV      R7,R8
    313          
    314              while( t != 0 )
   \                     ??LCD_num_BC_4: (+1)
   \   0000007E   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000082   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000086   0xD01F             BEQ.N    ??LCD_num_BC_5
    315              {
    316                  sitetemp.x = site.x + (8 * (t--) - 8);
   \   00000088   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000008C   0xFA5F 0xF888      UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000090   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000094   0xEB10 0x00C8      ADDS     R0,R0,R8, LSL #+3
   \   00000098   0x3808             SUBS     R0,R0,#+8
   \   0000009A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000009E   0xF1B8 0x0801      SUBS     R8,R8,#+1
    317                  LCD_char(sitetemp, (num % 10) + '0', Color, bkColor);
   \   000000A2   0x200A             MOVS     R0,#+10
   \   000000A4   0x0023             MOVS     R3,R4
   \   000000A6   0xB29B             UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   000000A8   0x0032             MOVS     R2,R6
   \   000000AA   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000AC   0xFBB9 0xF1F0      UDIV     R1,R9,R0
   \   000000B0   0xFB00 0x9011      MLS      R0,R0,R1,R9
   \   000000B4   0xF110 0x0130      ADDS     R1,R0,#+48
   \   000000B8   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000BA   0x9801             LDR      R0,[SP, #+4]
   \   000000BC   0x.... 0x....      BL       LCD_char
    318                  num /= 10 ;
   \   000000C0   0x200A             MOVS     R0,#+10
   \   000000C2   0xFBB9 0xF9F0      UDIV     R9,R9,R0
   \   000000C6   0xE7DA             B.N      ??LCD_num_BC_4
    319              }
    320          
    321              if(res != max_num_bit )
   \                     ??LCD_num_BC_5: (+1)
   \   000000C8   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000CA   0x42AF             CMP      R7,R5
   \   000000CC   0xD015             BEQ.N    ??LCD_num_BC_6
    322              {
    323                  size.W = 8 * (max_num_bit - res);
   \   000000CE   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000D0   0x1BE8             SUBS     R0,R5,R7
   \   000000D2   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000D4   0x00C0             LSLS     R0,R0,#+3
   \   000000D6   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    324                  site.x += (8 * res);
   \   000000DA   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   000000DE   0x00F9             LSLS     R1,R7,#+3
   \   000000E0   0xFA11 0xF080      UXTAH    R0,R1,R0
   \   000000E4   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    325                  size.H  = 16;
   \   000000E8   0x2010             MOVS     R0,#+16
   \   000000EA   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    326                  LCD_rectangle(site, size, bkColor);
   \   000000EE   0x0022             MOVS     R2,R4
   \   000000F0   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000000F2   0x9900             LDR      R1,[SP, #+0]
   \   000000F4   0x9802             LDR      R0,[SP, #+8]
   \   000000F6   0x.... 0x....      BL       LCD_rectangle
    327              }
    328          }
   \                     ??LCD_num_BC_6: (+1)
   \                     ??LCD_num_BC_1: (+1)
   \   000000FA   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return
    329          
    330          /*!
    331           *  @brief      灰度图像显示
    332           *  @param      site            左上角坐标
    333           *  @param      size            显示图像大小
    334           *  @param      img             图像地址
    335           *  @since      v5.0
    336           *  Sample usage:       Site_t site = {10,20};      //x = 10 ,y = 20
    337                                  Size_t size = {320,240};    //W = 320,H = 240
    338                                  LCD_Img_gray(site, size, img);
    339           */

   \                                 In section .text, align 2, keep-with-next
    340          void LCD_Img_gray(Site_t site, Size_t size, uint8 *img)
    341          {
   \                     LCD_Img_gray: (+1)
   \   00000000   0xE92D 0x41F3      PUSH     {R0,R1,R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
    342              uint32     total = (size.H * size.W);
   \   00000008   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000000C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000010   0xFB01 0xF800      MUL      R8,R1,R0
    343              uint16     imgtemp;
    344              uint8     *pimg = (uint8 *)img;
   \   00000014   0x002F             MOVS     R7,R5
    345          
    346              LCD_PTLON(site, size);                      //开窗
   \   00000016   0x9901             LDR      R1,[SP, #+4]
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       LCD_ILI9341_ptlon
    347              LCD_RAMWR();                                //写内存
   \   0000001E   0x202C             MOVS     R0,#+44
   \   00000020   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000024   0x8008             STRH     R0,[R1, #+0]
    348          
    349              while(total--)
   \                     ??LCD_Img_gray_0: (+1)
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD016             BEQ.N    ??LCD_Img_gray_1
    350              {
    351                  imgtemp     = (uint16) * (pimg++);
   \   00000030   0x7838             LDRB     R0,[R7, #+0]
   \   00000032   0x0006             MOVS     R6,R0
   \   00000034   0x1C7F             ADDS     R7,R7,#+1
    352                  imgtemp = GRAY_2_RGB565(imgtemp);
   \   00000036   0x0030             MOVS     R0,R6
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x08C0             LSRS     R0,R0,#+3
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x0031             MOVS     R1,R6
   \   00000040   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000042   0x0889             LSRS     R1,R1,#+2
   \   00000044   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000046   0x0149             LSLS     R1,R1,#+5
   \   00000048   0xEA51 0x20C0      ORRS     R0,R1,R0, LSL #+11
   \   0000004C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000004E   0x08F1             LSRS     R1,R6,#+3
   \   00000050   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000052   0xEA51 0x0600      ORRS     R6,R1,R0
    353                  LCD_WR_DATA( imgtemp );               //写图像数据
   \   00000056   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   0000005A   0x8006             STRH     R6,[R0, #+0]
   \   0000005C   0xE7E3             B.N      ??LCD_Img_gray_0
    354              }
    355          }
   \                     ??LCD_Img_gray_1: (+1)
   \   0000005E   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
    356          
    357          /*!
    358           *  @brief      缩放灰度图像显示
    359           *  @param      site            左上角坐标
    360           *  @param      size            显示图像大小
    361           *  @param      img             图像地址
    362           *  @param      imgsize         图像大小
    363           *  @since      v5.0
    364           *  Sample usage:       Site_t site = {10,20};          //x = 10 ,y = 20
    365                                  Size_t size = {80,60};          //W = 80,H = 60
    366                                  Size_t imgsize = {320,240};     //W = 320,H = 240
    367                                  LCD_Img_gray_Z(site, size, img,imgsize);
    368           */

   \                                 In section .text, align 2, keep-with-next
    369          void LCD_Img_gray_Z(Site_t site, Size_t size, uint8 *img, Size_t imgsize)
    370          {
   \                     LCD_Img_gray_Z: (+1)
   \   00000000   0xE92D 0x4FFA      PUSH     {R1,R3-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x0015             MOVS     R5,R2
    371          
    372              uint32 temp, tempY;
    373              uint16 x, y;
    374              uint16 X, Y;
    375              uint8 *pimg = (uint8 *)img;
   \   0000000A   0x46AA             MOV      R10,R5
    376              uint16 rgb;
    377          
    378              LCD_PTLON(site, size);                      //开窗
   \   0000000C   0x9903             LDR      R1,[SP, #+12]
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x.... 0x....      BL       LCD_ILI9341_ptlon
    379          
    380              LCD_RAMWR();                                //写内存
   \   00000014   0x202C             MOVS     R0,#+44
   \   00000016   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
    381          
    382              for(y = 0; y < size.H; y++)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x4680             MOV      R8,R0
   \                     ??LCD_Img_gray_Z_0: (+1)
   \   00000020   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   00000024   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000028   0x4580             CMP      R8,R0
   \   0000002A   0xD243             BCS.N    ??LCD_Img_gray_Z_1
    383              {
    384                  Y = ( (  y * imgsize.H   ) / size.H) ;
   \   0000002C   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000030   0xF8BD 0x0012      LDRH     R0,[SP, #+18]
   \   00000034   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000038   0xF8BD 0x100E      LDRH     R1,[SP, #+14]
   \   0000003C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000040   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    385                  tempY = Y * imgsize.W ;
   \   00000044   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000048   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   0000004C   0x4348             MULS     R0,R1,R0
   \   0000004E   0x9001             STR      R0,[SP, #+4]
    386          
    387                  for(x = 0; x < size.W; x++)
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x0007             MOVS     R7,R0
   \                     ??LCD_Img_gray_Z_2: (+1)
   \   00000054   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000058   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005A   0x4287             CMP      R7,R0
   \   0000005C   0xD227             BCS.N    ??LCD_Img_gray_Z_3
    388                  {
    389                      X = ( x * imgsize.W  ) / size.W ;
   \   0000005E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000060   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   00000064   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000068   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   0000006C   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000070   0x4681             MOV      R9,R0
    390                      temp = tempY + X;
   \   00000072   0x9801             LDR      R0,[SP, #+4]
   \   00000074   0xFA10 0xF089      UXTAH    R0,R0,R9
   \   00000078   0x0006             MOVS     R6,R0
    391                      rgb = GRAY_2_RGB565(pimg[temp]);    //
   \   0000007A   0xF816 0x000A      LDRB     R0,[R6, R10]
   \   0000007E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000080   0x08C0             LSRS     R0,R0,#+3
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0xF816 0x100A      LDRB     R1,[R6, R10]
   \   00000088   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008A   0x0889             LSRS     R1,R1,#+2
   \   0000008C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000008E   0x0149             LSLS     R1,R1,#+5
   \   00000090   0xEA51 0x20C0      ORRS     R0,R1,R0, LSL #+11
   \   00000094   0xF816 0x100A      LDRB     R1,[R6, R10]
   \   00000098   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009A   0x08C9             LSRS     R1,R1,#+3
   \   0000009C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000009E   0x4308             ORRS     R0,R1,R0
   \   000000A0   0x4683             MOV      R11,R0
    392                      LCD_WR_DATA(rgb);
   \   000000A2   0xF05F 0x40D0      MOVS     R0,#+1744830464
   \   000000A6   0xF8A0 0xB000      STRH     R11,[R0, #+0]
    393                  }
   \   000000AA   0x1C7F             ADDS     R7,R7,#+1
   \   000000AC   0xE7D2             B.N      ??LCD_Img_gray_Z_2
    394              }
   \                     ??LCD_Img_gray_Z_3: (+1)
   \   000000AE   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000B2   0xE7B5             B.N      ??LCD_Img_gray_Z_0
    395          }
   \                     ??LCD_Img_gray_Z_1: (+1)
   \   000000B4   0xB005             ADD      SP,SP,#+20
   \   000000B6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    396          
    397          
    398          

   \                                 In section .text, align 2, keep-with-next
    399          void LCD_Img_Binary(Site_t site, Size_t size, uint8 *img)
    400          {
   \                     LCD_Img_Binary: (+1)
   \   00000000   0xE92D 0x43F2      PUSH     {R1,R4-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
    401              uint32     total = (size.H * size.W) / 8;
   \   00000008   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000000C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000010   0x4348             MULS     R0,R1,R0
   \   00000012   0x2108             MOVS     R1,#+8
   \   00000014   0xFB90 0xF6F1      SDIV     R6,R0,R1
    402              uint8     imgtemp;
    403              uint8       bitindex;
    404              uint8     *pimg = (uint8 *)img;
   \   00000018   0x46A9             MOV      R9,R5
    405          
    406              LCD_PTLON(site, size);                      //开窗
   \   0000001A   0x9900             LDR      R1,[SP, #+0]
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       LCD_ILI9341_ptlon
    407          
    408              LCD_RAMWR();                                //写内存
   \   00000022   0x202C             MOVS     R0,#+44
   \   00000024   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000028   0x8008             STRH     R0,[R1, #+0]
    409          
    410              while(total--)
   \                     ??LCD_Img_Binary_0: (+1)
   \   0000002A   0x0030             MOVS     R0,R6
   \   0000002C   0x1E46             SUBS     R6,R0,#+1
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD01E             BEQ.N    ??LCD_Img_Binary_1
    411              {
    412                  imgtemp     = *(pimg++);
   \   00000032   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000036   0x0007             MOVS     R7,R0
   \   00000038   0xF119 0x0901      ADDS     R9,R9,#+1
    413                  bitindex    = 8;
   \   0000003C   0x2008             MOVS     R0,#+8
   \   0000003E   0x4680             MOV      R8,R0
    414                  while(bitindex--)
   \                     ??LCD_Img_Binary_2: (+1)
   \   00000040   0x4640             MOV      R0,R8
   \   00000042   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD0EE             BEQ.N    ??LCD_Img_Binary_0
    415                  {
    416                      if( imgtemp & (0x01 << bitindex) )
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xFA10 0xF008      LSLS     R0,R0,R8
   \   00000052   0x0039             MOVS     R1,R7
   \   00000054   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000056   0x4201             TST      R1,R0
   \   00000058   0xD004             BEQ.N    ??LCD_Img_Binary_3
    417                      {
    418                          LCD_WR_DATA( BINARY_COLOR );      //写图像数据
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xF05F 0x41D0      MOVS     R1,#+1744830464
   \   00000060   0x8008             STRH     R0,[R1, #+0]
   \   00000062   0xE7ED             B.N      ??LCD_Img_Binary_2
    419                      }
    420                      else
    421                      {
    422                          LCD_WR_DATA(  BINARY_BGCOLOR  );      //写图像数据
   \                     ??LCD_Img_Binary_3: (+1)
   \   00000064   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000068   0xF05F 0x41D0      MOVS     R1,#+1744830464
   \   0000006C   0x8008             STRH     R0,[R1, #+0]
   \   0000006E   0xE7E7             B.N      ??LCD_Img_Binary_2
    423                      }
    424                  }
    425              }
    426          }
   \                     ??LCD_Img_Binary_1: (+1)
   \   00000070   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    427          

   \                                 In section .text, align 2, keep-with-next
    428          void LCD_Img_Binary_Z(Site_t site, Size_t size, uint8 *img, Size_t imgsize)
    429          {
   \                     LCD_Img_Binary_Z: (+1)
   \   00000000   0xE92D 0x4FFB      PUSH     {R0,R1,R3-R11,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x4692             MOV      R10,R2
    430          
    431              uint32 temp, tempY;
    432              uint16 x, y;
    433              uint16 X, Y;
    434              uint8 *pimg = (uint8 *)img;
   \   00000008   0x46D3             MOV      R11,R10
    435          
    436              LCD_PTLON(site, size);                      //开窗
   \   0000000A   0x9901             LDR      R1,[SP, #+4]
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x.... 0x....      BL       LCD_ILI9341_ptlon
    437          
    438              LCD_RAMWR();                                //写内存
   \   00000012   0x202C             MOVS     R0,#+44
   \   00000014   0xF05F 0x41C0      MOVS     R1,#+1610612736
   \   00000018   0x8008             STRH     R0,[R1, #+0]
    439          
    440              for(y = 0; y < size.H; y++)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4680             MOV      R8,R0
   \                     ??LCD_Img_Binary_Z_0: (+1)
   \   0000001E   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000022   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   00000026   0x4580             CMP      R8,R0
   \   00000028   0xD23F             BCS.N    ??LCD_Img_Binary_Z_1
    441              {
    442                  Y = ( (  y * imgsize.H  ) / size.H) ;
   \   0000002A   0xFA1F 0xF888      UXTH     R8,R8            ;; ZeroExt  R8,R8,#+16,#+16
   \   0000002E   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000032   0xFB00 0xF008      MUL      R0,R0,R8
   \   00000036   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   0000003A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000003E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    443                  tempY = Y * imgsize.W ;
   \   00000042   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000046   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   0000004A   0x4348             MULS     R0,R1,R0
   \   0000004C   0x0006             MOVS     R6,R0
    444          
    445                  for(x = 0; x < size.W; x++)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x0007             MOVS     R7,R0
   \                     ??LCD_Img_Binary_Z_2: (+1)
   \   00000052   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000056   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000058   0x4287             CMP      R7,R0
   \   0000005A   0xD223             BCS.N    ??LCD_Img_Binary_Z_3
    446                  {
    447                      X = (( x * imgsize.W  ) / size.W) ;
   \   0000005C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005E   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000062   0xFB00 0xF007      MUL      R0,R0,R7
   \   00000066   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000006A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000006E   0x4681             MOV      R9,R0
    448                      temp = tempY + X;
   \   00000070   0xFA16 0xF089      UXTAH    R0,R6,R9
   \   00000074   0x0005             MOVS     R5,R0
    449                      if( (pimg[temp>>3] & (1 << (7 - (temp & 0x07))) ) == 0  )
   \   00000076   0x08E8             LSRS     R0,R5,#+3
   \   00000078   0xF810 0x000B      LDRB     R0,[R0, R11]
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0xF015 0x0207      ANDS     R2,R5,#0x7
   \   00000082   0xF1D2 0x0207      RSBS     R2,R2,#+7
   \   00000086   0x4091             LSLS     R1,R1,R2
   \   00000088   0x4208             TST      R0,R1
   \   0000008A   0xD105             BNE.N    ??LCD_Img_Binary_Z_4
    450                      {
    451                          LCD_WR_DATA( BINARY_BGCOLOR );        //写图像数据
   \   0000008C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000090   0xF05F 0x41D0      MOVS     R1,#+1744830464
   \   00000094   0x8008             STRH     R0,[R1, #+0]
   \   00000096   0xE003             B.N      ??LCD_Img_Binary_Z_5
    452                      }
    453                      else
    454                      {
    455                          LCD_WR_DATA( BINARY_COLOR );      //写图像数据
   \                     ??LCD_Img_Binary_Z_4: (+1)
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xF05F 0x41D0      MOVS     R1,#+1744830464
   \   0000009E   0x8008             STRH     R0,[R1, #+0]
    456                      }
    457                  }
   \                     ??LCD_Img_Binary_Z_5: (+1)
   \   000000A0   0x1C7F             ADDS     R7,R7,#+1
   \   000000A2   0xE7D6             B.N      ??LCD_Img_Binary_Z_2
    458              }
   \                     ??LCD_Img_Binary_Z_3: (+1)
   \   000000A4   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000000A8   0xE7B9             B.N      ??LCD_Img_Binary_Z_0
    459          }
   \                     ??LCD_Img_Binary_Z_1: (+1)
   \   000000AA   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    460          

   \                                 In section .text, align 2, keep-with-next
    461          void LCD_wave(Site_t site,Size_t size,uint8 *img,uint8 maxval,uint16 Color ,uint16 bkColor)
    462          {
   \                     LCD_wave: (+1)
   \   00000000   0xE92D 0x43F3      PUSH     {R0,R1,R4-R9,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   \   00000006   0x4691             MOV      R9,R2
   \   00000008   0x001E             MOVS     R6,R3
   \   0000000A   0x9C0A             LDR      R4,[SP, #+40]
   \   0000000C   0x9D0B             LDR      R5,[SP, #+44]
    463          
    464              uint8 h;
    465              uint16 y = site.y + size.H - 1;
   \   0000000E   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000012   0xF8BD 0x100A      LDRH     R1,[SP, #+10]
   \   00000016   0x1808             ADDS     R0,R1,R0
   \   00000018   0xF1B0 0x0801      SUBS     R8,R0,#+1
    466          
    467              LCD_rectangle(site, size,bkColor);
   \   0000001C   0x002A             MOVS     R2,R5
   \   0000001E   0xB292             UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   00000020   0x9902             LDR      R1,[SP, #+8]
   \   00000022   0x9801             LDR      R0,[SP, #+4]
   \   00000024   0x.... 0x....      BL       LCD_rectangle
    468              site.x += size.W;
   \   00000028   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000002C   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \   00000030   0x1808             ADDS     R0,R1,R0
   \   00000032   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    469              img  += (size.W - 1);
   \   00000036   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000003A   0xEB10 0x0009      ADDS     R0,R0,R9
   \   0000003E   0xF1B0 0x0901      SUBS     R9,R0,#+1
    470              while(size.W --)
   \                     ??LCD_wave_0: (+1)
   \   00000042   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000046   0x1E41             SUBS     R1,R0,#+1
   \   00000048   0xF8AD 0x1008      STRH     R1,[SP, #+8]
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD024             BEQ.N    ??LCD_wave_1
    471              {
    472                  if(*img >= maxval )
   \   00000052   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000056   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000058   0x42B0             CMP      R0,R6
   \   0000005A   0xD304             BCC.N    ??LCD_wave_2
    473                  {
    474                      h = size.H - 1;
   \   0000005C   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   00000060   0x1E40             SUBS     R0,R0,#+1
   \   00000062   0x0007             MOVS     R7,R0
   \   00000064   0xE008             B.N      ??LCD_wave_3
    475                  }
    476                  else
    477                  {
    478                      h = ((*img )* size.H )/maxval;
   \                     ??LCD_wave_2: (+1)
   \   00000066   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   0000006A   0xF8BD 0x100A      LDRH     R1,[SP, #+10]
   \   0000006E   0x4348             MULS     R0,R1,R0
   \   00000070   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000072   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   00000076   0x0007             MOVS     R7,R0
    479                  }
    480                  site.y = y - h ;
   \                     ??LCD_wave_3: (+1)
   \   00000078   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000007A   0xEBB8 0x0007      SUBS     R0,R8,R7
   \   0000007E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    481                  site.x--;
   \   00000082   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000086   0x1E40             SUBS     R0,R0,#+1
   \   00000088   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    482                  img --;
   \   0000008C   0xF1B9 0x0901      SUBS     R9,R9,#+1
    483                  LCD_point(site, Color);
   \   00000090   0x0021             MOVS     R1,R4
   \   00000092   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000094   0x9801             LDR      R0,[SP, #+4]
   \   00000096   0x.... 0x....      BL       LCD_point
   \   0000009A   0xE7D2             B.N      ??LCD_wave_0
    484              }
    485          }
   \                     ??LCD_wave_1: (+1)
   \   0000009C   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return
    486          

   \                                 In section .text, align 2, keep-with-next
    487          void LCD_wave_display(Site_t site,Size_t size,uint8 *img,uint8 maxval,uint16 Color)
    488          {
   \                     LCD_wave_display: (+1)
   \   00000000   0xE92D 0x41F3      PUSH     {R0,R1,R4-R8,LR}
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
   \   00000008   0x9C08             LDR      R4,[SP, #+32]
    489          
    490              uint8 h;
    491              uint16 y = site.y + size.H - 1;
   \   0000000A   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000000E   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000012   0x1808             ADDS     R0,R1,R0
   \   00000014   0xF1B0 0x0801      SUBS     R8,R0,#+1
    492          
    493              site.x += size.W;
   \   00000018   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001C   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   00000020   0x1808             ADDS     R0,R1,R0
   \   00000022   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    494              img  += (size.W - 1);
   \   00000026   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000002A   0x1940             ADDS     R0,R0,R5
   \   0000002C   0x1E45             SUBS     R5,R0,#+1
    495              while(size.W --)
   \                     ??LCD_wave_display_0: (+1)
   \   0000002E   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000032   0x1E41             SUBS     R1,R0,#+1
   \   00000034   0xF8AD 0x1004      STRH     R1,[SP, #+4]
   \   00000038   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD021             BEQ.N    ??LCD_wave_display_1
    496              {
    497                  if(*img >= maxval )
   \   0000003E   0x7828             LDRB     R0,[R5, #+0]
   \   00000040   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000042   0x42B0             CMP      R0,R6
   \   00000044   0xD304             BCC.N    ??LCD_wave_display_2
    498                  {
    499                      h = size.H - 1;
   \   00000046   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   0000004A   0x1E40             SUBS     R0,R0,#+1
   \   0000004C   0x0007             MOVS     R7,R0
   \   0000004E   0xE007             B.N      ??LCD_wave_display_3
    500                  }
    501                  else
    502                  {
    503                      h = ((*img )* size.H )/maxval;
   \                     ??LCD_wave_display_2: (+1)
   \   00000050   0x7828             LDRB     R0,[R5, #+0]
   \   00000052   0xF8BD 0x1006      LDRH     R1,[SP, #+6]
   \   00000056   0x4348             MULS     R0,R1,R0
   \   00000058   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000005A   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   0000005E   0x0007             MOVS     R7,R0
    504                  }
    505                  site.y = y - h ;
   \                     ??LCD_wave_display_3: (+1)
   \   00000060   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000062   0xEBB8 0x0007      SUBS     R0,R8,R7
   \   00000066   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    506                  site.x--;
   \   0000006A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000006E   0x1E40             SUBS     R0,R0,#+1
   \   00000070   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    507                  img --;
   \   00000074   0x1E6D             SUBS     R5,R5,#+1
    508                  LCD_point(site, Color);
   \   00000076   0x0021             MOVS     R1,R4
   \   00000078   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0x.... 0x....      BL       LCD_point
   \   00000080   0xE7D5             B.N      ??LCD_wave_display_0
    509              }
    510          }
   \                     ??LCD_wave_display_1: (+1)
   \   00000082   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ascii_8x16

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0000 0x0000      DC16 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0000 0x0000      DC16 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x44 0x3A          DC8 44H, 3AH, 5CH, 53H, 74H, 75H, 64H, 79H
   \              0x5C 0x53    
   \              0x74 0x75    
   \              0x64 0x79    
   \   00000008   0x5C 0x32          DC8 5CH, 32H, 30H, 31H, 36H, 0B5H, 0E7H, 0D7H
   \              0x30 0x31    
   \              0x36 0xB5    
   \              0xE7 0xD7    
   \   00000010   0xD3 0xC9          DC8 0D3H, 0C9H, 0E8H, 0BCH, 0C6H, 0B4H, 0F3H, 0C8H
   \              0xE8 0xBC    
   \              0xC6 0xB4    
   \              0xF3 0xC8    
   \   00000018   0xFC 0x5C          DC8 0FCH, 5CH, 54H, 69H, 5CH, 0B5H, 0E7H, 0C8H
   \              0x54 0x69    
   \              0x5C 0xB5    
   \              0xE7 0xC8    
   \   00000020   0xFC 0xB1          DC8 0FCH, 0B1H, 0B8H, 0D3H, 0C3H, 0B5H, 0D7H, 0B2H
   \              0xB8 0xD3    
   \              0xC3 0xB5    
   \              0xD7 0xB2    
   \   00000028   0xE3 0x5C          DC8 0E3H, 5CH, 42H, 6FH, 61H, 72H, 64H, 5CH
   \              0x42 0x6F    
   \              0x61 0x72    
   \              0x64 0x5C    
   \   00000030   0x73 0x72          DC8 73H, 72H, 63H, 5CH, 56H, 43H, 41H, 4EH
   \              0x63 0x5C    
   \              0x56 0x43    
   \              0x41 0x4E    
   \   00000038   0x5F 0x4C          DC8 5FH, 4CH, 43H, 44H, 2EH, 63H, 0
   \              0x43 0x44    
   \              0x2E 0x63    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0001 0x0001      DC16 1, 1

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0008 0x0010      DC16 8, 16

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   LCD_Img_Binary
        32   -> LCD_ILI9341_ptlon
      48   LCD_Img_Binary_Z
        48   -> LCD_ILI9341_ptlon
      32   LCD_Img_gray
        32   -> LCD_ILI9341_ptlon
      56   LCD_Img_gray_Z
        56   -> LCD_ILI9341_ptlon
      40   LCD_char
        40   -> ILI9341_get_h
        40   -> ILI9341_get_w
        40   -> LCD_ILI9341_ptlon
      16   LCD_clear
        16   -> ILI9341_get_h
        16   -> ILI9341_get_w
        16   -> LCD_rectangle
      40   LCD_cross
        40   -> ILI9341_get_h
        40   -> ILI9341_get_w
        40   -> LCD_rectangle
        40   -> assert_failed
      16   LCD_init
        16   -> ILI9341_get_h
        16   -> ILI9341_get_w
        16   -> LCD_ILI9341_init
        16   -> LCD_rectangle
      32   LCD_num
        32   -> LCD_char
      40   LCD_num_BC
        40   -> LCD_char
        40   -> LCD_rectangle
      16   LCD_point
        16   -> LCD_ILI9341_ptlon
      24   LCD_points
        24   -> LCD_point
      24   LCD_rectangle
        24   -> LCD_ILI9341_ptlon
      24   LCD_str
        24   -> ILI9341_get_h
        24   -> ILI9341_get_w
        24   -> LCD_char
      40   LCD_wave
        40   -> LCD_point
        40   -> LCD_rectangle
      32   LCD_wave_display
        32   -> LCD_point


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ?_0
       4  ?_1
      64  ?_2
       4  ?_3
       4  ?_4
     116  LCD_Img_Binary
     174  LCD_Img_Binary_Z
      98  LCD_Img_gray
     186  LCD_Img_gray_Z
     148  LCD_char
      38  LCD_clear
     250  LCD_cross
      42  LCD_init
     136  LCD_num
     254  LCD_num_BC
      34  LCD_point
      38  LCD_points
      54  LCD_rectangle
     104  LCD_str
     160  LCD_wave
     134  LCD_wave_display

 
    80 bytes in section .rodata
 1 990 bytes in section .text
 
 1 990 bytes of CODE  memory
    80 bytes of CONST memory

Errors: none
Warnings: none
