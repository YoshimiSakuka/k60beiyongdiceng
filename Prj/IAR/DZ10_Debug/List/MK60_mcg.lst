###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        27/Jul/2016  11:28:29
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_mcg.c
#    Command line =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_mcg.c -D DEBUG
#        -D ARM_MATH_CM4 -D MK60DZ10 -lCN
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -lB
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\ -o
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=None --dlib_config "E:\IAR for
#        ARM\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\App\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\IAR\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Chip\inc\kinetis\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\CMSIS\Inc\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\FatFs\
#        -I D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Lib\USB\ -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\MPU6050\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\IMU\
#        -I
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\..\..\Board\Accessories\Driver\
#        -On
#    List file    =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\List\MK60_mcg.lst
#    Object file  =  
#        D:\Study\2016电子设计大赛\Ti\电赛备用底层\Prj\IAR\DZ10_Debug\Obj\MK60_mcg.o
#
###############################################################################

D:\Study\2016电子设计大赛\Ti\电赛备用底层\Chip\src\MK60_mcg.c
      1          /*!
      2           *     COPYRIGHT NOTICE
      3           *     Copyright (c) 2013,山外科技
      4           *     All rights reserved.
      5           *     技术讨论：山外论坛 http://www.vcan123.com
      6           *
      7           *     除注明出处外，以下所有内容版权均属山外科技所有，未经允许，不得用于商业用途，
      8           *     修改内容时必须保留山外科技的版权声明。
      9           *
     10           * @file       MK60_mcg.c
     11           * @brief      MCG PLL驱动
     12           * @author     山外科技
     13           * @version    v5.0
     14           * @date       2013-06-29
     15           */
     16          
     17          
     18          #include "common.h"
     19          #include "MK60_mcg.h"
     20          #include "MK60_lptmr.h"
     21          
     22          #if defined(MK60DZ10)

   \                                 In section .data, align 4
     23          mcg_cfg_t mcg_cfg[PLL_MAX] =
   \                     mcg_cfg:
   \   00000000   0x00F0             DC16 240
   \   00000002   0x0A 0x1D          DC8 10, 29
   \   00000004   0x0030             DC16 48
   \   00000006   0x18 0x00          DC8 24, 0
   \   00000008   0x0032             DC16 50
   \   0000000A   0x18 0x01          DC8 24, 1
   \   0000000C   0x0060             DC16 96
   \   0000000E   0x18 0x18          DC8 24, 24
   \   00000010   0x0064             DC16 100
   \   00000012   0x18 0x1A          DC8 24, 26
   \   00000014   0x006E             DC16 110
   \   00000016   0x18 0x1F          DC8 24, 31
   \   00000018   0x0078             DC16 120
   \   0000001A   0x13 0x18          DC8 19, 24
   \   0000001C   0x007D             DC16 125
   \   0000001E   0x13 0x1A          DC8 19, 26
   \   00000020   0x0082             DC16 130
   \   00000022   0x13 0x1C          DC8 19, 28
   \   00000024   0x008C             DC16 140
   \   00000026   0x0E 0x12          DC8 14, 18
   \   00000028   0x0096             DC16 150
   \   0000002A   0x0E 0x15          DC8 14, 21
   \   0000002C   0x00A0             DC16 160
   \   0000002E   0x0E 0x18          DC8 14, 24
   \   00000030   0x00AA             DC16 170
   \   00000032   0x0E 0x1B          DC8 14, 27
   \   00000034   0x00B4             DC16 180
   \   00000036   0x0E 0x1E          DC8 14, 30
   \   00000038   0x00C8             DC16 200
   \   0000003A   0x0C 0x1C          DC8 12, 28
   \   0000003C   0x00E1             DC16 225
   \   0000003E   0x0B 0x1E          DC8 11, 30
   \   00000040   0x00FA             DC16 250
   \   00000042   0x0A 0x1F          DC8 10, 31
     24          {
     25              {EXTAL_IN_MHz*(VDIV + 24) / (PRDIV + 1), PRDIV, VDIV}, //PLLUSR
     26              {48,    24,     0       },                          //PLL48
     27              {50,    24,     1       },                          //PLL50
     28              {96,    24,     24      },                          //PLL96
     29              {100,   24,     26      },                          //PLL100
     30              {110,   24,     31      },                          //PLL110
     31              {120,   19,     24      },                          //PLL120
     32              {125,   19,     26      },                          //PLL125
     33              {130,   19,     28      },                          //PLL130
     34              {140,   14,     18      },                          //PLL140
     35              {150,   14,     21      },                          //PLL150
     36              {160,   14,     24      },                          //PLL160
     37              {170,   14,     27      },                          //PLL170
     38              {180,   14,     30      },                          //PLL180
     39              {200,   12,     28      },                          //PLL200
     40              {225,   11,     30      },                          //PLL225
     41              {250,   10,     31      },                          //PLL250
     42          };
     43          
     44          #elif defined(MK60F15)
     45          
     46          mcg_cfg_t mcg_cfg[PLL_MAX] =
     47          {
     48              {EXTAL_IN_MHz*(VDIV + 16) / (PRDIV + 1) /2, PRDIV, VDIV}, //PLLUSR
     49              {50,    7 ,     1       },                          //PLL50
     50              {100,   7,      16      },                          //PLL100
     51              {110,   4 ,     6       },                          //PLL110
     52              {120,   4 ,     8       },                          //PLL120
     53              {130,   4 ,     10      },                          //PLL130
     54              {140,   4 ,     12      },                          //PLL140
     55              {150,   4 ,     14      },                          //PLL150
     56              {160,   4 ,     16      },                          //PLL160
     57              {170,   4 ,     18      },                          //PLL170
     58              {180,   4 ,     20      },                          //PLL180
     59              {190,   4 ,     22      },                          //PLL190
     60              {200,   4 ,     24      },                          //PLL200
     61              {210,   4 ,     26      },                          //PLL210
     62              {220,   4 ,     28      },                          //PLL220
     63              {225,   4 ,     29      },                          //PLL225
     64              {230,   4 ,     30      },                          //PLL230
     65              {235,   4 ,     31      },                          //PLL235
     66              {244,   3 ,     23      },                          //PLL244
     67              {250,   3 ,     24      },                          //PLL250
     68              {275,   1 ,     6       },                          //PLL275
     69              {300,   2 ,     20      },                          //PLL300
     70          };
     71          #endif

   \                                 In section .data, align 4
     72          mcg_div_t mcg_div = {CORE_DIV, BUS_DIV, FLEX_DIV, FLASH_DIV};
   \                     mcg_div:
   \   00000000   0x00 0x01          DC8 0, 1, 9, 8
   \              0x09 0x08    
     73          
     74          
     75          /*!
     76           *  @brief      MCG 分频配置
     77           *  @param      PLL_e       频率设置参数
     78           *  @since      v5.0
     79           */

   \                                 In section .text, align 2, keep-with-next
     80          void mcg_div_count(PLL_e pll)
     81          {
     82              uint16 clk = mcg_cfg[pll].clk;
   \                     mcg_div_count: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable1
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0xF831 0x1020      LDRH     R1,[R1, R0, LSL #+2]
     83              if( (pll > PLLUSR) && (pll < PLL_MAX) )
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF000 0x816D      BEQ.W    ??mcg_div_count_0
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x2811             CMP      R0,#+17
   \   00000016   0xF280 0x8169      BGE.W    ??mcg_div_count_0
     84              {
     85                  //设置分频
     86                  mcg_div.core_div    = 0;                                        // core = MCG
   \   0000001A   0x2200             MOVS     R2,#+0
   \   0000001C   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   00000020   0x701A             STRB     R2,[R3, #+0]
     87          
     88                  if     (clk <= 1 * MAX_BUS_CLK)   mcg_div.bus_div = 0;          // bus  = MCG
   \   00000022   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000024   0x2933             CMP      R1,#+51
   \   00000026   0xDA04             BGE.N    ??mcg_div_count_1
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   0000002E   0x705A             STRB     R2,[R3, #+1]
   \   00000030   0xE07A             B.N      ??mcg_div_count_2
     89                  else if(clk <= 2 * MAX_BUS_CLK)   mcg_div.bus_div = 1;          // bus  = MCG/2
   \                     ??mcg_div_count_1: (+1)
   \   00000032   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000034   0x2965             CMP      R1,#+101
   \   00000036   0xDA04             BGE.N    ??mcg_div_count_3
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   0000003E   0x705A             STRB     R2,[R3, #+1]
   \   00000040   0xE072             B.N      ??mcg_div_count_2
     90                  else if(clk <= 3 * MAX_BUS_CLK)   mcg_div.bus_div = 2;          // bus  = MCG/3
   \                     ??mcg_div_count_3: (+1)
   \   00000042   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000044   0x2997             CMP      R1,#+151
   \   00000046   0xDA04             BGE.N    ??mcg_div_count_4
   \   00000048   0x2202             MOVS     R2,#+2
   \   0000004A   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   0000004E   0x705A             STRB     R2,[R3, #+1]
   \   00000050   0xE06A             B.N      ??mcg_div_count_2
     91                  else if(clk <= 4 * MAX_BUS_CLK)   mcg_div.bus_div = 3;          // bus  = MCG/4
   \                     ??mcg_div_count_4: (+1)
   \   00000052   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000054   0x29C9             CMP      R1,#+201
   \   00000056   0xDA04             BGE.N    ??mcg_div_count_5
   \   00000058   0x2203             MOVS     R2,#+3
   \   0000005A   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   0000005E   0x705A             STRB     R2,[R3, #+1]
   \   00000060   0xE062             B.N      ??mcg_div_count_2
     92                  else if(clk <= 5 * MAX_BUS_CLK)   mcg_div.bus_div = 4;          // bus  = MCG/5
   \                     ??mcg_div_count_5: (+1)
   \   00000062   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000064   0x29FB             CMP      R1,#+251
   \   00000066   0xDA04             BGE.N    ??mcg_div_count_6
   \   00000068   0x2204             MOVS     R2,#+4
   \   0000006A   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   0000006E   0x705A             STRB     R2,[R3, #+1]
   \   00000070   0xE05A             B.N      ??mcg_div_count_2
     93                  else if(clk <= 6 * MAX_BUS_CLK)   mcg_div.bus_div = 5;          // bus  = MCG/6
   \                     ??mcg_div_count_6: (+1)
   \   00000072   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000074   0xF5B1 0x7F96      CMP      R1,#+300
   \   00000078   0xDC04             BGT.N    ??mcg_div_count_7
   \   0000007A   0x2205             MOVS     R2,#+5
   \   0000007C   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   00000080   0x705A             STRB     R2,[R3, #+1]
   \   00000082   0xE051             B.N      ??mcg_div_count_2
     94                  else if(clk <= 7 * MAX_BUS_CLK)   mcg_div.bus_div = 6;          // bus  = MCG/7
   \                     ??mcg_div_count_7: (+1)
   \   00000084   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000086   0xF5B1 0x7FAF      CMP      R1,#+350
   \   0000008A   0xDC04             BGT.N    ??mcg_div_count_8
   \   0000008C   0x2206             MOVS     R2,#+6
   \   0000008E   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   00000092   0x705A             STRB     R2,[R3, #+1]
   \   00000094   0xE048             B.N      ??mcg_div_count_2
     95                  else if(clk <= 8 * MAX_BUS_CLK)   mcg_div.bus_div = 7;          // bus  = MCG/8
   \                     ??mcg_div_count_8: (+1)
   \   00000096   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000098   0xF5B1 0x7FC8      CMP      R1,#+400
   \   0000009C   0xDC04             BGT.N    ??mcg_div_count_9
   \   0000009E   0x2207             MOVS     R2,#+7
   \   000000A0   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   000000A4   0x705A             STRB     R2,[R3, #+1]
   \   000000A6   0xE03F             B.N      ??mcg_div_count_2
     96                  else if(clk <= 9 * MAX_BUS_CLK)   mcg_div.bus_div = 8;          // bus  = MCG/9
   \                     ??mcg_div_count_9: (+1)
   \   000000A8   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000AA   0xF5B1 0x7FE1      CMP      R1,#+450
   \   000000AE   0xDC04             BGT.N    ??mcg_div_count_10
   \   000000B0   0x2208             MOVS     R2,#+8
   \   000000B2   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   000000B6   0x705A             STRB     R2,[R3, #+1]
   \   000000B8   0xE036             B.N      ??mcg_div_count_2
     97                  else if(clk <= 10 * MAX_BUS_CLK)   mcg_div.bus_div = 9;         // bus  = MCG/10
   \                     ??mcg_div_count_10: (+1)
   \   000000BA   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000BC   0xF5B1 0x7FFA      CMP      R1,#+500
   \   000000C0   0xDC04             BGT.N    ??mcg_div_count_11
   \   000000C2   0x2209             MOVS     R2,#+9
   \   000000C4   0x.... 0x....      LDR.W    R3,??DataTable1_1
   \   000000C8   0x705A             STRB     R2,[R3, #+1]
   \   000000CA   0xE02D             B.N      ??mcg_div_count_2
     98                  else if(clk <= 11 * MAX_BUS_CLK)   mcg_div.bus_div = 10;        // bus  = MCG/11
   \                     ??mcg_div_count_11: (+1)
   \   000000CC   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000CE   0xF240 0x2227      MOVW     R2,#+551
   \   000000D2   0x4291             CMP      R1,R2
   \   000000D4   0xDA03             BGE.N    ??mcg_div_count_12
   \   000000D6   0x220A             MOVS     R2,#+10
   \   000000D8   0x....             LDR.N    R3,??DataTable1_1
   \   000000DA   0x705A             STRB     R2,[R3, #+1]
   \   000000DC   0xE024             B.N      ??mcg_div_count_2
     99                  else if(clk <= 12 * MAX_BUS_CLK)   mcg_div.bus_div = 11;        // bus  = MCG/12
   \                     ??mcg_div_count_12: (+1)
   \   000000DE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000E0   0xF5B1 0x7F16      CMP      R1,#+600
   \   000000E4   0xDC03             BGT.N    ??mcg_div_count_13
   \   000000E6   0x220B             MOVS     R2,#+11
   \   000000E8   0x....             LDR.N    R3,??DataTable1_1
   \   000000EA   0x705A             STRB     R2,[R3, #+1]
   \   000000EC   0xE01C             B.N      ??mcg_div_count_2
    100                  else if(clk <= 13 * MAX_BUS_CLK)   mcg_div.bus_div = 12;        // bus  = MCG/13
   \                     ??mcg_div_count_13: (+1)
   \   000000EE   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000000F0   0xF240 0x228B      MOVW     R2,#+651
   \   000000F4   0x4291             CMP      R1,R2
   \   000000F6   0xDA03             BGE.N    ??mcg_div_count_14
   \   000000F8   0x220C             MOVS     R2,#+12
   \   000000FA   0x....             LDR.N    R3,??DataTable1_1
   \   000000FC   0x705A             STRB     R2,[R3, #+1]
   \   000000FE   0xE013             B.N      ??mcg_div_count_2
    101                  else if(clk <= 14 * MAX_BUS_CLK)   mcg_div.bus_div = 13;        // bus  = MCG/14
   \                     ??mcg_div_count_14: (+1)
   \   00000100   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000102   0xF5B1 0x7F2F      CMP      R1,#+700
   \   00000106   0xDC03             BGT.N    ??mcg_div_count_15
   \   00000108   0x220D             MOVS     R2,#+13
   \   0000010A   0x....             LDR.N    R3,??DataTable1_1
   \   0000010C   0x705A             STRB     R2,[R3, #+1]
   \   0000010E   0xE00B             B.N      ??mcg_div_count_2
    102                  else if(clk <= 15 * MAX_BUS_CLK)   mcg_div.bus_div = 14;        // bus  = MCG/15
   \                     ??mcg_div_count_15: (+1)
   \   00000110   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000112   0xF240 0x22EF      MOVW     R2,#+751
   \   00000116   0x4291             CMP      R1,R2
   \   00000118   0xDA03             BGE.N    ??mcg_div_count_16
   \   0000011A   0x220E             MOVS     R2,#+14
   \   0000011C   0x....             LDR.N    R3,??DataTable1_1
   \   0000011E   0x705A             STRB     R2,[R3, #+1]
   \   00000120   0xE002             B.N      ??mcg_div_count_2
    103                  else                              mcg_div.bus_div = 15;         // bus  = MCG/16
   \                     ??mcg_div_count_16: (+1)
   \   00000122   0x220F             MOVS     R2,#+15
   \   00000124   0x....             LDR.N    R3,??DataTable1_1
   \   00000126   0x705A             STRB     R2,[R3, #+1]
    104          
    105                  if     (clk <= 1 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 0;     // flex bus  = MCG
   \                     ??mcg_div_count_2: (+1)
   \   00000128   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000012A   0x291A             CMP      R1,#+26
   \   0000012C   0xDA03             BGE.N    ??mcg_div_count_17
   \   0000012E   0x2200             MOVS     R2,#+0
   \   00000130   0x....             LDR.N    R3,??DataTable1_1
   \   00000132   0x709A             STRB     R2,[R3, #+2]
   \   00000134   0xE069             B.N      ??mcg_div_count_18
    106                  else if(clk <= 2 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 1;     // flex bus  = MCG/2
   \                     ??mcg_div_count_17: (+1)
   \   00000136   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000138   0x2933             CMP      R1,#+51
   \   0000013A   0xDA03             BGE.N    ??mcg_div_count_19
   \   0000013C   0x2201             MOVS     R2,#+1
   \   0000013E   0x....             LDR.N    R3,??DataTable1_1
   \   00000140   0x709A             STRB     R2,[R3, #+2]
   \   00000142   0xE062             B.N      ??mcg_div_count_18
    107                  else if(clk <= 3 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 2;     // flex bus  = MCG/3
   \                     ??mcg_div_count_19: (+1)
   \   00000144   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000146   0x294C             CMP      R1,#+76
   \   00000148   0xDA03             BGE.N    ??mcg_div_count_20
   \   0000014A   0x2202             MOVS     R2,#+2
   \   0000014C   0x....             LDR.N    R3,??DataTable1_1
   \   0000014E   0x709A             STRB     R2,[R3, #+2]
   \   00000150   0xE05B             B.N      ??mcg_div_count_18
    108                  else if(clk <= 4 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 3;     // flex bus  = MCG/4
   \                     ??mcg_div_count_20: (+1)
   \   00000152   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000154   0x2965             CMP      R1,#+101
   \   00000156   0xDA03             BGE.N    ??mcg_div_count_21
   \   00000158   0x2203             MOVS     R2,#+3
   \   0000015A   0x....             LDR.N    R3,??DataTable1_1
   \   0000015C   0x709A             STRB     R2,[R3, #+2]
   \   0000015E   0xE054             B.N      ??mcg_div_count_18
    109                  else if(clk <= 5 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 4;     // flex bus  = MCG/5
   \                     ??mcg_div_count_21: (+1)
   \   00000160   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000162   0x297E             CMP      R1,#+126
   \   00000164   0xDA03             BGE.N    ??mcg_div_count_22
   \   00000166   0x2204             MOVS     R2,#+4
   \   00000168   0x....             LDR.N    R3,??DataTable1_1
   \   0000016A   0x709A             STRB     R2,[R3, #+2]
   \   0000016C   0xE04D             B.N      ??mcg_div_count_18
    110                  else if(clk <= 6 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 5;     // flex bus  = MCG/6
   \                     ??mcg_div_count_22: (+1)
   \   0000016E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000170   0x2997             CMP      R1,#+151
   \   00000172   0xDA03             BGE.N    ??mcg_div_count_23
   \   00000174   0x2205             MOVS     R2,#+5
   \   00000176   0x....             LDR.N    R3,??DataTable1_1
   \   00000178   0x709A             STRB     R2,[R3, #+2]
   \   0000017A   0xE046             B.N      ??mcg_div_count_18
    111                  else if(clk <= 7 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 6;     // flex bus  = MCG/7
   \                     ??mcg_div_count_23: (+1)
   \   0000017C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000017E   0x29B0             CMP      R1,#+176
   \   00000180   0xDA03             BGE.N    ??mcg_div_count_24
   \   00000182   0x2206             MOVS     R2,#+6
   \   00000184   0x....             LDR.N    R3,??DataTable1_1
   \   00000186   0x709A             STRB     R2,[R3, #+2]
   \   00000188   0xE03F             B.N      ??mcg_div_count_18
    112                  else if(clk <= 8 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 7;     // flex bus  = MCG/8
   \                     ??mcg_div_count_24: (+1)
   \   0000018A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000018C   0x29C9             CMP      R1,#+201
   \   0000018E   0xDA03             BGE.N    ??mcg_div_count_25
   \   00000190   0x2207             MOVS     R2,#+7
   \   00000192   0x....             LDR.N    R3,??DataTable1_1
   \   00000194   0x709A             STRB     R2,[R3, #+2]
   \   00000196   0xE038             B.N      ??mcg_div_count_18
    113                  else if(clk <= 9 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 8;     // flex bus  = MCG/9
   \                     ??mcg_div_count_25: (+1)
   \   00000198   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000019A   0x29E2             CMP      R1,#+226
   \   0000019C   0xDA03             BGE.N    ??mcg_div_count_26
   \   0000019E   0x2208             MOVS     R2,#+8
   \   000001A0   0x....             LDR.N    R3,??DataTable1_1
   \   000001A2   0x709A             STRB     R2,[R3, #+2]
   \   000001A4   0xE031             B.N      ??mcg_div_count_18
    114                  else if(clk <= 10 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 9;    // flex bus  = MCG/10
   \                     ??mcg_div_count_26: (+1)
   \   000001A6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001A8   0x29FB             CMP      R1,#+251
   \   000001AA   0xDA03             BGE.N    ??mcg_div_count_27
   \   000001AC   0x2209             MOVS     R2,#+9
   \   000001AE   0x....             LDR.N    R3,??DataTable1_1
   \   000001B0   0x709A             STRB     R2,[R3, #+2]
   \   000001B2   0xE02A             B.N      ??mcg_div_count_18
    115                  else if(clk <= 11 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 10;   // flex bus  = MCG/11
   \                     ??mcg_div_count_27: (+1)
   \   000001B4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001B6   0xF5B1 0x7F8A      CMP      R1,#+276
   \   000001BA   0xDA03             BGE.N    ??mcg_div_count_28
   \   000001BC   0x220A             MOVS     R2,#+10
   \   000001BE   0x....             LDR.N    R3,??DataTable1_1
   \   000001C0   0x709A             STRB     R2,[R3, #+2]
   \   000001C2   0xE022             B.N      ??mcg_div_count_18
    116                  else if(clk <= 12 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 11;   // flex bus  = MCG/12
   \                     ??mcg_div_count_28: (+1)
   \   000001C4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001C6   0xF5B1 0x7F96      CMP      R1,#+300
   \   000001CA   0xDC03             BGT.N    ??mcg_div_count_29
   \   000001CC   0x220B             MOVS     R2,#+11
   \   000001CE   0x....             LDR.N    R3,??DataTable1_1
   \   000001D0   0x709A             STRB     R2,[R3, #+2]
   \   000001D2   0xE01A             B.N      ??mcg_div_count_18
    117                  else if(clk <= 13 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 12;   // flex bus  = MCG/13
   \                     ??mcg_div_count_29: (+1)
   \   000001D4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001D6   0xF5B1 0x7FA3      CMP      R1,#+326
   \   000001DA   0xDA03             BGE.N    ??mcg_div_count_30
   \   000001DC   0x220C             MOVS     R2,#+12
   \   000001DE   0x....             LDR.N    R3,??DataTable1_1
   \   000001E0   0x709A             STRB     R2,[R3, #+2]
   \   000001E2   0xE012             B.N      ??mcg_div_count_18
    118                  else if(clk <= 14 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 13;   // flex bus  = MCG/14
   \                     ??mcg_div_count_30: (+1)
   \   000001E4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001E6   0xF5B1 0x7FAF      CMP      R1,#+350
   \   000001EA   0xDC03             BGT.N    ??mcg_div_count_31
   \   000001EC   0x220D             MOVS     R2,#+13
   \   000001EE   0x....             LDR.N    R3,??DataTable1_1
   \   000001F0   0x709A             STRB     R2,[R3, #+2]
   \   000001F2   0xE00A             B.N      ??mcg_div_count_18
    119                  else if(clk <= 15 * MAX_FLEXBUS_CLK)   mcg_div.flex_div = 14;   // flex bus  = MCG/15
   \                     ??mcg_div_count_31: (+1)
   \   000001F4   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000001F6   0xF5B1 0x7FBC      CMP      R1,#+376
   \   000001FA   0xDA03             BGE.N    ??mcg_div_count_32
   \   000001FC   0x220E             MOVS     R2,#+14
   \   000001FE   0x....             LDR.N    R3,??DataTable1_1
   \   00000200   0x709A             STRB     R2,[R3, #+2]
   \   00000202   0xE002             B.N      ??mcg_div_count_18
    120                  else                                  mcg_div.flex_div = 15;    // flex bus  = MCG/16
   \                     ??mcg_div_count_32: (+1)
   \   00000204   0x220F             MOVS     R2,#+15
   \   00000206   0x....             LDR.N    R3,??DataTable1_1
   \   00000208   0x709A             STRB     R2,[R3, #+2]
    121          
    122                  if     (clk <= 1 * MAX_FLASH_CLK)   mcg_div.flash_div = 0;      // flash  = MCG
   \                     ??mcg_div_count_18: (+1)
   \   0000020A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000020C   0x291A             CMP      R1,#+26
   \   0000020E   0xDA03             BGE.N    ??mcg_div_count_33
   \   00000210   0x2200             MOVS     R2,#+0
   \   00000212   0x....             LDR.N    R3,??DataTable1_1
   \   00000214   0x70DA             STRB     R2,[R3, #+3]
   \   00000216   0xE069             B.N      ??mcg_div_count_0
    123                  else if(clk <= 2 * MAX_FLASH_CLK)   mcg_div.flash_div = 1;      // flash  = MCG/2
   \                     ??mcg_div_count_33: (+1)
   \   00000218   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000021A   0x2933             CMP      R1,#+51
   \   0000021C   0xDA03             BGE.N    ??mcg_div_count_34
   \   0000021E   0x2201             MOVS     R2,#+1
   \   00000220   0x....             LDR.N    R3,??DataTable1_1
   \   00000222   0x70DA             STRB     R2,[R3, #+3]
   \   00000224   0xE062             B.N      ??mcg_div_count_0
    124                  else if(clk <= 3 * MAX_FLASH_CLK)   mcg_div.flash_div = 2;      // flash  = MCG/3
   \                     ??mcg_div_count_34: (+1)
   \   00000226   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000228   0x294C             CMP      R1,#+76
   \   0000022A   0xDA03             BGE.N    ??mcg_div_count_35
   \   0000022C   0x2202             MOVS     R2,#+2
   \   0000022E   0x....             LDR.N    R3,??DataTable1_1
   \   00000230   0x70DA             STRB     R2,[R3, #+3]
   \   00000232   0xE05B             B.N      ??mcg_div_count_0
    125                  else if(clk <= 4 * MAX_FLASH_CLK)   mcg_div.flash_div = 3;      // flash  = MCG/4
   \                     ??mcg_div_count_35: (+1)
   \   00000234   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000236   0x2965             CMP      R1,#+101
   \   00000238   0xDA03             BGE.N    ??mcg_div_count_36
   \   0000023A   0x2203             MOVS     R2,#+3
   \   0000023C   0x....             LDR.N    R3,??DataTable1_1
   \   0000023E   0x70DA             STRB     R2,[R3, #+3]
   \   00000240   0xE054             B.N      ??mcg_div_count_0
    126                  else if(clk <= 5 * MAX_FLASH_CLK)   mcg_div.flash_div = 4;      // flash  = MCG/5
   \                     ??mcg_div_count_36: (+1)
   \   00000242   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000244   0x297E             CMP      R1,#+126
   \   00000246   0xDA03             BGE.N    ??mcg_div_count_37
   \   00000248   0x2204             MOVS     R2,#+4
   \   0000024A   0x....             LDR.N    R3,??DataTable1_1
   \   0000024C   0x70DA             STRB     R2,[R3, #+3]
   \   0000024E   0xE04D             B.N      ??mcg_div_count_0
    127                  else if(clk <= 6 * MAX_FLASH_CLK)   mcg_div.flash_div = 5;      // flash  = MCG/6
   \                     ??mcg_div_count_37: (+1)
   \   00000250   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000252   0x2997             CMP      R1,#+151
   \   00000254   0xDA03             BGE.N    ??mcg_div_count_38
   \   00000256   0x2205             MOVS     R2,#+5
   \   00000258   0x....             LDR.N    R3,??DataTable1_1
   \   0000025A   0x70DA             STRB     R2,[R3, #+3]
   \   0000025C   0xE046             B.N      ??mcg_div_count_0
    128                  else if(clk <= 7 * MAX_FLASH_CLK)   mcg_div.flash_div = 6;      // flash  = MCG/7
   \                     ??mcg_div_count_38: (+1)
   \   0000025E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000260   0x29B0             CMP      R1,#+176
   \   00000262   0xDA03             BGE.N    ??mcg_div_count_39
   \   00000264   0x2206             MOVS     R2,#+6
   \   00000266   0x....             LDR.N    R3,??DataTable1_1
   \   00000268   0x70DA             STRB     R2,[R3, #+3]
   \   0000026A   0xE03F             B.N      ??mcg_div_count_0
    129                  else if(clk <= 8 * MAX_FLASH_CLK)   mcg_div.flash_div = 7;      // flash  = MCG/8
   \                     ??mcg_div_count_39: (+1)
   \   0000026C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000026E   0x29C9             CMP      R1,#+201
   \   00000270   0xDA03             BGE.N    ??mcg_div_count_40
   \   00000272   0x2207             MOVS     R2,#+7
   \   00000274   0x....             LDR.N    R3,??DataTable1_1
   \   00000276   0x70DA             STRB     R2,[R3, #+3]
   \   00000278   0xE038             B.N      ??mcg_div_count_0
    130                  else if(clk <= 9 * MAX_FLASH_CLK)   mcg_div.flash_div = 8;      // flash  = MCG/9
   \                     ??mcg_div_count_40: (+1)
   \   0000027A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000027C   0x29E2             CMP      R1,#+226
   \   0000027E   0xDA03             BGE.N    ??mcg_div_count_41
   \   00000280   0x2208             MOVS     R2,#+8
   \   00000282   0x....             LDR.N    R3,??DataTable1_1
   \   00000284   0x70DA             STRB     R2,[R3, #+3]
   \   00000286   0xE031             B.N      ??mcg_div_count_0
    131                  else if(clk <= 10 * MAX_FLASH_CLK)   mcg_div.flash_div = 9;     // flash  = MCG/10
   \                     ??mcg_div_count_41: (+1)
   \   00000288   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000028A   0x29FB             CMP      R1,#+251
   \   0000028C   0xDA03             BGE.N    ??mcg_div_count_42
   \   0000028E   0x2209             MOVS     R2,#+9
   \   00000290   0x....             LDR.N    R3,??DataTable1_1
   \   00000292   0x70DA             STRB     R2,[R3, #+3]
   \   00000294   0xE02A             B.N      ??mcg_div_count_0
    132                  else if(clk <= 11 * MAX_FLASH_CLK)   mcg_div.flash_div = 10;    // flash  = MCG/11
   \                     ??mcg_div_count_42: (+1)
   \   00000296   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000298   0xF5B1 0x7F8A      CMP      R1,#+276
   \   0000029C   0xDA03             BGE.N    ??mcg_div_count_43
   \   0000029E   0x220A             MOVS     R2,#+10
   \   000002A0   0x....             LDR.N    R3,??DataTable1_1
   \   000002A2   0x70DA             STRB     R2,[R3, #+3]
   \   000002A4   0xE022             B.N      ??mcg_div_count_0
    133                  else if(clk <= 12 * MAX_FLASH_CLK)   mcg_div.flash_div = 11;    // flash  = MCG/12
   \                     ??mcg_div_count_43: (+1)
   \   000002A6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002A8   0xF5B1 0x7F96      CMP      R1,#+300
   \   000002AC   0xDC03             BGT.N    ??mcg_div_count_44
   \   000002AE   0x220B             MOVS     R2,#+11
   \   000002B0   0x....             LDR.N    R3,??DataTable1_1
   \   000002B2   0x70DA             STRB     R2,[R3, #+3]
   \   000002B4   0xE01A             B.N      ??mcg_div_count_0
    134                  else if(clk <= 13 * MAX_FLASH_CLK)   mcg_div.flash_div = 12;    // flash  = MCG/13
   \                     ??mcg_div_count_44: (+1)
   \   000002B6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002B8   0xF5B1 0x7FA3      CMP      R1,#+326
   \   000002BC   0xDA03             BGE.N    ??mcg_div_count_45
   \   000002BE   0x220C             MOVS     R2,#+12
   \   000002C0   0x....             LDR.N    R3,??DataTable1_1
   \   000002C2   0x70DA             STRB     R2,[R3, #+3]
   \   000002C4   0xE012             B.N      ??mcg_div_count_0
    135                  else if(clk <= 14 * MAX_FLASH_CLK)   mcg_div.flash_div = 13;    // flash  = MCG/14
   \                     ??mcg_div_count_45: (+1)
   \   000002C6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002C8   0xF5B1 0x7FAF      CMP      R1,#+350
   \   000002CC   0xDC03             BGT.N    ??mcg_div_count_46
   \   000002CE   0x220D             MOVS     R2,#+13
   \   000002D0   0x....             LDR.N    R3,??DataTable1_1
   \   000002D2   0x70DA             STRB     R2,[R3, #+3]
   \   000002D4   0xE00A             B.N      ??mcg_div_count_0
    136                  else if(clk <= 15 * MAX_FLASH_CLK)   mcg_div.flash_div = 14;    // flash  = MCG/15
   \                     ??mcg_div_count_46: (+1)
   \   000002D6   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002D8   0xF5B1 0x7FBC      CMP      R1,#+376
   \   000002DC   0xDA03             BGE.N    ??mcg_div_count_47
   \   000002DE   0x220E             MOVS     R2,#+14
   \   000002E0   0x....             LDR.N    R3,??DataTable1_1
   \   000002E2   0x70DA             STRB     R2,[R3, #+3]
   \   000002E4   0xE002             B.N      ??mcg_div_count_0
    137                  else                                mcg_div.flash_div = 15;     // flash  = MCG/16
   \                     ??mcg_div_count_47: (+1)
   \   000002E6   0x220F             MOVS     R2,#+15
   \   000002E8   0x....             LDR.N    R3,??DataTable1_1
   \   000002EA   0x70DA             STRB     R2,[R3, #+3]
    138              }
    139          }
   \                     ??mcg_div_count_0: (+1)
   \   000002EC   0x4770             BX       LR               ;; return
    140          
    141          /*!
    142           *  @brief      PLL超频
    143           *  @param      PLL_e       频率设置参数
    144           *  @return     超频频率（MHz）
    145           *  @since      v5.0
    146           *  @warning    此函数只能在 复位后没进行任何频率设置情况下调用，即MCG在FEI模式下才可调用
    147           *  Sample usage:       uint8 clk = pll_init(PLL100);        //超频
    148           */

   \                                 In section .text, align 2, keep-with-next
    149          uint8 pll_init(PLL_e pll)
    150          {
   \                     pll_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    151          
    152              mcg_div_count( pll);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x.... 0x....      BL       mcg_div_count
    153          
    154              //上电复位后，单片机会自动进入 FEI 模式，使用 内部参考时钟
    155          
    156              //FEI -> FBE
    157              MCG_C2 &= ~MCG_C2_LP_MASK;
   \   0000000C   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40064001
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xF010 0x00FD      ANDS     R0,R0,#0xFD
   \   00000014   0x....             LDR.N    R1,??DataTable1_2  ;; 0x40064001
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    158              MCG_C2 |= MCG_C2_RANGE(1);
   \   00000018   0x....             LDR.N    R0,??DataTable1_2  ;; 0x40064001
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0xF050 0x0010      ORRS     R0,R0,#0x10
   \   00000020   0x....             LDR.N    R1,??DataTable1_2  ;; 0x40064001
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    159          
    160              MCG_C1 = MCG_C1_CLKS(2) | MCG_C1_FRDIV(7);
   \   00000024   0x20B8             MOVS     R0,#+184
   \   00000026   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40064000
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    161          
    162              while (MCG_S & MCG_S_IREFST_MASK) {};                       //等待FLL参考时钟 为 外部参考时钟（S[IREFST]=0，表示使用外部参考时钟，）
   \                     ??pll_init_0: (+1)
   \   0000002A   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40064006
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x06C0             LSLS     R0,R0,#+27
   \   00000030   0xD4FB             BMI.N    ??pll_init_0
    163          
    164              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x2) {}; //等待选择外部参考时钟
   \                     ??pll_init_1: (+1)
   \   00000032   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40064006
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD1F8             BNE.N    ??pll_init_1
    165          
    166              //现在已经进入了 FBE模式
    167          
    168              //FBE -> PBE
    169              set_sys_dividers(mcg_div.core_div, mcg_div.bus_div, mcg_div.flex_div, mcg_div.flash_div); //设置系统分频因子选项
   \   00000040   0x....             LDR.N    R0,??DataTable1_1
   \   00000042   0x78C3             LDRB     R3,[R0, #+3]
   \   00000044   0x....             LDR.N    R0,??DataTable1_1
   \   00000046   0x7882             LDRB     R2,[R0, #+2]
   \   00000048   0x....             LDR.N    R0,??DataTable1_1
   \   0000004A   0x7841             LDRB     R1,[R0, #+1]
   \   0000004C   0x....             LDR.N    R0,??DataTable1_1
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x.... 0x....      BL       set_sys_dividers
    170          
    171              MCG_C5 = MCG_C5_PRDIV(mcg_cfg[pll].prdiv);                      //分频， EXTAL_IN_MHz/( PRDIV+1)
   \   00000054   0x....             LDR.N    R0,??DataTable1
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000005C   0x7880             LDRB     R0,[R0, #+2]
   \   0000005E   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000062   0x....             LDR.N    R1,??DataTable1_5  ;; 0x40064004
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    172              MCG_C6 = MCG_C6_PLLS_MASK | MCG_C6_VDIV(mcg_cfg[pll].vdiv) ;    //倍频， EXTAL_IN_MHz/( PRDIV+1)  * (VDIV+24)
   \   00000066   0x....             LDR.N    R0,??DataTable1
   \   00000068   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006A   0xEB10 0x0084      ADDS     R0,R0,R4, LSL #+2
   \   0000006E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000070   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   00000074   0xF050 0x0040      ORRS     R0,R0,#0x40
   \   00000078   0x....             LDR.N    R1,??DataTable1_6  ;; 0x40064005
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
    173          
    174              while (!(MCG_S & MCG_S_PLLST_MASK)) {};                         //等待时钟源选择PLL
   \                     ??pll_init_2: (+1)
   \   0000007C   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40064006
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x0680             LSLS     R0,R0,#+26
   \   00000082   0xD5FB             BPL.N    ??pll_init_2
    175          
    176              while (!(MCG_S & MCG_S_LOCK_MASK)) {};                          //等待 PLL锁了（锁相环）
   \                     ??pll_init_3: (+1)
   \   00000084   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40064006
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x0640             LSLS     R0,R0,#+25
   \   0000008A   0xD5FB             BPL.N    ??pll_init_3
    177          
    178              // 现在已经进入了 PBE 模式
    179          
    180              // PBE -> PEE
    181              MCG_C1 &= ~MCG_C1_CLKS_MASK;
   \   0000008C   0x....             LDR.N    R0,??DataTable1_3  ;; 0x40064000
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \   00000094   0x....             LDR.N    R1,??DataTable1_3  ;; 0x40064000
   \   00000096   0x7008             STRB     R0,[R1, #+0]
    182          
    183              while (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) != 0x3) {};//等待选择输出PLL
   \                     ??pll_init_4: (+1)
   \   00000098   0x....             LDR.N    R0,??DataTable1_4  ;; 0x40064006
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0xF3C0 0x0081      UBFX     R0,R0,#+2,#+2
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x2803             CMP      R0,#+3
   \   000000A4   0xD1F8             BNE.N    ??pll_init_4
    184          
    185              // 现在已经进入了 PEE 模式
    186          
    187              return mcg_cfg[pll].clk;
   \   000000A6   0x....             LDR.N    R0,??DataTable1
   \   000000A8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AA   0xF830 0x0024      LDRH     R0,[R0, R4, LSL #+2]
   \   000000AE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B0   0xBD10             POP      {R4,PC}          ;; return
    188          } //pll_init
    189          
    190          
    191          /*!
    192           *  @brief      时钟分频设置函数
    193           *  @param      outdiv1    内核分频系数，       core    clk = MCG / (outdiv1 +1)
    194           *  @param      outdiv2    bus分频系数，        bus     clk = MCG / (outdiv2 +1)
    195           *  @param      outdiv3    flexbus分频系数，    flexbus clk = MCG / (outdiv3 +1)
    196           *  @param      outdiv4    flash分频系数，      flash   clk = MCG / (outdiv4 +1)
    197           *  @since      v1.0
    198           *  @author     飞思卡尔公司
    199           *  Sample usage:       set_sys_dividers(0,1, 9,3);     // core clk = MCG ; bus clk = MCG / 2 ; flexbus clk = MCG /10 ; flash clk = MCG / 4;
    200           */

   \                                 In section .textrw, align 4, keep-with-next
    201          __RAMFUNC  void set_sys_dividers(uint32 outdiv1, uint32 outdiv2, uint32 outdiv3, uint32 outdiv4)
    202          {
   \                     set_sys_dividers: (+1)
   \   00000000   0xB4F0             PUSH     {R4-R7}
    203              /*
    204              * This routine must be placed in RAM. It is a workaround for errata e2448.
    205              * Flash prefetch must be disabled when the flash clock divider is changed.
    206              * This cannot be performed while executing out of flash.
    207              * There must be a short delay after the clock dividers are changed before prefetch
    208              * can be re-enabled.
    209              */
    210              uint32 temp_reg;
    211              uint8 i;
    212          
    213              temp_reg = FMC_PFAPR; // store present value of FMC_PFAPR
   \   00000002   0x4E11             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   00000004   0x6836             LDR      R6,[R6, #+0]
   \   00000006   0x0034             MOVS     R4,R6
    214          
    215              // set M0PFD through M7PFD to 1 to disable prefetch
    216              FMC_PFAPR |= FMC_PFAPR_M7PFD_MASK | FMC_PFAPR_M6PFD_MASK | FMC_PFAPR_M5PFD_MASK
    217                           | FMC_PFAPR_M4PFD_MASK | FMC_PFAPR_M3PFD_MASK | FMC_PFAPR_M2PFD_MASK
    218                           | FMC_PFAPR_M1PFD_MASK | FMC_PFAPR_M0PFD_MASK;
   \   00000008   0x4E0F             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   0000000A   0x6836             LDR      R6,[R6, #+0]
   \   0000000C   0xF456 0x067F      ORRS     R6,R6,#0xFF0000
   \   00000010   0x4F0D             LDR.N    R7,??set_sys_dividers_0  ;; 0x4001f000
   \   00000012   0x603E             STR      R6,[R7, #+0]
    219          
    220              // set clock dividers to desired value
    221              SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(outdiv1) | SIM_CLKDIV1_OUTDIV2(outdiv2)
    222                            | SIM_CLKDIV1_OUTDIV3(outdiv3) | SIM_CLKDIV1_OUTDIV4(outdiv4);
   \   00000014   0x060E             LSLS     R6,R1,#+24
   \   00000016   0xF016 0x6670      ANDS     R6,R6,#0xF000000
   \   0000001A   0xEA56 0x7600      ORRS     R6,R6,R0, LSL #+28
   \   0000001E   0x0517             LSLS     R7,R2,#+20
   \   00000020   0xF417 0x0770      ANDS     R7,R7,#0xF00000
   \   00000024   0x433E             ORRS     R6,R7,R6
   \   00000026   0x041F             LSLS     R7,R3,#+16
   \   00000028   0xF417 0x2770      ANDS     R7,R7,#0xF0000
   \   0000002C   0x433E             ORRS     R6,R7,R6
   \   0000002E   0x4F07             LDR.N    R7,??set_sys_dividers_0+0x4  ;; 0x40048044
   \   00000030   0x603E             STR      R6,[R7, #+0]
    223          
    224              // wait for dividers to change
    225              for (i = 0 ; i < outdiv4 ; i++)
   \   00000032   0x2600             MOVS     R6,#+0
   \   00000034   0x0035             MOVS     R5,R6
   \                     ??set_sys_dividers_1: (+1)
   \   00000036   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000038   0x429D             CMP      R5,R3
   \   0000003A   0xD201             BCS.N    ??set_sys_dividers_2
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
   \   0000003E   0xE7FA             B.N      ??set_sys_dividers_1
    226                  {}
    227          
    228              FMC_PFAPR = temp_reg; // re-store original value of FMC_PFAPR
   \                     ??set_sys_dividers_2: (+1)
   \   00000040   0x4E01             LDR.N    R6,??set_sys_dividers_0  ;; 0x4001f000
   \   00000042   0x6034             STR      R4,[R6, #+0]
    229          
    230              return;
   \   00000044   0xBCF0             POP      {R4-R7}
   \   00000046   0x4770             BX       LR               ;; return
   \                     ??set_sys_dividers_0:
   \   00000048   0x4001F000         DC32     0x4001f000
   \   0000004C   0x40048044         DC32     0x40048044
    231          } // set_sys_dividers

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     mcg_cfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     mcg_div

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40064001         DC32     0x40064001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x40064000         DC32     0x40064000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40064006         DC32     0x40064006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x40064004         DC32     0x40064004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x40064005         DC32     0x40064005

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   mcg_div_count
       8   pll_init
         8   -> mcg_div_count
         8   -> set_sys_dividers
      16   set_sys_dividers


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
      68  mcg_cfg
       4  mcg_div
     750  mcg_div_count
     178  pll_init
      80  set_sys_dividers

 
  72 bytes in section .data
 956 bytes in section .text
  80 bytes in section .textrw
 
 1 036 bytes of CODE memory
    72 bytes of DATA memory

Errors: none
Warnings: none
